%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.994 Copyright 2014 Radical Eye Software
%%Title: ermAufgabe1_LÖSUNG.dvi
%%CreationDate: Thu Nov  5 16:02:02 2015
%%BoundingBox: 71 450 348 721
%%DocumentFonts: NimbusSanL-Bold NimbusSanL-Regu
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E "ermAufgabe1_LÖSUNG.dvi" -o
%+ "ermAufgabe1_LÖSUNG.eps"
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2015.11.05:1602
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/05/15
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  0 0 moveto 1 0 rmoveto  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.06, 2014/05/19
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 876 2014-01-28 15:03:13Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/UniqueID 5020902 def
/PaintType 0 def
/FontInfo 9 dict dup begin
 /version (1.05a) readonly def
 /Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
 /FullName (Nimbus Sans L Regular) readonly def
 /FamilyName (Nimbus Sans L) readonly def
 /Weight (Regular) readonly def
 /ItalicAngle 0 def
 /isFixedPitch false def
 /UnderlinePosition -151 def
 /UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec

69D900414434C93D12731064FD536C430F0D1610CD3375452676CD606A5BB242C10907A5BD93
76F92A21AD5B1848A71C72C2B1F2E98FC6DBFB2E6C7D58F554DD1E867BFC4B07A94035A628F3
E0AE48FD1AAE1CD99EA9BD6A0C2A5CFB81777D13FF195E956F8556495B0E331DFAB4B85E7ED1
7E24A88BDD49ED1E6A99E1EA53BD56DB08D1B932C6F8710F4F02883A38439BBB0802FAB586D7
AFD17C75C2C867DC8595E7F5D98F9A3C5A1E366B3823919841929CC44F5FE6D2A0393FDEBD1D
14EFB6FAE1FA9D15B5C57B3B3E241B704A53DD0F8D1EDF05B0D574935ACD7A667A8E8743B27E
906BE3128E9943B31050D63500866CDAAB6903605ABFFE737E95BAA8CAD2C6CD5380FF5961CC
BC56980823AE0DC1F87EC51D79B152EAF1610AFC7D0A7275025EA45420CB6462FF426FD3A0F9
F6356012188B3B072C9B3AC6E09E111E66F203B84B28FA74E02F510BF39A9CB0DA968A528738
2C753A24E4B9B2A1B1B90DFB3EF712E23996A31F115B9F6DF17DB1DFD368EB1A5AC477473B49
2BD7F155486C9F1D6F2818430819AF48FA0E8228F88709C33E4522DD66CD8BD3889D987E5C93
7A18018B64AF4CA6FF1CC26375559E2E811867C10DA979533C1FB61B0713D41619F53E993B60
77539498BEABF1CBC6135280888735B11CCF273EE1057B31AFFED835F9C07D59634C7B98CFC5
973A20AB5704E65ED9508506FCD91D14A007DDA6A32CBB92089F23879796C84033D649BE7AEE
25FCDF372639EAFA8B4F7119A94C1A2557BE20CC99730867F3F12FA0D94060021A31B6AB77A7
6B3A82C5C21D1655F9D60323CBD0370EFA4A7FFE43ECEE2FF2010F2198D5EAA915A1214A628F
539840B827766EE0723FB98694EBC19C52918BC041362E7D04F18F2B89A730984F33BF9F3166
F182CBE9C7F9634C0FF3C4595F0DBE6211AE7BFE2DD1DC7300EB2E2DAD4FE6DB12FD1D656E5B
9723E9B459E88FF180D7CF1694DDEAB7835372B42840C0C8E32EBF80BD51B9B0A2BC7EB5138B
97C9BFC0B1601C4D50063E8FB4BCD9CCC8285F548D0DBF8FED28461B2B566FA49155A8AFC116
434B39A80DEA350A2AF2ED3E0AB1F8A3DC4399EF04A51AFF29847EEA033D8E37195BA171287B
B3F9FB79CE4CC7655690E65382E789B41C41C77B2D243FF4AEA956D5F5218ACCA29FABDAD21A
2CB80D16023B4AF7D030BA2708D94B6BF8605C6ECF8B6671BB1744C6355E1A6711E486DE31D2
776D66120F13950BCCD6FEF9C22DCEAD1181146DA0FCBC27F02E676EF58233E21381ECD7B548
158B622E5C65C680F85339A93941020BEBDFDFD1CCF0E84D8F10C927D146866249CA7A1F0530
1063AAD96650AC58894E4BD3A8597A039665257522809FC9C5A0F2561BA71185A191BC66DEDB
187ACB590E6B5D673E24E5B1EFBF79BDC092690CCE83EC0C64176D5AC1451B55CEE4A860ED34
E2FC4547F314BDF234D7D36EF03A241257518E9906FDCDFBD7E7B4C648A41341787677BDA550
341B2F1DD6E4E8D22305E213E2E177DA99D22D2AE0E15E6317C24DCD04EA82AEFE5137553F2C
394E8FA1AB72E31A31D995ABAE6181753EC8E7594F7E8810895A7545CF7E5698B05FA8A2BCF4
7FAD1E4A86B28FA010CFF56A384800455BE036EE896DFF611FB78DFEFDB0F0E48A9813080DB3
5089BBCBA5254F78A64E4090EDF276645961C355BCD58B4D61F8C9797172F66A5814B1616C8B
FD6D3860CBEDDC58F45670C2F28CC437E2E3D42CCECB4B145AAEF9CAE80C6547EA68C0D45394
5F7CB55E03FBDC29CF12046CA3F4638B131E03EA8A4D86EFE79EE274F4FAA3E8043AE78C7DED
728931C69B9F707CDE97442B360779D4A07D1D8AAAA7067444FBD50B106389C0C6C1917F7200
0E75A7F058AB549FBEAEF528DB44DBEA3021441D9A00F04DA765D9DDE32F8A88EE07A77D5302
60443DDEDDADEF98B1EEAFA5F6ED123E0CED5EF2F913911022705305BD94B9677C7DB01EB328
05D357B6CB408978D492A8D8002925C55CFB20AAED5531A44FA926093A1CB2F373E18A9DC8B2
B87A39417D78D8899BDDF305A682B4DA5855DFAD242D3115B7592D850152057EE65B63826115
80F8E1423B68E9DEC70E8BC41368F1C07072F5BCC3C7C55D7F1126F1BD66FDC19E8190B4BE56
EE011C9485713F28D33D325BF17AF103C3D05E77BA7CD12D8ECED28C4267396F3A7155A8737F
9B0D7DB0319DAD607FFE22C319EE64F60C578C35ADD0A8D9D4D8618F1EE2909DE8C549E85DCC
F16664E9FCECD191F8502FAA5A84AA4E995B235DCB849F9A38631E3B9ADC418F5D6B68725D84
2D936CE35FEB53C542BC0AE4D56F9A2CECCAA12E4893A8E9636497E2F53E4F7429E293F84865
B0B194D11073D99CAAD492FC6BFA3C6AE8C12E9D95AA5FE7F43A207656B360B4CBD3A5DB3320
769FDEE29279C49084E4B8F79E73AB562BC72424E480CD06EC4625F390849EB491BDB7EDB7E1
B36C547753CF8F73B7BD0299E2D51F2FD2AB4FE53C63C78552F4EBE1BC63A99F3B98646EC45B
5198EC94002E96698B27A9F1D866DD0AEFA30551019EB4FED06363182D67759500C3A762254A
BAF4A2F2A88C43757FA0AFE83447634255FC5C1E00F7D267D63EB5FD43AF137953153675A670
01B84480DE176743C240B25A68042AAC49ED34A569C8A039E504A40A70802F41B44E5800A7AA
E8E3377B74D39D491DAA67BEF4AD8170CC81A8A7B2CEC0A7254F280CDA8989C9751BF29C0C9F
23043251592D1F0074B8B6AA22C916D7674561CB69A2A4A81938B0F74CB885B1BAE7C0655A7C
984B6BB390F4B3EC2AFDB990105CD23B20FFAAAF9275429FBF067B5C12A514241C028D9BCBC5
D67EE73F5B8935EB6202618EC68BC3FC7ACE51A5F57C8915F67299ADAC78AA16B13DD10CA06A
91943B36AFDCE58844433CF2163A70C202BD6284DAEF9E2FF9C2B9474FC4A738C02ED75C70E9
4189B84AC5545D34D3FBABC01F2CA718059EC54B1BE436B1AA20E11123F70792CF315BAAA2FC
2328A3AA6C506B75B8957C141F634E9F637FD26F14D69D0678D5F8EE1A8340DAA18AA6AEA3BB
BA81B3FF4B7F4A00602105E08503C57C5E8DD6D3C74BF638791CB29CC6A95B2811CF61B37140
77BEFC318C4EE38B64D46E5965A9816CD56B91179B8A92E110F74D2902B8D89DB7DDF5B01242
E3CA7A31B3DC17E59010E0962BB77092E92C6CFCF43E40E621B86E1845DF8F8927A0D3012EFA
854A7B3737608B0016CCED92176D4ED553077F245117A4DEE1B60AD95A83246B63E594F3EE04
DB9BF961B46F8A7EEC15D92216E60256E1BF68BB5539E181250F81FD363CE13CA8990DCF8C3F
F9152026FC384C1FAB27FD52484BE67F302A25F15A6C401E49E042C15B944150153C99FBFF35
563340E1B64DF5D81D86A5075DE64C1E8ABD78A50C25B26DC97E99984009138D74BB8EB501AA
4323746BD9325057B1B5AFE094894ADD806E5A7695FE9B0A14BFD2073A634B53B9CB7461B911
244AD00D38B9758B2EE330FA934E907162B395AD1F5F7B821D8A6B759DD9BE83FC0B5D8C0E65
8DB980C6205940E39B5DBBAA35E3BCAEF7664C1D5DF03311F94C6F84EC94A7BA3AA9C1826016
E9B117E49EAAE4C9C8A243A6890CE85200B8F4EC0574543DD594071E24A1C16163CF0AB2D9E1
87F9E15825F579DA8C3ED52426F200571834BBDC44ADFFAA4BC7C2D477F6E80DEAE0F254D079
69ECF456FD9597555DB37C092B7456DA6906A741EF1CE52397CAE65AB7FD7E14AD34F29913BB
F4ECFD81D705E3604C958057241936D1A07E1DF6572B46399FED2635528AF4F2EC88B39F7B01
398298382B2F27E7DAA3B4D22CE6019413F66A8199960357B0175270E79CF764615323300617
8B9A6BC43DA3A8BF19E9B52FC99F4BA2126C53B1EF4A345B2F7E4F98034372230D2B36956329
630A38375AF28BD949521E9A39F0C9E0D7AC835C4244B341B12053E962E3C36D4299765578EB
49D246C409033CA1BD669EB8A62C1194EAD50A0D93A09C632250ABC2EDAC18266FC1D0E4C1A6
FD7DF63B46A04BA972EBBFB2609C456A49696FE5BEE9EEA1AEC3F3DD991BACBBBF3FDA754EDA
86BB9F9A6CAC0DA61E177A9091EDCB012F7BBA3CCB1C13A43926A0D25CB32A4B8C2F629F4799
2475754878D605E5DE8388082E75530174D3A4629EBC1F00D628255439FBE94AE6C4FEF76B9A
A0D1E9EE8B39A0DB0FB6C36C55084ECBEE71FFC5BFE9B178D148EF451A48FC8CAEAE1DEC1AD5
A6245560EA4FE44E3BF8307603B524702BB129654D181DDADB70C678CDD69088B2DC8261234D
B9C7A933DC532A29256B34C3A05D779CF97A06D4512C631E3B14687B9E351BC5D529008C851C
24AA3E8971508E3DC97282F387A82427AB28ECD7FE0374C13D1A008AE66DD8944070ABAF45E7
A60642033C4EE644F929E005007E325CA8AF4288A49CF7549C047523EA25E489AF740105AC3D
461ABA8C7737876ED3D5C2E879C163D4DAC3186D8C4CA15E8E1CEF082643D605842DE26B2078
4B5BFA3F09368345C9101238B261CD57A6A20DDD5DD38886EBFD84A70D972F891F598E3CD6B8
5BA97FBE9250967C3B203C6224FC78E91E9105D2D7F72A09204AED2F451DF10832141A2221CD
0C2D75C37B263AF814F3301DDB948AAA80DD0357E35E1805174802262303F216B73A87CCD964
41172AA81B1E435750E5C665F602FDB02CBAC18FF548AF36F41E219F064C5B64D88DDEAE5ADA
11FBBFDFC1747B8CFDE51C128E471ADDC48BAA5277AC6F0799C903D18C63C22AF20CF2F02F17
7037738A152A0D5E17304D99D7A4E87EB609C7C0F86FE4BA59140DADD4CDE67EE108845E975D
FD8D7A1A8FCE80883E9D22A36E3CF90A1F2103A8D3FD5F53CC8711030D2483F7564F04ABB39D
0592E327E72139D6A9CDBC148F5ADD9A192526A4C5366D3D5E566E70CEBEBA9D2078E2977923
FC74B06FAFEBB81EE4366A32CD3B7EF2632776ACCFEC671B7F820C386701A97391BC1D3236EA
D403F90750DDDB6BB12D951162420C6A15FAA0BB78248F7EC1AB6A1C69E809CF36C0CFDF2836
10C3D967A41408D373D5FD72385EBC238F18A254982D8B2A49ABE28871B49AAF2CA3A3134AFF
FEB9535885DD89BA5D2EBCE072A99F8718C1ED5F374D18AD3D2AD2C8B193113F1676F4396C92
B608CA2FE99C258E68A1EDB98477CEEA17053F6FD1B24229EEDEEEB0A296667E2896098DC756
ECA49527D98DA373BF15A8AB6AF1F80E38282F72E20E5E9A1C1CC88578094B535CBBB2B9688E
76ED5AA7BAEF252745A920BD41F2D6D117705E664A179A2EF37E583F98054DACD3F906C5B74E
78E836D10D890EF6E51603B61CFDCD5121DC2D3AD687BF3245C1325FDF500EAC93D45E23B26B
A05BCD16CF26E00CD63BC2D0C500922AEF5900B332EF50B65CC937F54E48919D9D1CECB5E81B
3CC862A675AD5B403EAC1F9140E2810C26C3A3D74E4FB87AC80E78F97E30479FD649FB917A88
EF37239AE1E64F7487E5F45A6CEC1F613356D7EB5F46EEA50271DBD4226D6930D1C4E38D1B00
CF95E18714A5ED0F0CD6A10203B6601FA373FC31D0AFF4EBFFD288392D480180183B5106346E
C0D1CF4D3C8FE21224500D3D3F251BD0681A3B6F065FBEF75C7308C4D82D089EA490D7AC6380
DA68F8A88CE96563211FEDD945549CEF2960EC542095FEC9DC6B4D4613C61F0DE5FE36D0B834
BD19501B1FB73C05757DC4222A2B4EF45588BF5EF51C5C3F8184C4304702494C828D7F6F8FD4
378A581B974AE16D51C815C196FF8902C3681F4BFC168D29F067A65A571E89B816B4E095F264
BA561334031AA8D22C29F1B161531398CF72FA62565FEE0260B0DCC734C7BCC1532ED7D3A915
D12497EBF9DE920F508B90622ACFBC636B30E354220FBC80CACD37085405668BD979D0E18FC7
48D90381ECEBFDE7B2FF90A385E9713BC55CE84DA933D94BB239BE152494D3D57B05AA003DAE
9F92D5C55E8921F16D5EA3591764DD8BE1E70B4C19816A4A3AABA875E658FDC67741C203F1D4
E62B0FE02F63696A48C832F41C5C2E6827A362D48140DD3B2E0AFC86FC40A8F2C448F196FD8C
051B2EAE74850D054DBD9ED912456F1DDA8A6A8120A9C52F909C1517F0F1D60A89111EFB276B
08455D3BB452417F1D87BCFE0A8F17A0E3DD89CEB85987088E283E95D63B7FF850FC9EA13C49
F92B5A658B7610A025A6EC490F540287D85697F4CA8E2B3CFC3CDBDF60F3ACCE2316B4981273
3B024D44A8E7BB28BF01F80808585CACEF9C4269DC8F235C15188ACE4342FFCF5F0BC646D3E7
47A353038F60BA7A7DB23252AB6A2D1831D9785C82BB6A8F931D012BC2C2BBA87E5DE0DFC052
2E14E959DC634FA72C5BC51A536D322BDAC301E2E0CF756E3CF532C4004E60A63DCDCFAF661D
BBA6A85FC3EEF3CA4F206F6A2BD5C3FFA0C20C80D288D2A6A6F6D3664C5D0355F8B4AC2D706F
D472013BC2EC142AAE8F141AD97E59D756CE58200D76596B46D6D942E744D6F2588DF121EF72
C1B4EBFEE1F541EDD3377519AB28632E3CD6C33E83D5320D48B118A32B7943129A8A6FB15CB5
0DB1573292EB2FADFCE8FCC8C401FF0FA522B3BF30B87D1B24D16131F4EBAA7DAEA08C5B169A
3E287357EDCFAB5B33354CD765305222AA78673761416B29C96AC08886A123ECB2E381370C6B
2057FBA48637C818DB92BF8DE894AE937782BEAA4E32DB70A720949EA2BCFC54BB196122387B
A771441FFECBD6E0FB54EFD294A3D109D1233D5AC42D4B4DA68FE4217484BB975578C53A08E9
4728516204B126BA1172331407339B9D873FBC84EA5B3B6A7B7D0ACEDC3E042F830830CE565B
7A26F1BDD54FD21AC76A325AD54B3EFB01D867563247D4F100C5B363FB3A218B9098AAF5A3CE
FB6E4B4177D9B6BFE23CEB43E59A885074294587304998154D0D74AB7DC1668D12D1B4A10777
B78882E133CFFD355AB23231C6083B55B1E940F755381ACF661CDAA6B8A4EC33C89BE0A2AFBF
B65468AB16AF7DC083F7ED4D62695280E8D0E55D6D7CEAC92998DCCF29891943974D53B8EF36
3AF6ABA6D8BC0D155165D1244DC352105CFE06B44C9BCF236B074DBCCA06BF14EC8F81B9BCAA
759645F4C27A07ACE5B4B8D9E384C862ACF202D1C217ACCAC9871BBF6CCBEF4183749D02EAF9
5396CB7A4E84757D9B9D167927584924633D70DEF5664184E7CD7842AF6BCD22354818845C56
2B3801AFCDD0D72DBE1815BF1BB3CF8EE1AAAA83DE6A3E27083E62AB2136F48FCC5A3997746D
1EB0B703886185F73072E2745D3878D3CD83FC523677235C8FBBE0C8DFA45ADE77FA687A0E2E
D86193CA35EB436B90F2925E483BF5D33D2AD942346F45029EC4B54109A1B5D369611087FF5A
A90539291B88DD2AABB3FC795EC6AEC574FAC06AA6357AA99B59A29F51E4AC1C3637F7B5F862
8FFCE04E26A842F4B13428E8E87764015784232027AC430072138757B73E9FD5542949BBD1D6
FF9946049D4C0A4C37566EA8EE84EAE695663412BA83A353D18CDF614BCF3D8E243CDEDB86C0
8AC7600040EA55C14907854B8DEC1ECB85D369E6143C11CF1AFC2BE394368B5893ADDD71F037
8DCCF5F5E48B3C8835CCCE161793B918C1D4E51E344118FC1740B1D41D435585836B32615322
47A8570D860C155E03D5A8EF33DECC19960542DF7B4B6A7BABE0AAC2213157BF11DF21B109D7
DC8DDB8C5C1025AAA6EACBD2D588CB23DBEBAFD3A66FCE2FBB4533FB8C1ADE543C3677D12983
7E6E755BC1FD91AD14C17D7BD930B6464F2F79DA7D9C6D2C1A9F0FE37C0639996AC611A93483
0E2047A56505D0404FE29C9F52A755C415D740D9AE598D6A023DF5ED0E1DED43B392EF1561D8
9CDBCE05F0733AF96AFE2B24B30C5D725D217D743E8A023EF716037FFF953F85DCB538910900
C3294C4D95988B9CCF37CA44199F828F5247FB7155C8CB092B27953FF88B44C870DBB3B7D527
A3C21E5B3C177A9CA79AC129C9D2D48615CBDC203CBB36D372CD605FFCCEB2CAD3FBFB0FDB0E
3476859A5F19C5F7C6669E903A281D4412B860BD929B1EE9AAAAC001909FFC90F758E0364DEA
CD0CF2BFBF989539F3FC98DD195BA98F47326B6308D41B37EA2BD844182E699AFCFD4EC3FCB3
E24C67F0203F3583FE31B53D93B7BAFAA6E293D03379057EE574A15B9E76B3C4A0C23E1379F1
0EB2CEFEC5F0C74DF9D1E3F15A92378196D839E941D42ACE33BDC0E2A514CEE3FEDE79A107C1
CBCB893A52E16F9650576FBF8B910CF7F16CDF1432BD112B865459A27799E63F136DCE31E633
646142E4B2A7C7D6C772B1D5067B72113C17FD8E45E800EA2F2F92852762F5D5C6304AC5E0FB
7C64CA58C9FECFBC66E6F6EA7359F270E526D497575B877C38C1AC2804040AAE27B2D42E5FA0
4C6927434930BD937F6B741C9455B48094D2914BBE16EC8B1B2257624DDA57C53FF3A86C07FE
A3F9A8255CB172B60E10E69F515AF4946DDD055A37FC3D5A6F286586F0D7789CD3E5580098A3
FCEBAFBA13BC12BDC742D29DA24CAF0659C54F6257215D9B2DE05BA12D91B143AE7904D97042
BFBC02D56F72CD84962EBFC2DB1F724B7908B62B7EFFAEA4FF78BFF8C9AE5A3C92F4778E2E31
873F15C0D1435B7F5962F6E21A1FAD4D94CB8C5DCF18FCE875BCA9550E20D89C09884BD8AC29
1B0C7A6D62F9CFAA0BC1F13DB710C6351A6D549013D6D888D6829EB00947CB6B546128742FFD
3218B645DBC3FBA97205FF8A8527F1E8CDE3AF509B61B413B0C25F7C9EC4EFA5119DBF92F497
E9A10644AE52A5B47253E423BDEBB6A54A20BBD9EFA63D2E307056843BD1CE641C8300C594FA
D16406B25EF62046CE901F65E4E996910DB9A27473CBBA22D132800B97FD4811E6B81735AB30
E65CFD6C8753AA7FD68BE77F28353A7A514F7B9C4096852BB018101B8E0EC7B88872E9AE63B3
258FE7BB17464AB1A4F28A71D9C6F521907668FB3A5DEA208EF198CD09E67E88E1267C6CE8EE
9050B2BFA1D5C6F3824ED5A57A4872AB418745F7453C174D514A9C457E84BF7E44C8A67BDD31
1278887BB697CC67CCEEC9F179A5267E7075318BB09455B3C07C499446B670A70C1CA5E6BD28
143AFDF0FB7D36DF33663EA0F8C12D01631EF8DE21DFB38C7993691EC0C33662266A03AB4A31
7F6C2D25F46C99F456A9A7FBA51067D0FA704D437E62E8A8124F020F8BC59461A32BE8DFF39F
8BB4E92A549EC99BA6072B2A6B66F0EA0015F96CBC087AA9BEF1416F466250647F37A368E75B
2BCBDF4FA3304D20C9DC56920DED4EBF55C237F6769B59063A3EB017B1A663CC9481C79B8948
E5492D8EC892E3C43C08F0C1A87A30D7A9B603F35241A3CC9E52165D8D04ED952727B2A60161
85D2EC32B4BC88B5522C2D7F9DB2AB060C5321113F0468C187D58915979287566B045D4D73D3
7E2DFEDB68C0DA667548063F775E3258B705E11541092FB5A46E82845D720CD9A597509122E5
BDD170B4002E727A66174DD6409BE8720150613917E43FF456B5C43189823B839EDF533FB7D4
C709F51E2ED5AE242A1EC4F41939FF8D89D92DEEF30B1108A0D31DDD6DD9AB35CEF4AB0FC7FD
F631DE6DBF360170C95A088681F923EC7288B07A51A84009230529372491044E11949574495B
F8E806EC448D0A7A2DF74FC07E862198AB516BC3480C9D700980BA4758A69D9D55295BAE8FE3
B8A4CB2D5BEB528CAC4889868A889A8B4227ED29B9A8CF29D9E88F2450C67027AD5C1B21CAA3
B38798EA155F5376B193B5A3C3D549414A7DA07F9A776B894AFBA1C099D37DCA4C17099B69CF
AE216575942370B1D384F2B6488F76144D1E1CA77D242648DAABE525F87C11602CF712F95A81
7B0A98D9E54CC3FBB41A0DF3D31E19918CCC9AC312637F18CE4FBCB1698143F1FABDDB6C0CC9
13B7269E7DFD8D0BCEC142665F281C6AEC02980AAEBC6A8E77C180BB5753BE1BCCAA518423B7
0EBD6D3356AB50F5804708915340E38B68050C32797603E402D351B7AC1FC6D95A932C0271A8
05EE7FD5E0C5C1C20EB7E64D8CD7F126EFC463478E134BB128F70F82B968F022AEC9ADB6CB0E
EBFFEE6604B1EDE0D8515C6AE0C9B0408C2DA3A912C51F21280878F2967DD236CA55CE44F0C9
F9A915C8D9AED9B6A3D13C107F18C6F43372638EA7631EDDAE78B32402581FFFD9F4D7F53564
211070798BBA7F51C79A5B11A8AB865584AC9A7748FCB9074A47CC3C3707C6957F9FB4904A86
AB6AD881F1319F3E161507546F0BD8FCCA92B47CEB127DDA9E2EA868C240FA2C17293A83B3D0
F6B8D9715DC3306F41635F16D023870DF1FE5DBDFFA7D4F5A4BDB1DFF6874CDD4ED9967FC799
B16626355DD8B581D17DD202C776028657EFB23A97D6C58A1EC3545A494351F67C7A0C36CD25
45445CB03073FC014B1D2D97926ED55C0590F432DDD6CB11DE3DDC1212622B351EE9AADCA98B
DBBAF6A78CB1950717BE38E314CF39DBB967768684847F456A86BCA3C90B7D4D3711B24553E8
92251F704874091336BC8236A8274617444590EB9057B1854DAA0E70BF182CB400C510AF162E
5A06B22B0B27C69F14271C0DC982F64D21B7B557FE714BB76FE22377673EC61F760F87C51B14
641FC9813202A3A861A0E36EA2870785B3F523F67EF149A19AD352978291FD3BC6A4C05E7717
F777D09A12D89DE562B6143A300558DF252063C0F9519E681BABD890E636BEAC1BBF457D5DC7
D0F1248848E48946C8C66BA9F345A2EE66E725C1FA4101EBCE5DC5EEC5C7655EFDC26EF814F0
E0D8972B255EC6338E7C7E5A59FCDC311DEFC94DF922CE892B9B453F8B7236603CEF2BA3C291
FE9D3891D03D8CD5147861F9FCECDB1E0C4DB0AA86266E24F53636CF46E53D06DADE2258081E
64A26502713AE84D7EF1918FAF5EA1DD8AED39C52386B1C486496A635C2234A4ADF881ECB40F
D9BCE066A3B9777FCD2D1BFF42EA412B8734429220C1159A0690C8E0B22D5B8225C308F87618
00A80C2A07FA72AEB31B8EB28AB961F7721C1BFB0773642BA72E77102997B7C557B08E0DF067
EE387593F947C36D3991A264979E5A1FB78D05B9AEC119ACDD3F5036A9C67FB9E425C9EFBB91
8C7F04BB9E1CD05B95137D8AEEA46BC69AE0C3B50637FC6EF8B781D938AB703F62234E13E0E6
2DC258AC6A650943692867744BA4984A1723F59F71BE1072DBDA7B1E91C8C3DF379EC81A7C29
5A7407E59FAE78B6227A9C34BFECCAF964137C43B2C945068605A974FEE6B86402D237F47CA2
61AAF5622CCA28FB31DFEC9B3AD78260CCFA13C4EF211AC8F8637AEE6B5579AFE8C957B669C6
6CAF735A2155B15ED4F1F22258E8E39C0FDCE883BC1A9D30083636DB87BFB76DDA816B234F60
713A8327AEECBAC306DFCD2B1235CA0F15D9664EFE8630675F9DCDB65207CDB8677CD3E87C10
2DADE7DD6A5795D6D759866F516A5D6F42B463193568C56DC795FD23A5D18DF3F7ACC7A2CB4C
E9978AB2D7DCD5762EC0419B61D65356481D4BC68A505784101D51CD8AFE6477FD0B66D906ED
3988CFF0E0D420157EC976D3B671F60289539D993B994E67155ADAFC8E17A2EC2E9477F8578C
0D912B130DC93CC6E8589075C3DC8378D7752AF3453D1E5807202E2B09211A74DE345971FA4C
6638B69391B57AE4035C97AA8157B3461738953A26B37F1F325F243A55CC978C4FFAF7B36BF3
A54748A85BB5668F2E391D2F4CAC541885B774B83F1C5F6410A7A71B98F54E9C9CC7A23E083B
F1C1139D52601C0068656BDF738E998A9AC08692C7F7BE0DB205CD3C5748D1EE4305C0417FE8
8881BEDF7F590E2FE5EEE3D741A8D393CD7CE485BBEE14A122FB60545690DAF27DB115B78342
39F121144C1C4DE2193812B932C3660F8B0515067F0D0454F62018F90096A1BA611AE6F0D9FB
D922E12842403CB7C3057627C80D6B0F621297A1AAD410E3F96CBCE47AF14DC694BAA3CA1705
0A9B4AB4BA2D8A7BB0A0C0000F826633DA7BE83891A2C1B396EED1598B6A72785C550AE8198C
0BE76EA467E5D555144ABEE0C8B590D0E49663A58CD6FE9C09B102DC29EE0A5B45A9159BAEC3
27CB6C378296A4A894CC9F526BC54A5E6EE9FC2DEA19863E422C8C72692DC178EE9F085D5328
08328C566CC48C28E8B1CABD8F42A16929996E45DD8CE6CE2BDE4DE1353E29A9BB5BE0B44C49
E2AAD3BAF951BDB2185A4C31C703D16A04D3FDE5B243F17ECE882CB115AEC6D1A5884FA719DE
B0E6866B7194AA8B50BBCD78CE9AE290EC4FD0489579EB54D1E9D5B92083D5FF55F28A5DE47A
815E10754EAD1125CC64AE11246BC5663DE3BFE6119BA5CDA60D1A720C80FA03880210FBEBC7
87F2C9967F31368ED8347BE6C77CB6C573B5B6F5001C8E9BB82868B92CD214EA8ED066DC583F
6182F8C255D9769352A18E11BFB294EC588E96389E73082B30455FE14481D35CA3F82814CFEF
EA95EA00712B282E6A81818128D80054F2B21DBD07FCDC52964BDB5E5013685F8DEEFDA2BCB5
521F9069D17A09B9F51C2CA6FE08E0C88A8187BE2DF126939E0B40A01FADBF9CECC4666D7158
07044F1EEA5481C8F3CDD7570F7346580F034EF4A4741A9CF7EE522B9917833EE7DB54E46DF7
EE8A1DCADBD69046F61645D1E5E8223BAB55E7B954AB339EE8FCB110FD719B8B9B4B404BE3CC
0136157DA664CF58305D5A0F0D420364D004F07EC5033F95ABC12E75DEFEE2F6C3123BF7C79B
6F9C536723971295810157B74735D6A3821091886CC47016D350F82D945C486BD6E4BB161B1D
379C43C2735D564F012D1AEB3EAFBA8716E502A29ED890283855F41C1AFAEDEEFE3D54B489F8
2A0754B946DF4BF3A884F67887C914EBCBE81855A9FEF46AE8CEA338CA8D69AF5F92EDD5379A
E5BF2D127432374F95DBCACFBF29A2116D9ACDD70F11FF7C250130739AD6B2A466B5F0115DCE
ADB035C9376281A8CD5DE64402CCA2ADFBBC76925242F734641276C726E0E797BACDE80E23A0
2062FF32F7E501FEE35323EFCD9D2EBE52B47DAC34A79E369E0E8DF6A73845AB76E6609BBE49
9EF7459BAF974344B3B9A6C08FB520E63776818C47263501A90F63A70D26066061579176CA06
ED53AB181F936400160A16DDD83867745F6F684380537FAC719AB0A2C15DAD214C03D3F98697
DFA7CA5BDA83114E927CFC1330B2115CCFE21C0E531E2DF16957159AEDD27D28D754ECBE90A8
79F1254430780EACA6A5714F8F399C5F11A4EE0E8583D13E13F5A25ADDDC9BE5D24CC49E3440
02D7A6D4595ECBC75E5EB9E4FAF9E695DB25A2B7533F59B50CB765E60EA42589C19D38622F8D
406790F4A6F515A9FE8C88066D8704A70B17A750002A9F4462AC581ADD1CEFD7D12A49A90AE9
7AFD714BE6AACDBB9278E559FDC8CA5447E7FEB15CA462525D6DB510AEC516DF1DC8E5D866A8
561539554A595AE011D1E16A12DA58FDCFB87452D020078D9C6164B5ADD26BCDECD22BBDEB8C
0D0241F73367810C6D6F7F0644E5082F8F020844CF77E7EE09303E583C55FF96364781CCFF02
81AF27AAD988A00BA3D80ADDBC87BAA65D422C80DD4CF014D0F9E8A840509A97B047CBDC6109
E95385E108842DD512757AF7172F189CDD9707E27A12E4BB6F4ECF8A25D15AE44052EAC5B272
49FAF553BF942E8295FD0A7BB8FA9F7DCB50E02FCC797EE6B3577DA8D3D02DB28CE78BC219F9
9161A38D89D32F948319B5E331B7A9A7DA8AC178BE2581ED37E83825FDF41FCF4161590EBFD0
C0DBB17E25A4D2D79F0E2C1DDEDD99FD0D671E1852350B0D6DBCB141F9770217149E2E750D24
133FECE9DFA0F3F8A69B2351C53375A75B0E9BCE7297F8E91313D4F990219149E633A4EE7954
110BC7EC4D7AC7B5E5D57008D6FF7C801641E2689CE52C06EC78857672F809584DA94EC360BC
90FC1963A3570F2AD52DEE8BBA840A9CBE5A17DE7F2C3A90384BBE6EEE6DE553AE1B6282C7F5
17570FA60C7816E502EDEAA85A378D2CEF20196AF902C88FCCA80C9E65A5E92AD39BCDF530A4
F97CA4249E884A4960551A1B41E2BD44C68901CC22A0AD835E81CF630FB8F616D6F1AFF86B21
B40C10286AB256FF87D57AD3D429FA0B732ADF640EF66180CEC51729FDBF548198E02EE3F253
2B929369E76506AE9C0A9707D5AD6D7D2005BB12EB7BDBCFAB442420C49E88213C365661E3AA
81561136F274702A6D38FE9B5DD8EF5414588C4B63A99114F908AF41B0E53EDF67D1E2ABA74D
4FA40150E17E9032CE814153766BAB3D5AF2390C4519A7881C958FEED96723D7576F80D2A924
721519632B4F53BE2B1AE38192815AAD70B62D283477AB58D4AA7E07CE5165FFE16AB2778C67
7BC1C60A6BCDDE659F5BFCF86899A4B565230E807CED928CB390E350DBE256A32BB5C39C5F3C
C1B3E145A333045A44717D9F29F63A544AF82814BE20ADD84BD9F55827DCC218819215D44777
9311BB1F8FB48799B489E1CCB3C4B0E9906FA967503FD8B1022B0EEA82083D23062492A2252D
07BAEAC71497C01C3E0351D23B17C5F9A553E3764398760236C5598317E364D3628DBB20E16D
9E59CA0795AF52523A8B2E4556E63A9CAB48B305E9395960B3529B49DB5A8C8036DE87EF9E25
94017FC86C6ECFE14FBAFE6EC4D93D2C8246209614DE4859BE1F15F82490760C3C7CE63D66D8
01A7130B78623D7555F1F8C4A788C119A24E107110459728FEDECCD3C4BBA680D9AF4E0E7B01
089DF00D6D796C641A5CA748BD2FC41C07A71E8F7ADAFADE8E5A5E847E1010BFFF52D82AB29C
4FACD228FA48EAADB9207C5C596901F815F80748A520DF0339E32001F4F8FF7ECBC95E6884D9
B078793697E0791F4C913F55ADE59E74093C4A52888DF670A324D1E92109431FA3F8A8C32BD1
9A4AC56B3402A3BB9605D14C4C65EE542C6AB8731EB5037DD6A09E2668B8846EDA3DEF3438C8
FACC93E64CD47678A038B4ED26AFF8445C3E8B78A12E03D0B3EDB9F762FB280F7B005F6D92F7
F426AF8FC8A0FE8D0D7348EFE49706E8E53A24A3FCA5CC2140FEE1513FDFFADDAAA1E85ECE9F
970EF125BD003EEF1C6AC2F737986B88858D1DC607DA25CD46B9ECDC68A99575E89DD69BFA57
DA13A69CDF0D4CE606997B8CA3568F3379F0CE6A5C39AD85238337A39CFC252CBB522C564663
AC3BACECC73F003CEF32F39266773EEE578803AECA02544F5CF4F7DFCA999485C3E87CE72CD6
7B46DD377CB944F4F7A099A3E5F76B9F80CD47539ABCAC6404B66C3704AE5301F5A0FA3E75F5
AD86CC2F846694B09F77ABCBB787DB5F61FB6B8591442189B11284F260624FB4B9D82D506CFA
1B69DA122EA8CC2494B9E74DD962DE90C68A67AD1DB1FFB43268D20B6EE0CC710C25AEAED286
59B33FA045414767A7881D51A13AD3F9F3E99830F71DB8DC8611FDFA565A2A7F644072E620D1
078201B0422DFC576936ABE87488F102F02542FAB85B3289732BCEEB8838066131287ACFACA1
1B1D408D1C630B2F4A570AC7451BA40D3A501C997840F61E221BBB3820ED21182A22379DE1D3
45D5A425DF2B5B52E0ACDB7EE6EF15DA6A759A08A8DEBC24D0DCE1B975CC9B8AAEC03CF38E51
02FD4238E15B9653A76BCACA3D91697EA648BB6314DABD58E452DF8912CCC89E10ADD61131B1
7615EAD70788663B32251EE9E6D978BC27F1635675A6768EC7AC4BCE803479949C5D79727E53
BFF661E4F6C64BFE0D15E9FA33805BDF47D08B16FEDC1B2B2389E2789277C364200982554AC3
D53B3C247E2498B0EE8AFF44F7B69BAA6EAAE91B6A33E547D29418392EA143F3619E63FEA599
6FA8F73501855AA356E94F78DEAC02AA08B51020F270BBFD9981EB16441B16F8D90B666DE936
532FAEFAD27934D97E6A29AA6642C005A900D8B508B5F24C0149D920B34C69C567EF6F5A2C14
DE9A07FCA820AC2A4369D0DA314FBB09F295A2428925910A8E300645A972D1586E15F8BB09C9
3936A0AC18A903334115670AE661E58A26EA1CAA576AB63E09C739EA0DC737E3F46142349353
5BD59C0A1ACCB788FE861CCDF527237C12767ABAE05636F82AD765F98625614DB4FB550C844F
C142C6FA107464C2A8F0087F1CA7773B5A53A15DF8E3A1E1B64CD1901B04C23E9E63119FF495
0FE739F2E27871464230D19E9A85A237AFEC08AAFD64FA2F24772853C9F2B6DCF8315682E2A4
B38160384DF5EBE12FF4BFA52E1D1017762E0E8CCEE3C70D5C3C654697C778A7F6A05565788B
73BC792A2817A6CA45122A5762C5E5F6A02D1131A16BA4941D6E8F1C320D9295C804F2EBD964
8CA940A7EC562F259C9A489AE36EDB7EE621A3E69B7F5D34D3893E47D226910B25F8ADE6C6EC
C5936B5E67E12E08991C2234BD71E6FB7AB65D61AD6A6A18C8C95251E4641FFDC9DEA1396DF6
DF1638B8F833EAE66E14ECD9707B7D2D721832C12D32375CBBEE010703857E7CE0AEC92042E0
29DC32BD8EA930DD0362844295D219062AFA8659E5E96F915DBF69AC1EE33126CDDB0181A1EF
82BE859D2B1354DE7A8C1B9E80CECEA63C5332E0CFF6BD4C37E47B2ABA2ED28B6A3090E65F9C
361ADE6BE54AF3C723F07D20C79E16DE2F2AAD68C96B037C3B1511AD575CCB9FECFC10C34F37
E295A31F6AEBDF96C6014D85B11AC180F53322895E60FBF299363E621BA35205C9B81A9524AA
85E6C78EF1251F71F55A2EF11645BAD942157EB00535BE92130FFAA6E67E605B65C6C91D84B0
3F20D5D12218F9054C90CE876A0483E80802DDAEA96222FA2EF09EF5806DD67DF4508D28A0A6
AB5E2B08442DED576BA7079D20FC52EB6CA8D9109C663363C5A55CEF5A98FE4FBE64AFC23204
2A96CDA117598E202194C487E3217AA709BD46BA672F02BAC951352B141D4194F1402DA2E87E
043BB91F9EEA26FE15A11C3CAC1833A4BB3CAB03A2A31DB9B07D5DD1041EC2B9B7E51844794F
05049D6C9FB0DEF51782812B66637C8547B8A6580665106B8265DF917A4D1B49CF6BB3D7B976
1779371BF19FC1BF57EE74D08A1675B3D0E391F8ECE1628331A702B598BD691F0388B78AD1CF
0DA93AD409E33444572D021029FCEDF4A3E70F602012F0A3D76C1E83867BB0DC48C483A9E54F
409D1594AC287516DA63539082922B473B222EE4AD0C7634E297EABD7A02111D98617BA131FF
638322D1D5D476DA5C97AAB59B73C45867B0741F6036CE2F68D5970711EAD7AA84531CE71B91
B8BD2DBC4BD84218B3C775FD841BD93EFCAE818AD7B7CCA0FB6744FA938E4FCA5968A1595173
17AC147B030220FE95119094B5F25114A42E507B0796B16B7C57E34835F2B8360E36B9BF0438
1EA2820F324E992A9F0B0BDFE5F546941275E11688C81F8985BEADA611B2D0FC0D5ED6422504
B99B165375A443F4559B4A24ACF8779F5256BF9EFEAB09A08C686154789E04AF5DBC30E07463
DE3B2358B6DBF27EA928629C204053EAC7EC267115CF762B3696696A7866299002F4106C3E88
6841D11E9559E6FBE366B0890491853B2E027B7443FE213F0510656B5622711D6CE24EBE4ACE
7C0DC674D6732D26ACB9967D9376761D02E2C76C55A3C42F9F5D047CEED2598447B970ABA646
0FCA629CBC7B2BBDEFCE1BC3CB7E6506D94EAD00A9320985692453F9A4CAC24301B532916D89
850AA961917E41FA56C5A6B1023DB0670F38E5708F07CAA2080A08A23E5B8FF1BECC48725047
484457696DEE0E3E4CC94DBA588A814FF351D5E32E49492AA780BE15E4CD3380521B51586219
20BBB8BB33C25B47389C9C3BD47E2E74AE91C57E831F63795D61EB19C3070772AAE9AC70516F
09D8C80E0F48DC8D82C590F6D1B225BAA2831603388553F810BE7B52F20CA8A06DD52862AF04
5A34DFD3937DA9538E1AE134ED0BBBE1BF0015B20ECCB6657B04023A74A583927E62F6CC27DF
C96CD7C713E46768B43F683DC2C892E525EB8D97A0E2B6CDED8C591F2DB59C48CF89B1C98ED3
C9B722EAD07CAB808FB53374929CC5B09233DFC590E7094B935B7694106D63593F2658FE6887
0855C7CDF1E4D78019F1BB6D99C33D1B47372E6B403A3058774EE26E7B6206BBE0F063276F01
BE9B50DC26C5D553164887CEAF247C1AF22646706B236C0B36AF9F919BA4015611F5CA8C7B0C
0C4F7677EE80E9BB71DF47737FB563958D83C43D49CD0BF7EDD722848DA79B80C1079653A17E
E36597EFB64FF7638DA165394CCEB5326F739DA8DE994C6D14529D643F2FFBCACB89EFF37EC1
85AFD0A93728598874D498A855CBBB27D788B109863568F7B8BF15E3C2CD0A4D6D36F66CEE40
9070E5A7C81FBA3C3E848D3127009FC70D7AA50FABAC91EEF13507DDF2CB171A530E60D32ED1
2CA7B6BE9AF714CE69242905E1F2C6A2C86AC3303CD8997BEBB3216796B8A9EADBADC4DDD7AF
5BD8DDAC9BFD102B0EF4F2DB8AB41CAF77FC707A414AB452F971E5F99E1E66D2A6DC5E980807
4B3AE0010AC01E2EDC8FDEAFA33EFA90021B28ABCC0D41545AFFE2DB8CB77E13CF12F8E079B7
81CF9045AF8EA346AF90F64D7231556188A92E8FA7B1C52935B72F1724781BA995AE920F9756
11BA58CEC4F59E215ED2929F27E7949814C907A92CA1A1F6C551C015FE1447827F53F3882686
FB736625F037FC380F63C4C3B88D2E6DDFAC5BF74919BCCD63E9AADB5513067A99FB44EC1A9E
568A49B83D9E11A0164972C02873D1195151068FCFECE7C421098563402905B1C1249E679874
B282CA00AD0D629622B339A3E25BBD2A6403E6BD5649444C04CE7178DDD9E5597CF6ABDE96C1
51CE40E61D8C1E2B31148921235C8D115315C605C7F4E471AFE321EAA29C20BEEA2AAFB41E81
041F2275D4579E17BAF9F576733E7411D7155DF84532A852782B5A96B135345D06BCEEAB57B8
EE8CCC511DDA95B18830CCE7420086CC3F5CC70462661FEACE35FE95167E34A600B41A6D8FEA
62E615CB1B8DDED90DFA075B5F4EF154809FF42246A592F1A457A5F71CE903C85C180B41166D
D398C33DB12412C1D95C7B4A6E4978D628E1C278B4A501254A2439F9AFF3610C80F83CCDF22E
F5A3661C09EAA9E843240C9926C482F7021412E6EBCDE392C33E33D458804BBB6AD4C9824D24
A345955A91CC9757ED6871A3A9483A608A370A8F4F6BE27E8CD3AF807BC7D296996CF568FCBB
B660437D967479637EE8B3042F5B0AED5CB1E0781C4D572FF72A87307149FB2D53F282BC8538
6FE22E584F6568B1B7ED886140774AA1E4B3E31B6A58B5E49C1EC3E1A32890B1B8EFA5F25E89
86480FFE15E5651A999B2811447F446EEBF3A39D5A8C1F2B51ACD36AC929032C49237AF2C06C
6ACAB5A6103B2DD2C947DBD11098BA9E7FB27306DD67737DC92AC6C75E0F0AB272F6E6889949
CB011E861124C7D09775E6AF78CADF535AD12496F11703DA2D7501A75BCBA7D44558F2048E34
D8BCFD085E32710097BA75B45AAA9EADEA0ABD704389A13F643B8B3664BA9BABF77660F6C388
AB5B963E9A8C984A77EE2DC6BBD11D7C8492C0454CC758418E639D80D7B63B67B8D29CE8F071
7A3D639EAF8D9934A4F78C10F35BA79162CFC8C13A4D0376184252270B75F415A0A0FDCE37D4
2A8989C20AB88D082EB247A3A5CA7EB03E23D42791013566B86C769AFE05FA4D09D955027DF5
E4AA0AADC75C6EFA68F40366E344D262080B8D0FB3DE78ED2E6F3C881165C8C68F4698E35751
77B07BEC0234EEC94EEADDEDB90C7C8C9892CA90786D04B7FFD610875E5C3680BB46EF46D0E8
CF7BFEE67B656490C83AA4F6DA28375F3C2B8C74C51D5EDAC5B3B74CBF130949E29EFB5FAD29
8F4D0C1728261B12DB5D71DED5442642B21A75C78A4F8F6C240D6337769F838EC325BE810A4F
04D11D665F96C244FB24746B093C3F4091B7516F8DF1AB9F3CA2C6AC96FA6764A31F21BEC14C
2D2821823CFAD018B4C59C40292D21C8F0DF185350E2B99826B322FE13EDCFE3D8D0F21664CD
9B43CAC45EDFCC26D2EC0680CEB0D27F43C6644F215879F1DA5733265B9AC66D0E61033E7005
0B721EFB9D073A95980753016E4BEF8A8AFB127B1EB2BA7F348E98A75DF1E9CF0AEBC12DEFCB
D7E8E298752DEE70BEA92A6F4C77E5A66FE20F5C8687B536E4A2DB15CDD829609C0AF1F81D35
4972C7EFDAAFF2DA6F3F7790284BE57B8516C1E43DBB6B44669A419E2C836587CA21E5EA761C
F4AADB91508C942500A0C79E63BE648FE9656321CDF96ADD0037EB48DD379713FE79E68BEB57
B2985E0CDCF2DD3C9993A20E7F6B295F4B1D66880BA98FEDDBA6B77EE28268A5BE9BA64B5A57
16D689A2D84A3833B5C3721D1908EF71664ADFF0D2C101D371371E7EFD113800AB8C3FF87CA4
62CC88289A78EA4329DEDBD433EAA9053B9853ABC435F1976DDF047F6884E9D7CE0EAF429DB8
DEFB7F3207216351160D9B4D69B70C81E07B473A59FC42692E3C0AEC3547CC33105AFE27341F
A0028344004BCBC6ED220E3986A8A8961740B74AF3B5F2FFA20E1FA842FFAC1019978422845A
831AF4D1D33F42F5FDA39B9DC57F44FC4D2218B10C000AAE45E307F0353A611042EB863272B9
CF41CACD4F4740C524088248F93293B39AD3C9D9C85A22E1E5839E66A2403724DD30C96AED0B
74736438FFEECF912C9320F8D6FED48EA805375AF30F94C1192BBF58B5647C740F1AC838466B
89EA801F85B34D5F0DAE85B57D9C15D1A9A11E3666DF6F96B3D5410C7FD653AECD1BC002952D
8CC4042BF851462257C5652C730087097DF1A8B21E4CA87D2DF5016B7F302762E791A09B9D45
D8A34FB40A241B4D3D0FD356AFA26781235A65DBF76190C709684A1C5AB45A7BE7A835CC9F95
8BA9C35C802C346B0966BC056C18107A8B1B579DE99D85A2A46213C1C8C668F4FB0EA41CDD8D
41AE4B7812C3C9CE16A72D963A678CF6197CDDB8737D2861BBA747F5FE2CF183147B5664CF81
5BA1424B794074C6FAFA4CDB6E1A922573FFD3674F5D94DE81BEA89F0ADD8A63C49BD4FBB132
B00AF3C3EEFB34C273EF865335388CFEC53864141CD869B9B88F0CF4C469EF0FB9DD591E6D19
A1003CBE5E6B5F7A3C6DC1D5E93F4DF2EEE64E222BD4094B633195363DF1F31785D3620E5D56
B0C37444CD9EF07F27FC17551C0232C8F0ECB723294A308B9BC8E087B3175A45F0118413D16F
3BBBE292EB31B46B75C47C13F661A991B4247E52ADFCC2FD0FE67327C0E9BB4869A7EF45A148
EBA87FD67CE263D87B3BC67547E46D6E402FA6AB225F8622096C924AE5CE1C911CAA9C7C7DE1
B9E1089846050A0D77903B68DAF2A986E0A5EDBDC9C5F74DF7AA9E46397F5288B9FEF58A1888
D49E4648712CC9C3DBD2CFFCEC13AF609EC37868D5495FECD98ED60E1533C1D81E5F4C6AEAEC
319819A418B409640B2DC6D6A3D576BE8550C9D612373DB26888571C523347FC8429CF057880
73CC56D470801B90C0B0129FD76877C2AD87B50F98343FCB06C2734DAC8EB8564E7292101F02
156AD3D794F56E8E263BFA59289C7A1B73D3256BBBDA344410CACBC92496330725AF58E1FF0B
AB1043C2BC699CF12F4EC6018CA5B64E04EA44B53FCBC648428B91478FB19B262FBC012B04F7
9B57074149001FD27F6D6007D673403E1DC59C64258FDE5D0C1643240174BF358487B55DBEEF
48AB9B0F4D59956DA98FBD5872338B9EAF94FC0E7D72060437AF2A7311F37F2176FBEA9C087E
6AEEB2D1787F467C0440214AB9AA534B1DD1F2E1A6F0B8C0FD5739B0EF4422E359FA0C55F6EE
8025F24AFDBAAEF3CDD3BA90D9A558BC7B33F44EB2CEE284309B84DBA7B2352E0451097986B3
C01319F6E6160CC24A8308111583D473AFE5082CB81A6CC4BEE3155DB2BE1B08590726E80CB7
347ADB9218ECEA7E428F57F4475A6881BEF1E5C14143B832E83444B44C7401BF4E0CE3FA946F
B7642B8C9DEE8196369C3A440E47D79058CC25A193C709090BC4E8DC417F8E1A1554B19BA12D
8DF5CDE03ACAD996656029E0A2B274233DEB558486CAE05FB023B3575334CD976F685FCC4831
480D31CDB7C8E48DC6830DEB44F0F1D38E7D3D8CB9B37CE562CB12C6D5E2011A7DD561AC116F
E2F5ECE27750E6C0039EBBAA7B4D6D62A9DDD832747657D654985D1DCF204C3D6F85AB664EC2
66A73E226D7B90B2F4AFAB06A03258249DF0EBA1D30957DCE345EA86C16E7828B0ADE91D342D
48E01A0936D659B27601AE5E61057F0E3994EF588B4D9B106ED06A5F6CBC41BEC67651711547
360426B46E303C319EBEC46D67793066C1E4BCC8B26F8E088136C73CFA992663A7BD57CC34D6
E461DAFB019C6EB53159BF0D295FCD99F2A2A256FE622190178919B516033CD8CF008D35E1F3
EA7A7658F0B3A72C9258A4795B5D39091CDF3A8710D762CD18A7BCF84A5951A2C238275E8B10
6DC9960640F7B5E1B2453F2EDBEDC029B6471250D1094D98F6EC33EE70CAB5CC3FC6A2407D9F
6BEA7CE48F912AE6317309DE6F53B050E04F08DE71B29AFEBAB7988CEF1D1E2BB3F6D9877E2B
B60475E13BE923B810F6F7CD8876E3977B42A74AC90E13DE4EBC5A2758021B69571575F67A2F
08F694B401B8BBBAFF8C0C1D57BB245254977C92AC379A95B5984959E959A36BD328D34B3EDE
92DB195B33EA77AE97E52027C8412CEEF50045E1507C68835A42D61C0570F4482C84F013A648
33E4D30009CE04EBFEB39CFD8623282C5175D413463B97C496825BB49EBA6C9854C63C16300D
60A83AB78C6A40591795CBBA80E8BFBBCB569B3CB4FDD127A674AE0AAB5F741C4EF41AC00F3B
AF8E71938C0D6BC8B318507F53D4E0B3B3C0891E8081F6D0D74C591A4862A18605EAC0A41D44
16D6D1AE22E668BF859816B4BB96D98B295A6C330BD449AF2BD6F7C5AF73D6690231407B0D82
66512978207FD54E36C9EFAEBB4F887A68F33ECDB9A6412B6ACAABD315EA030D5D2A4F9AF49B
E975D1B27537986AE21764EF883FFC71BFB1AA76C29CCD66E7278EBF75E58C1F76604A9F4DCE
616B35A00216D07705A079E7BA1ED6B0C57973EC27A23D15888EEDD4E08E8CB020E34CE8DA45
25000530D7F670BE71F4574AB8629AC0D0AC5775B22959AFC05130AA0CF42B321378E51B2000
548DAED73419B3F7869ACDA7A1815E12A92C1D249D1C72B79D64E79329C52E71A9434D7C209E
277BDB6980A89F694BE02496CE4D6C6B2EE80858AFA04E21B4061D6886683B61B050E51842B5
C7B37A1877A611F3662DBC136BB6873EBE4387A83701B3B1DF1897F470ED4FBA0843331EF52C
D31A5E26C49F51A88441DC1CA372B220A3B7B565FD7C3BA9B104B66B9142E18735834C551C08
671BA66ECA48E7AE94ACEB42D096E017AAE8D161C2B6263C5C3E997F148AE368FD109C355106
846DC069208BA09EF22003567301B9F2516B023E02772739B510E545030AACE2469EF328F2A8
D010C0D6FE83F79513E101713813A743797982AAFF2FED4A697048508B33BB297B9F89087FF7
0FA8D67683C36F46822D27E0777BDF2FFBEF4328AF34AFBFC91D0DA5C8C7FEED4E751A0C6A94
C0317E0AFBCABF99ACA1BA4C171BB9F85D1EEA2AB5864C65AE7BBCD4E4E1A68F6FAC09CE88B4
C1CB9D3B696EB1B1B59B25FD542038AC23C1CEDD7827B83050A9BCED00DBA1BC5FDAECF97752
28928A618102C0C31A185264FF0A359B379E688838A2C426888AD8B47CE5560F6646E75672F3
7F6D427DE4CC6728C5068006F3F3951D3B7C6C2FED8828CA26C85BC526502ED3395C88559D13
4AB3E1791C682D10566E53CFA9B5DBFFA1349CD85655D9962DB68FEFD4BD669E1DD18AC9B6D8
2A8499A04CD8C267397AE4CC7333DD901202D794E13908D6211697C55EE756B0FD95A0E1F5B7
3A8B818A2D453C0C8FC98956FF77B18129553116D57E375D2EEDB52FEB98C53D1923FA8EBC35
4EF1BB0DB47A5AA402E206283723669E310645F4C8472520EBB4CEA883C64C9A2273F2A3C3A7
232AA9A19E50209F8C47EA9CE56EFB0DFD4CEB08952E029ED32E1C32D0CB5253E103D01B1C17
0F396E5E9B165D049303D4E6C2BCFEFCC92879B891660AD068015D82FB714798E9FF7982AD9A
3C99454F1DEE48E0CB6F45934C695EEF3A85F20E70F309388C6CA8128850EC68A10EBA077399
D03C7A3B80ED0C683C598D1D5C605CE62E19F2C8F33B07239469FFC3FE764048E477C5A3697D
504D9FCA2D89A24D6BE4467460202EBED6A0462C7BA62AB2476DAA10088A58B11D8E07164543
B39879390941804ABE6A9B7833C80D7E950D15D40FE6371237F978FD5CB0223BEBE74606DB90
CC7B52FB02137BBC5BCAA6242792425722E38BF55D6271E5D5E40D230D5FF157D197F1271885
C390350A5E9159A825A9822674D4FA8EDD33ADD5F5DF12FD34788D2B4FE1D371208AF1F85C94
3828F9846CEF0715A400D8FD9FAC11DA19CB13AE69D361216057A4AC436CC5BE7375CAAB1C89
0DD7212E5F906CC35C14C2F6396BE9CDA5806813E8622AEAE1DE3A2A5FAC04A8A9F7FF7563BE
E5195450561AE347842060E717B75DAF024DE5FA5216E1BA654BC5C0ECF83F67C9A95A6C7B4C
92EC6120094E18523CE8ABE2F91DC68739633878B5D38C241DC929F6DEF44EAB11740D9851F0
25EE0395A290A2CABD1290686D639850D72A4FF4B3A9E3E05F0693727581B5017056B8A45E73
6FBA3A13E8954FDDB5CECB67B69C214B0E4C09631B55F2BF242FDF341D2B9C4EA41F12D55DE2
6E1DB93A2731D6CF3ABA575E64CFC7F114816E57236A6CBB77B111952DE02495575A2AF7CA45
074BF8F932DB7AF85549A1E9C1DCF69A13463A4F58F6C830AEF9EF320B9F9D220E712E4853B7
573074D755857C39AFB6290F560C0A6AAE4AEB3E01725BB96B7C4BA4BC06D17BAB3BD054173E
36B3AF2FA5429408AE01CFCA512B828BA38EEE2E7293ED1BEC465BA21073F144952B587961A3
513D6CC18F222D797F6FCCFF860FC6DED9AE23598005EBC446E8728C8E2B7CB9E187C01C113D
F86991D15B5E1141A62F6289053325686F2D845446FF5C96FC0DDE950EAE954D1262E671C627
EC1186D6B866BF8363A0907150326B0FFAFEC5CFABC78E98F97AA20E2002E27B5087EA6CB67D
B547C99A7A65914F1A886589EB5421AF9FB95BC7C8B1F762FDCF7B4D78ABED3A84633AC436B8
4E31EAA1B694AE1DE78B53E80307A4AAB6D43E999736561993AE4C2B008ED9B39064FAA77124
437729FDD57327D3C620DF948090ABA7321DC476D0DCA1E002746A4DCEBA853ABBC7A23CACBC
01F6025170537C64BBFD35A4AB1A14B2CC02960B2A798333900E8A5C754491E8806E7F6E3BCA
E0B85D9AA4F76E783FDA9A39C99E30689837F1E9EC40F004A4E6108620F27DC1E9AB3840CE30
CF40E7261D4BD4CC4081E3A3CD8C8C61E804DD629105C62ABFB1E7300F789DF895BDB447D8BB
B528E35B9E5C6147BA0860C33A72E5EC176F6F0152287654F4473C7BF20BA17062662738F3EA
9DAFAAEC0F6E8E5284D88C20D20F496C164EF565EA707266B5ABFB1C56FB451D23368EDA908B
3FEB575AA72336263C3C72196C9EC09F1C6F15D066CDACC711FD098A6BBCFCDD5424750CB0D3
E9F1314671F2EBA35D303D7F62877F2D124499E6F2D4A053D91DB3C093B52359AF8181E272D9
67DFC8D6C639F142BC714ADCB4B3F20DEAD7B65C70D864AC51179649835F18979BE2DE4B5658
E82B91EEEEDD7CDC8BBA8BCC58F8FCD29C935038F651E3BD02A074D2FAE420C346EAAA960D1D
FB45F273E88012E67AC0CF5FADB5DD9259FA06B1377D3C9C3193A9AAD863FA26AEC00821BC03
471124C24973FBF3A41FA391537B92D13A89BFFFBEE8755E715FEE87ABF20E83F6E3EA423812
C561885ABB55B004BE54B387D2DE1DCC1E8032253ADA40F5BC531DB231F7912FACBE21624E60
26902C4C200CE7021B0220D8196702FE8C72509F7EF5EB0727F9CB510E77A8869F669B2846D9
5B94FFF321C78AC22E0B5E5D694742D6A46487DD515E812BFC642F5BA7B41C14EEDCC699052E
55D1646540582B249280C44735D8E26F3A303364046DED295084638B2D92020AD4FFB7ED7703
2E20B79EAB6C0A1244A8DB5488F6933291DF839F07F63D81F1DEA989F286E36033AB150B3DC2
B8AC47A1D113CDFE9C125A83D560239C9C39983185092682E90F86B5A4E5C3FC1244E9EA2DD4
DFFA75F2308786D6EAE658393C0358D53E56F7AD52A57BBE2BEC92EBE20637C08FDE69DDFA06
318A0618177873DA9E3D45167EB920BA13CFEEFBE37C9987CE1F3D26C7B6C9F142B442FAC0BA
C5A8C670D7F2F03907840A6C9DFE587A0E33AF66607172FDF2119D293C99BC2EDF154A26D5B5
B628EB64FB25E1D6B414A3AA6AC6E6920D6F1E1BB5FFFF7FE16C1B35D216DBDF6C5ABBF1C40F
51023164E804869DB2A171E6C8955AFDA58AD63D05CC77978D916913FC0780F5582F8E2C3803
E56B1AA5EBE528E6C2EA42375B7A0A61A5B7B4877FB87938A1516E812D644F1E604A4AEF0626
F3432B000C534D914D9AAE20910B9950E5174EBC81614ADBF37C437363865EE260D31F59ED07
501DE38F77A5DA3942E2C48693B61FB031B8AC1A9AF2ADFD3B374E39D140127F71D4B45BA522
54A45D6287C60FDCD37B41472DE4CF1D2A5930884AAF061ED50BAACB40410CD3C8A43E7C4DDD
1C17C2A5A46F5F261D3DD01516E09DAEB48A9BDB5CC53B5DEBD022C9652FDA3472767503475C
12F1F62CD46852E995B87344199FE03E907A7A1F272D0050A12EFD404E92818AA58EE81AB369
14B8B9C166718812737EC0BF390E0680038458FBF80B6B3D57929D2FA3CAB775400A6B71ED96
5BE3D77B3CB23DA229BA60E41041555975C9FA14AAEB7B266C1E4ABC167FED931B245D6FF98B
47D06B0F90A970D7ACD9D42111E1A25FA5B6954661EE9E9A35F77ED189EBAFFD00E8DB0DC16B
1ED20CD63E5A5A5D9D1FC78F1382FA0606E07E7740BDA5BCA7D91CB671C4B47568B576DA2DA4
19E9932A7771A926643E1DE6D189989CB2EF723B1E14324909149EA9BC9CF4C786AA95CF14DE
DB84CA2505E16B5BE7CCEB163D465183D2B7E4DEF3174A0915768FA0255B42942FB3970CFEEA
9AD94EE0DF250DC1C36AB60675F7C80363730256E4976A25F621EDF16B950554181696DF545E
359C03F1D245B5E0ED1FE3142720386004D0263080EDDC7DB7C1475BCABBCD6500C9D12BDE3B
47F0A930CBE496182FD773EE25EEAD4EFCC59FC1BDF4FA9EB644A6ADCCDAC57255663A96B8D7
DCF7B63ECF46DBC0EAC7BC1C4836B6CBEE5A2CB6A2DB0390623A734E691BD16C6CC541AFB3DE
033665457F071C83B0E477852020AFC776A9B4DF270A1FCF110A46A02E47AF17FE2B9E873098
603946FF887CA2FFA9820188EB5BB5ED2BF839DCF22D738C49867495A67B3074D54B81170F82
2C04AA83B4F859D5552BA3BCE906C146465F7CF1DEDDDBC549ADCD1DFE45E8F4C252C99C0832
E1998F34B7B554A914DDCD633A28CEE422153713D35E8A76A89B6E329EFC1506F2E4E0C47760
3D2E4625F327702A7BA6767DCA991862E85ED035551338C678A98EBA760E23893DFDB47DD0BC
5DE123DD1853646710AEFFA6C18651A36020301DB5B3C2F864FE9E1D2EAF8F5B5504572F7F7D
C0D4166A918B1BC19DE01A9BFBCC758A0675BB4071F7184A80D8B9E26D9B25AEEE28FDB7295A
FD6066A7567F1CB090805C4BC87BEF63B645D8030CCDA627554A255CE8F23BA96DABA91F871E
3373BDA2C8F94C5B9886789730E823C44E91A3CAA11FBC4B3BE5B4622D871CD99E5B59EB47A9
3251F517DEEA4F4737986E49A789DADACCF91366071F1884536E849501E855440FDF466DA0C3
3282C8E3976BF5D1291DD2EF252F5DB3FDA60622D6A3330885D27E47FEE400FCF2789B21C0F3
21535C492022973D26E8CBA841FC3BA292391FF33BF144C6D77CB664A7E3595868B207F36360
CB710942A29549A0429D370B8F1B62957353E58FC8A01A62F5A8A85FF52D4CE5E31FC6BEEDE6
D4A8C0FBAF8A889C91E6B7E6AAFA4B366978CCE118A7BAD3F41157DB3FE0BC31F5AC42248868
035D37DEE5A488FDE0A84A416D9987466F6A679181AA12635B26D73BFD36B12DD1F9689181F3
DC944A29DE48FB8EB5FAC5CDF502FAB6E7619B856B4FA9B029BF9640CC2E09E71960D09DBB4A
0AFF5FE45215E80FDFE9B42C175AD3FDB80D8E0A9A9C550DB4717C07569B2B0513C6C0DD3918
AC8C6B34BA7DFE1EDC43F2CEF7B65593A7DEB7482A2BC7A12A42675886587A59C4BB674F5E1F
4374959E685C5CDF7E2570FE222BB169E4E2D0E4D1E6956C7D14468D3B85D084F2E9A93667C8
5D0404139ED7E5C5DC1CB416539647DD24BCBE2A1D8C6A11533AFB2F6FA0669E02D02BB4FFDD
4C78C51C71A79A55F52F96251B5B28C5C01D08DCC05189F3A8E22AC7A59682FDF3899D66B380
9E50878BEEDDE395F6F9CEBEA0FFEBCB5EBAE9C3FA2DDCA28BF522CC2774E90834E2DD982BC6
E8C09C702CED12570FCE960384FB7F3023802655B31B6FD738ED2D967B0069C866B274C6B1EC
A4F6A0EB6241579E548B9CD7D3D24B5695A1EB6EABAD124E8940CC88EF5CAC863DC72FA9924B
9DBC5BAFCADFCDD842D9A66B25E32AAEBE1A7D98D42A4BE11134CFC48046D6B2B36A4EA60B52
31C48577CA2542354AE2663B419153E59CF293A2D5CCEBFD0BED728DAFD263AFA35C8A728826
235D449E82C7EE04ADE348EB12EC108F6345849D97F3DE45FB97B065A60D4140655E1DF8C1F3
E9CA34CA0DEABE98F980FE14DF24E690AD881E1F0F908EB452238B2225E9641500D54EF9B967
B12912E336A384D41F57C8AFFDE37B37B2A8DDC14FCD8A0A5C1281E88810D6A556270710C9FE
6C4B84D53BDD96DC713B5FA3D29745BDFDC6FF396E76C4264614D8EA6E6702A7C4DA7A24A59E
8B23BDFC5F2038D350EFD74010085D948BF7624F30B20EF97FA59CDE7F9ED388942E280C4F29
9F67164C860388D0674E23F9940004300B351A440C9A6F0EDCC71B1E74F71F561A5A5975332E
87EB5B5411C5021D1530E8FADB8C9B2AE7C64DBC07A75D424E8E9AEE27E595B8240DFA15D061
373F90D5EC95C34B0752CCAC9A5434B000E2ADA2D59A412DBA6BCC8B75B307B905B3233631AC
2E07C283A7734A530C925AFAA2FFD561228559E0E7EC2DDFDC36BC7902A7D29653D83A415C7F
AF433B45EC16AAD753BBD91641F2CAF94234AE54D89696DFA5A40465893BA9BA1E49BD184ABE
1BA26289AB8991C8A79442EB6D78E4A2D934B2E24FD3672593F92250A7DD06D8A65D3DA58848
B685393E42F2E95DD8D7624EDDFADB5453A8EC0709607A7FB5F5CD6077423D4C1CF863BD76B2
DC104EA598945114C420799C5AE67AF9DEFD985331421A5FA602C0389C5B7A2BC2E9B6D4CDF7
D5C0C525842A562504459263981058B45C7C72B01F366362EFE0BE5C43DF58F672336012D95C
FD705B88AA5C39682F7F6138EB67DBADAE5ECCBF29D13042C91750316565F87C724842957E6D
A0114EF5BD6D88F3D15284B51A3B1D562934CF8EF49E4CAD2B5E59D7B5548B803D2420328625
7EB9BD4E6683E84E6B94AF7FE0CCF643C11DFFDE2328CF63757F15DD6ED41B77B0139D4A7E84
56171632F9A301431B5DFB6AD060D4E5990EE8C9E2673A522CBEBDB0C525D434C9345F984068
4E52D9272AAA0B6C84E83E0BC1C98E2ECBF1308734F160BB25D6C9913B76558823255BE3F7C9
9A1B330E1A6662C6F63A9557C575ED85708308A7CF5A6B47796636124D97A65A2CAE6F873782
FEC9459BEA3F8BB2AF396A47112EB71A0062E678D1C67148B037D8F07CE0BC42019433A54393
261AFD7EE09A72AC0A5B2E2AAF49CB6B2A9DDB5C95748B3C184BFF72C402EEB9EF87363EAD24
C39A5FAF884C57EBF0E849CDDCA95CF40671EE4BCFD515E500162F25BF658244A45F56A5942C
B88A7113D025A6236A78B2C1848E6107F667DCAC143FD1A8F41E19EC0E3B4198FA544C71456F
68F9EB0B5AAB536A07A1764C2F756A0FE2F2AC158CCE4B674F222AAA2F872ABA5E4994C2C429
43B4F551CDDE108066D8324DBF2EBDB72AEE402B60A2C51C86557D471CBD60C4A82CB568239C
ED71242BB1505CB049458072C71D33C3F871377114EF6BC7DF0CD6A9A8A340D0D19059B06878
B53BED52E17583487EEA23302CFED73DFD6785DB005824E2349D0D435EEB7B7D2B9458C5FFB3
9EB382B889C5ADADD94331DEFCEF42044128AB52DD5F02790512EBA2C0933AE3571987C16C20
815DBA68C9B96EBF619523F29362E7927FE174952577999C3E9532D76D8D2E02D2E908F41EEC
8685459F9DDECB2F6D4C215743F4B76AB79ECC4B585ED6C5F5384929E44789698899AE95AC26
5E57A27BF324EE3F701BD86E4688D8C86E171F357DA2AAF8409ADB7C8D14EB582708B4AD73DE
B8D186B3CFA4AACAE9CB05CCC4BCB3E2ABAD6B5921EE664648D5A01BB593A1F53D171B358C42
C3D6CBAE0F38244C5D3BE90C37150F3A5CA18E3E8E01C25FCE7570532C3A9E502ED9BFBE2D63
4954D7CAD309E6A6DF01DB68C011B3E2BC5E904C575AE07560ED5D31936C202BB2D2753C74D5
06EA3BD0EE9990EC00E07A20A24CFFA59301A952380478FBFD18CB7F3D8F158DA9A650DB9778
BC7799798584DEA07EE146054CB31E72BF8C1498DFDDB7C7D658BD2B343FECC7975E1A8D807B
579B8D80A32B26BD88E8F5ADA4AD287C05BCCF949BD52F492585A28588D643AC51CADBBECF53
47599C695732CB35186E95C3D35C4EA03DDE72B1B3D0DA03AE1F8AA3E3473826EE62E4ED5CE2
0EF813CF22A22766B24BCDC41786278EBC444B8A9DE9837D3956C092862E3F999A25AC299C03
3FA521AA3DC9EF7C248E7FA9AA05603CFFD75C93FEBF0E77BF9332A45AF3543B4CF6ED73F7FB
4BE96ACADF8368CC1B64EC5E279AD5FCDC0C48C60D07A3D41906829644DF01F4C1E46A048573
7C92A389662321D08850ACB7D613069999AEDA26309F85583A08B46F2B47E0EAA833E8CAB866
81B143A5812F1F49C351FBE7CDA8830944E7492122814CE10C6CA8788E1C35AA4A5CC7D29815
2EF21AA1B1730E6AD76C3387F6B2135D9A99766D741153A2FC1C5AF8E084EB0F1958747890D0
331ECE4C596980E38E2D49704FFE21F4094A1930B7A2A561E0B8440B3E68DFDFC3703D24CA8E
93BF7DEC011AA9FA7984FCF93825D56B0966130F0257ACB5AF5D4BFA2259D572A2BBC652DEF6
2BC86634A4B43D647F322725DC5C384921856BDDB51BA25D56AD03A1CD1F4262347316495CBC
1576AEB1016008D5BB04D1E9C928B6D7A1E0810B6E297FC768A66A9300DC1F91B2E2C9384E73
3801FCAFFAF596052B460117483229F2A65FD6528B03FA6D6BE31B9EF58F30AB3FBFA38A7189
A494392EC6A18645794C75C68DF0B12BB545B51C19384E2FF15DF55DA14A138AF9190EDE8A21
41BA609F8B150150B0A3A12D8B41FD94465B5D629491E23AA71D59FE1C0C357E627427670E3F
62F261954C0858C8FCE5552A171B5F644E6CF1EE006DFE90561C5CC2489D7C1085B6E122B1D8
ADAC3242B3A80CE81A65FC55427E567DA908783ACEF8706B8B4556E1BE57C854D186C9AA934C
E6F860F97019043668593CB28E1213BC1B41419B367847E3C994370DB9EF2143D0562B89D322
369725A47F833E363AA9419095F2C70B371B044B33B0D97BC330E7076C0CB5557835C4FB7B28
A1DDA019AB3DC2BF1D7E6C942BC3D874BEB1598074FA8ED5024AEAE632A36E3CD0F19E1392A2
F7B06555EB103F0F6E3CBDEF8499917E297D13F4A8AE1A87D57847BAA22B0D69648D36ECCD83
BDAAD3C5E6C55F872D26ACA524BFE074E442F5A7892E6640B8D3CE3D139B448CE0607EE958AB
A9D91635A7DD3EB9901042DE9B7295DDD3400A157DE3D937E7C7C05C826CC9F9EDF9049A38B9
C94D25408AFE09E727DB8C16CA73B13AF88735645C48DAC844121CD93BF17E757454C9FC4E29
AA900F3395DC78216BC610C380DE0DE1836D72F884E4DDAC418FB19AF31FCE726866CAB6A633
832CC4981E4BD29667D3F75657D8A0FE6C79456B59100E4EB9B77F98212BAF9E27201B33F34F
1EFDF530733F2B6B054CF4AEEF339DF78EFC3D986A9FE952045D5BB3534C22E5C06BC52712CD
5DE9D8D642936D8198CA3E8F927DC22646F3C10375904C1538DC440E54F2A68AED448271A846
D6A9735523D0AF7E821C1B8D3310A76E3FC48DB544370E78CD96B80776ACCDDCE60B905E5EE0
19ADF08063CC14A67F4974D7E5198A80797854D25A82DF78F0793DB6A82A55AD6D45B6D0ACB7
3236DE51647988565339AD9C51D9EA7F41559B6ED3CEFCC2D7B48371ED90338397B1F9815BBF
D9ABD7EABA116FD4495D2C411DEB677D972AF20716459EBA447066EFE8F4AC8C34CF8A4033C1
B451D1352A29D6B4103EBB227EA78E4460894BCBA9AEC4CEC79442F8DF9BA3E0661FF40294B0
E95878A951851BC1922E915C6A4A5AE97ACA5A18BB0DDA696BA18E2A2F78216E7B27DB8EE426
30059A505886B7F65283103B911C668014C46B439028D4899C6EBF3131E01612E79609D9341E
BA38DDE5B6741A551FBFFE2E8AFD01559E2D0EA5E50DC28A30641C4D7300E9B71C1539937156
3DC14E4B4D52B0343DFFF43A85009587162BD9BB9B257E4D66C2C98ADB6A8C5B7C06EAFC7DF9
B9E47F01D4D6E29182B7E8818D1A3FD3B343BC6D17CDA2D1BEA3B15CB6FEE1AAD72EB480017C
16DD03AD759B1D62907851DF0B6559BA1CB171BB83BA5B4E1C26855BA603955382CFB1E16134
1DF466C4584100AF9CB4F7306257CD110DD9377F09CE7B6DBD28D6E9B8FC5EF12E588FB016DD
04AEAC59C7CE6B2044DA852F1DCBC9F69511AA3E6BD7FF640F649401F8658FEF628C5E935AB5
DA5B8E83487D1C3AF24A364DACF3294B2E2862362C25810F629EBF1CD3A81C8ED87732A8BB44
18BAAB58F6224FBCC2CB2A97A5030A7A94EF5B69D1A133629FF5CFDE69F8BCE0338D58C64154
9E79AFD153B62D742B7105287941C0781B7B130F0DAB73F76BD4FDE6609B42E0DDA18E844F34
2171F6116C81FDC877F428805F8E6D448784D472BD69B0F530B547343BD5F91BE10099E139E1
8829E58322E3B1EE2D0F350FB7668957129F2DB877D3A70723ACF5CB8AA871D7812B9CC6B949
980E67CB83F5AF2A158E6354CBC342B0993B34D67A0521D7EA790DFD497417DD91EB42453FA5
E66242877F55D4E70AC1FF8F4CCBA40842CC5B27A72D05A7F6A97DE863BABB1E421E8B5D7EC1
5B95504B4D5868D2D23C99F910170F5CC19B59B1008582FFD4589418CAFBC0BF00EE58B62218
FD94A628DC3A5D023D4019734F9655A2D09CCD00B69AF554BF60A81EEA9005EDFF723F8FE1FD
53340FD006CC08A0CDD6D8E24196DF2186690ED0CE24843C484E51D7D652B00A0DF424D8FBC2
66BBF5EE836731361FE77EE1F4C8AB65903240F8F457E0D90835B511287DE82338D9FF400220
A3E0F9A60C571FBB4598E8AF35530C5AAF13217008666062FDA0D9A3099175452A3C77913453
237259ABCBA9B47AB1C9269F9DBEE349F5D0F519128BC6A6C4F5320F198A9B006A784B82FBA1
0EE217FF17232AC6E280D4D949BB447E9D884295168DA0D6C0E49798BF0BF835151DADD98EA0
9C251AF37B70A58731BFFC749299F62682AAD2B3290CC7040DB4508A11503822B0389127BFD2
95D282290C45CF0FA9CDA8679501D51DAEBAE62842AB48CD0466B8E64ACC2A7AB4E803F4C089
B29021491B7F365D84D785B08B62AB90065E7D99D86D73561D29829E36F1081944DC989139A8
A19B2951B73F1E4CF8FEEEFB44D32426D6836881B8A5FB5A824DEEFCC01A37E20E28EA2DF330
44B8B5A552BEC7C7F5D80777F7B92FF8AC1299CA5364C8EB575B6679DAC7BD853277A8823C6D
D4D97F4802818F989AA4CEC93378D058F8B2DD1D094A6B52614FBC525D611D04F18107C4C7F0
E82F9CEF12DCFE6884BB1DF639F92EDCE74F964F2FF65AE107BB6FAD5D28D47BD4A25BA7FCC1
DEBD600D34E2F603ACD1F55DBBF29A5D6DB4CAEBF4595FBA31C8D28FB8CFEF692D575BD8DC3A
8550BE2738FCC4CD2D9144307998816B713EFD831E47320EFA8037F56738BD230185A5C24AB9
BFCDA3E0FF04EA998534BA973314CFC4D94B42B4D93F5B1A518C5B5CE3E0EC93FC0A7E14ECBA
2C59EBA7491C04A64A33282376A861DA39320B891A10A695D4FC2E32CDFF4C205BA1EEC2263C
5222EB0F057D2AE86600BF704A69E266C9FC0516B885467E841FF76F1DE7684BD614F840BAB0
772D3854F08F615BE12A3948617015F6800A8DF4D337E99091031D77B097B3A3034E954E170B
43205E509A949F93F050C817F06B5308DBD638C4B7E3659FF0925A422493C3BBDFB04FFA78EC
F7AF3C204D24C88789B797AAE784BF6DC29CE66F55E190958F8F579F2515B812ABAF227EE5FD
2A813EEFA441E724C918BC64605B1F9B79227E22A6E001DCF230B6B166AA299FA0DC017F660B
C1BD4E37C59E7EB4A5BE4B91A2A5F195ACDDFFCA46F517F5D00C7932D3E002023490F8964C40
8FCE15CCBD2D14C47071412CA07E2D34EC875416B6AF53FA776AC28E1A418FC7706B85FFF2E9
03872D2A4C4E3F75998D9553F0936989F215C3E5BFA8B7C340478D92E729A7B0539D6E581FCB
A1E1DB0875057CF2472939E8855AD9B1ACB41698139D77EB49F16B56411BDC0F205FC867BEAC
8A049D95BA40E3E791A221C09654B6C607A9629DFC2C1533D08BED0CDB420313ED362321EDD9
F730B06D2B76E2FF25C6F8C0AFEC0D6DCCBD39DDF0339649E13039DF1F88D76A2FFBE06C6022
0438C3C375D166E635F1DC9041C173456FCDE14536B54BCEFF14F40ADF2E8913E4B212AE18C6
BDB74726753F1819C6410A2E16F368D0C5DF9F782E80CB773744461E06FD5781DFBC36C04564
BFF91D3D9BA1843AB94A940EB129DD030CEEDA6DE02BBC0EAD27A4EF64F51A2F96E986082133
F3E9A75CC8F10A91D5B768543B567760137B651EF7B72B65A987B9AD9230E3D244C272ACF3A2
6B836A15BC88C4045BAF6CAD6BFABCDF2B314A578DE1646EDCABF591028FF58F4F442DC89AD3
0848CDF26A97DDA9E3F1D36989A68F98B7B38128555D6B559F63342DC7E2B8C817ECF8E55C3C
CD2467625677CAA39166761C233975001EFCE426F731D62618F60FB35DCA46459E8F4ED0E516
2B16CA1F40702C7CD7800D4606DBEDAE0FD97DAB349188A9B374E3C634E0A832FA1D3EB10926
F0BCC755CB55CA86C8E771911DCEE69BA9C62342DAFAE8C507C4ACDC84DB82B9BF1C9F7F5DAE
D2D2DF13E2149E1741F639FC4EF3EA6A71B1524DFE34ADDD067F176739F769C4CE20757F5654
5B4694AB62C76A39C0CDCCB4791B744B359117D83E14BDC9A6D11517693A2F4CDC0073F0323E
82D5FFCA88626AAD309A7D65F4F1FD14467FD45C30CB5C71E1FC77CDAA5EAA4C7B4FCF8BF66E
F17F0727062E99768E0065178F0FD131E00072FDF98D523A9BB7195425F013B570BD64856AB7
691C422B3EA6278643C8AA0E89A45E6629DFF435673A4C2D7E90C424E01886D07C2534B18BD3
155CDCC0940CC139BB471EB70A95BC684B071D84ED1CFE40BE632FB866A14E35AFB32E327B66
D8C40B2B7349E7A1DAFE55E541D09C53FCB2BDAF0F24089BFCB533755552ABC0164415C69A69
4C0CC8FCE9D6226A04C778D7EA62E33125F066582D65856E41EF6132CDCECC479682049528E6
CF311B15A043995B21A095131A5F8E49CF95587A3BDE9EB44219CFFF7F7FFBF2EAC6434779C8
A422F66E80C3DB90E4789BE0E5940D3BF0D173FEC9947D7611135100566345EDD811F9CC94B9
7E5D2C96967EB13695BC28D863905D94909E0F2C1C299A6F5A063C9AF1EA6F922DC707847206
08E997E27E427F3492CCCA9570B81BE4126C1A4445465A00F9BDDAB13E4E42C7B0EA7753D3DD
30428B6B8F5BCEEA6E0649BA9C6CFDE880719414A3AFC7F2C995FE899FB3C37D4C59D1179E41
0E6D2E41775D4E2DA2534CE87442A90B5295A3C99A5CF411DD8DA9DD5B81C825E5811669967D
6CD584E461A17073D1B9701D7C5D1FED097B032502B8247CF9D2DBA49649EF3BD7E6BF52BADB
7FBC167BBAF7B13376EC03E8EE04D881BA7D74EFC16B669AB02CA11DF2910E88071A25E3F4E8
1D9115BCCCEAFC1CAD242ADE2B0FD8E233D28050374B3F5DD0D7E414202BC8B2DA9FD5C83069
6B56F3A65848FE6E76AFE8EA3A766E480B7CE54D48A6BAC7DECC73ACABA9243C6604088A58EC
CF105D8F09BCFAFBFB83D3FD705553381A3B2414151639CF3EB3DF353FE4E0C0F4B61B6A4318
FD6C9262488694EB142BB1CD160CC766C9DEFC9122AF8FA3913558535E74C259DCFE275EA330
904D7D0756D99EB4874FD1457751DC28AC87B5169A3EA128221336958AC7B0B26DA3A8C0C67B
767E4234C1B97252675D7B6177D6EE0B82B280CF7641BD0793FBA0235079FD6566E3BA565F4D
F5DEAA9854469BF10ECF83FDDECA5ED7684238A7DB5FB6A72F1807BE54DE2F08C9BFFA608816
AB648DA9C41F06F4D635473D1DD95B99BCC83A5B6AE8E21A92339E85F20FE8B3CC04E0985EF2
4FFA8A3EAB55F556CD2FBB61F3A6F6C611FD29D71D47FCA780045BA9A120EFEAC85179996004
9B6ABC52E14F888FAB11A907C1906E10B5CE9C144F6355ECB9D98FAF15B72B416933CAD83F79
6EEBAB7D1EEB9D5E616F49E38A86C9D24F53A6D44C674902E8CF9E383B878585EDECDC557673
CF061834644529155FB00C60EAE4892484A458A4018649BFBF6BD6EBF721C4966DFD53646278
A6A57112F2BD67F1426DCEC86A4C3010D768FCDE374EABA2866A96C85DE9DC7388B59C3C1169
67C29EE252306ECA853ACA3CBEC796866E3CB41F8C62993BF59D39793D0F02007D8509C25F7A
8CCE2389E3FDE88A24E7221F55384F1AA17D48C7AB1BE0EC37A247485B8ADEA4FAE484201DBB
0B7E88236E1D8E0DB5CA592C3F0B2E1195FBDBA7F0FCB6494DE5FBCD2CDAC2DBE2B331EAB091
FC15731378C49A8BAEEB21EB191457BEFC7C5108D31DD8C5F4340E4640A3B866868AA061F9C7
8FD7B078319278BB63278BC589E040BCE4A765209BB656B25A5188F3F304E1F89FD5E922CC95
6C575CBFA791CF59951270269EF286D901BD43C6B15B264671E2DB65784BBC36BE39738048AD
9CDA5CB289F948A54258A2ED8E6210C2BE91892437DF564D0BB1D6184C4B4F9A012784E78195
F19506040D15DA6C85F6A61A9C80EAB3B0A6EFE179339AEAB281CCD07CAF4A75410E30069E61
5EC86FAF6E92BD55149AE1446BE7927290E9D88C30E428E9ADC9E7BCB734D8511EBE467E09FE
341D5DF044EE5F024763C6B4E6925A5CC46169718E31315653ED533B7E12034CBB45115BD049
6A0B02561BC0007C183FE4965E9F8D2919BBB404FB22067191B0B7E02DA1ADBD2A43DB557551
9B4ABB47E648074124ACF29197E9FFDE2837469CA79D32C5079237A3F17FD9BDF5B2D41269FF
952E028F24ADB0B16063B0B9BC83EB86DAC2B66EFC23C1EC18E0BFA764C7BD23B225E1273DDF
DC56AAC95FC355B7D50321C3029B3ECFD14AC937CD312763489B1CA32E44109E46061A380A15
1F6EDD9C0A54329822A66A8AB73390067318837D0E01DB12D4D4B2014B758A3CBEC6EB0B63B8
512EE45FF99A88CF7BFC894B39B3967ECB198D32C225ECE763D6F42CD0896E9DCF32A69178A2
CFA61A4E93A8F4344CC7658A70E8448534616DE0DE4DA96323E63B4061FF4785C818AAA9D214
1B866FF6CF537E5D28C81C8013D07F3D7F276A7C921771316752D260323359585A4E2B07E093
A980CE55E715763E4C11585B04387404B1C8381FDC8A5123D88E54425E4B43BD62EBD92234DC
2528FBBB090AA220DEAF8042E59D8D688A5E84D073AEE92E564A361F1012F915EC30CA52C769
74F7439345E2275DBDCBBDEDF32FDDE895C60D267A921E449EF705E09D1DBECB199692259545
56AD6BBBE4F39B4E67F505483D1F375C5AF02DF6E12DD97D28F4B441965704CB0B4B4779C66C
83ADC18420BD8C159360C0F16C7BAA2EB32856AB88DFC24B20EDDB586A444234D47FACBC946E
C283BB0C63D7DD69A001EA2D89251F3A6D53A31EFCCE00C992B94E9CF3E389D0CF492037451B
79987CF35A218F47E673EDE427E7EA34D20DB31E36DFA83F12253283EDB89191D38E5B0ED587
A8CB7AD0A11167C48C00E5A0B30B6F03C51B8CC3F0DA983A14133F647EE0997BBB01AF1F59F1
1C2E505B5362ED3E15358B76552FCE7D6B2084310BDF66544FFAB59C68B15BA14CFB9B6ECA79
4E3426BC9F532EC41EBBF730532D26C8966E42F946563D7760A60789C869BE97513B973A5FCD
E8C13EFC12C1DDC9E3B2003E351916D5C94BA463E48AEEF0194D369954011469EE5F4476E97C
678A07B17EB958B497745B8D9F93ECEFE22EF419095859D336D8D63B869D4110017CB3EF0398
BCAEA810FD5D8D93CD8FA4D616B023769A3BE294423031AE7C55E7DF73CD43646437E33DB692
735DFF3EFC596A6786BA9F8C81A596D6AAE62B9CB846CBF0174911D8317AA308DC565D0DF5BC
A02AB5E9951D3FEA0A7902F865A0C6F127CF6A246E47948463E0A096E1AA26D5BA3EA2481346
682B8812C8B1FA665FB1F7CB2C751CD3B1CAE67EB17A25F1CC4270268325236F5C02B8EAC541
C0E2B9B33E33E0A9EFD16BE079385882E27D915058734D5743E35821D9B6CFA725D4D3E91E2E
3703C4DFA5DDADEA16CB34C2DED3F67A3FB00DDA757201F9DBEA2C207AA84CE7BBDD91D4685A
DE3F3018511C97E02533E897440983789AA4A64752715A80CFEF745E6780DCC97D46D0495C24
85BABA03C0707F62BABB811CF8C53083535558B4352836CFA36C32E55A09FF88C0F366A152AE
D3390CDD07FC812CB400ECAE8A6E312259E11407348AB9B1A748A4B006F3D8255AA32DCCB092
D0DBF6E70960280D789FECE9CA9758B61BE0B2287CD81A53322C30CB5B08ADFFA3E8F5C6A9B4
9F564043EFDDF252A6E6A2F66967160551E6C3C08F0D512C012F44DF7ABB971896986CA43457
D984595AACEE5FF340423B048D40605D08118D54957CB37961BB1C6AB983C170459B4F0EAF8C
AD2127212C62A26C07A3A9412E620E043BF31E1EEB37EE4217072A9356B3DB0F4B2FF1228B02
DE0BD740B9F123BE12FBABB847A96684784DFA45AB77F349BC44588112533D9A69B3FCA90822
D3453DF28DC670B2D06CDBAF68AA34ADDAB29B728CCF35BD6B560E4DB125D43332C707A46D91
F2D8A1B4F8BD26B91EFA4B5AA3B182DCD2E516F08B3EE3888604E95AFBD43484E4439B41EF32
8E56EFFA5424242AED8159C6811C5D91222FD046A5AD1C205480ABDDD94F1942534C66F944A4
26786AE02546C4E789D6D4156F8972DCA3AC1C7F30186438189E58CA8BE11446F11FC38B9AC7
75E303E0A8939ED925D5107248009724B371BF86BCD06B56029C6A484708A1ADFBF8B0AB88C5
096737372CF031CA6710493F85D84C24118ECFCCA26D0FCEE57BB28CE97C4E515770897E85CD
5C26BB23423F0D234A29AFA44834563F616377D1905B61FCB2EF4E1DD74EE5A5CE8005891DC2
C4B6563E260BD0538E1607A7D7956BB11EBEF22772748B3934237A6AC4637ADD115AC35D2F87
B21781DC5E5D7F31850538606044539E655B4C763EC27E11E59F2259F0168797267C6F6DE71F
4DCA9E613A1A1DFDAA1C1AFE69C88FC0EE9CB8A4022AC193F54A4B3D9EA2B32E6F15429E7DD1
1851AF592985A697EB32E2C084526A0F44E112CF4AA9B9E9660B066675DDC2C848856A0BAE01
AF9AE5D3818F7A51622EAFD51BC3584FE7D8C0DF2212BDDEED3ACF3952B862DAC39675461493
E61E431ED9B3F7D0BB9661046F9FD71AC3339B71450952FACF48D741B6F07F105473544B07DA
DC8429F0E050342DA70A301049D517555805CF7C920FBBB48C56A907A3A19D8C50AA8B624A4D
3789A9CD600CA2332D77D101E808F83822C2942EEE8E2A68E6F0E8CFBE1B63B5EFB1E2D1AF9D
6E311EE20D58CD61085C6071D48FE9AA42D64638B7DE49403DAA2D3667588DE865FEAC8F3E4C
9F9CF9746B72AF6E4AEB6D61AFD1B895B15FC935231B0F245C5802FE3BDB234BB53B48379AD3
97CB7F543C418B457C2A9443E5C640943135CE35AC901ABEC98E42688331100AEA3DFD0868FB
D96B0ABAFA9588DB53793D0E9AEA3B011D0223DC696FBD83A5A3FAAF6FAF4959BE8D3D15B141
231A47CAA4D7746EC45C778809DA6990B8FC5A17F71B54A33D8B2BFCAB202D77C515C2FD7D4E
8D4D16E2F932D37ABA003BE26DE0552467103E2A76EFE0BD2ECC64C528CA69ECB11B1CC06A44
4AA8E2BD3E6EED849AC8DA359A82212E00CEBB2750BEFFDA0EF79C020D9338571D8B6D1F22A4
F27D56D3CA15ADC2A79F23F1C4280D6773456F2784F0252398AFF2006F03E76567700B64B1AE
C7AB85EBB1DA8691BA860F8478E42C88BE431C07C924ACC2EB6BBE37488720F914E0DDDBC15C
83705852D5045DC73856C8F4B6AA093E032AF86DA474B9F07A211F2C3E1F2C53352F18125C18
4924CE07F287A03F51CDC13C864E19B86C4C4E62807432096FE6FAFDB8B65F00191FC640464C
4CAF1CBA3E36E7CCF06E702C2D66B59665368F9BDD06ABA38849343C8E1DF4E0BE2D847B93CB
F79CDD0360EC590622C67DF13C98BDA559EEA0A07DC5E9CDEEF962B161F5C82F2FC8D3FFC2CE
CDCE1308F5713C0796FCE8B4C71DD823A694B741904626659C1CE3C4F89EFC98918AEFBCAB53
E3898A366B6F24CA56625A0DCDBACF39FA6D417B632CB5305C526A427412C49F8A0FE4FBD6F0
B51FC97B85C1A30CFE91F32D6695CFB4C4A1619A4EAD80A674C5387659AB6DADB763F1F16954
53CE2627169874A3845F5C6295C10A9D3C534D14BA0B491DFF6BE63CD182B2496E01B53D931C
857A0DD957706DA4D1A07DDCC5B80B4C4072DBB1A8B4273D4E2BBFB42BAD673B923CC4AB10CC
DAC1E796429B0995FB9F9952F06AD26267A5AF7A41F673D82F6E700F43E163F4D5CDF7A40B00
9F477B55DD2758B4DC949918DFCC0F5D914EA98C8A2ABD3B73376717BBF822B0F5F1054CB01F
9222986E5F9F22F1B506079570ACE57F20C80C55697B0DE5A417A227F4DA26CDAB1B766F4854
EA5FB574781C09945E54690824C587468648DC20E1F16D64A7133342F9D3D3CC93773FE065F1
01042B8D891E9041A72C250B86205423149100E539A3CB9E9398D4AB0D19F15BF8268373C06A
08F43F800DD9B0B2DBD7D43F18A3F2DFA0CE5BDAF8631140D572B7D15A6F4ACD06EDA1E9B92D
69464887CD2837C33C50AF0A9DB430EF96E4507B330BD2D7BEE0075CC19A88EF0625EAEE6EC3
429CDF7D20FF1CBBDDEC2758BA20EC6501753025F717B6E5E278CE406E1F3B0B62BEB675411D
62A19C1F12DE5582C544C252ADB313B2E9CABBCC9827EDE5824A887A8965AB08B30A2E242B4F
78D8C92E8F4D5B040BF89194DFEDAC93CD88DFED379D3E9B80F37E5E2DD904D4B17FD8C46340
7A9F4A6D0553817198C07AB8A347C71A6C7E5B2A11C12EC2D09E6F82560B608E666D6503E21A
5B5366ECCAA1A3252BE976DC010234B9F1152B43CD36FB38977697849CBBA678308326E915D2
DA8B997C92F29B600787C187AEC219631084944B1EADEDC3961D273DA1F3DCE724E84243F0CC
7CFC03215AE8FD7D52E17860A3548A46C0B7DD5456F942352EBA20D858139C9F3A188F01FF82
411A5F8CFCBB7BAEEBE5624C207A731CA4E6CBFF4C69D0A94B0F8FAC582AC5C4AD113F387942
6E5F9452EDF4CA72BCFDFE383D76E70424A48AA7D31EBC31315ACCA51AAD68F516819815D23A
55A872B666059A0208CDC4771CD19853FFEF6B498D51167C92CA5A4383F3080A98BCDE941CBB
DAF29B4B7CF1BC338A725406344FFD2F53EB4B11A7ED0D088E5E0C71D9D44C1F23F262C8008D
FF2C4F3C214A2A6E8BF8022EDDA08BB27AA4D843C144325398BBC5FD10104E0BCACE0F9E5ED4
916E6797A15ECC7D2D0B7AD2DB5BD59C625ED75B722D7EF83F83461CB6E2F10F69B3D9FA2829
6548DA4FEC5977AB2CE4EB764BCA4712248BF06ECB933A186C3A853B9DCE6CE162ECBAE5C3BC
4768B88D178833A2D0D452ED364573C1AEBE6A9904C96B7ECC3BC7BF206DD42A2784F5FED52C
A93AC40C1CBACCE9D2A3AE64DE5033C6866D443EEFDFF4A5FBC6673DE330B78D695A7B0CF370
9FBEF1EFAB2C8EE3F012A68B45E7814E78A7F473FC0FE5E0F371348572B168EFC0FE3BC25AFA
DA49CC40A89535D72CD06698555CA10693CF7BB47165F949AE6959191E44CB5B852B111CADA0
433DF3AC8A17AB71520FF59C0B9118EFB4F52C43E56155AC69F18C3D100FFCB0D770B553DA90
C7C5259BD7520FE8670D643E7D566AE598D6F24ADAF5C81217A3EBF95A84B06DE0224A84A71C
AA0C315B65E5D58ECA1B92DC723705EBA78CE05C4E4B6FDB7C6C1FDDF45017E58DA47AC0ABBA
680A5296D14E8F7B4F318DD0F3064C6F1FD82EEBCACBB6FC49BFDE348170FD7BC83C0029C096
F4E22E6DF93AF0E8729953C17BDB4D3135A2F3BBE91190B4A1EAB51C57B43CA507BB92C162EF
96EB4CAD3199A8840038C2A898FF9EA044BA66C188EB7443FE4CBC2F73DFD6B00F606B235E03
64A3D838D79A1BF68DE8D585EC2BEF723ED31A1074A6CAC7CAA6DE79BB0C847ACAAA185EE8BC
28408E4AA5434D6340877D0EB5F09C4365D31AC35A8864253251786097E97C5033E340D957CE
822BA2CE590D15B5E8FCD805D84F44206D3DD5F925A89B944056B44079CA4B9C038BDD408C05
707EC5C063F12893C37100C3F9E1C8F8E85B21E51A63EC79B622BA8312AB7C75E014997E8A0A
58F029E63DBF4933106221D240DF71213D992CA0F8D25C07530F66FAA44BFC66CF1F8D578929
0164B8F89072E75FB820A6F5628D671D4E09389A07CCC1F98B7CE8C6BC97A6C5D938B199C52A
8CBA2D2EA936F509FA8A3F89F33007CCE264B2B251ED6DB0E6BA0BAD65950B261BB2BFD1A802
E6C9B401E6B888ABB479787DF3383A5AD57E119974A0F2DC3282D8D5B022EE52BF27204F6387
8A4F0EDF9279078FA651EEC4CC77B04FF9C18B5532FE7F91A0B9515B0FCD3D3EBFFC3BEB4709
4A78E942733EDE5155CA699917EA075D729DF6CCD8A96CC37B50789E44E71A080902E8755DCF
17398AD464470938493714ABF0E7D0A41C3C55FBF509CABBFD130C142AF7B4DFE6B59D1F11F6
7A1C14B7550D8B379DFA1B2BD9EC7E371567F011F324BEA202C76ED48ACFE2CDA65FE3119162
685BD52898DA3044058D497208F7C47DF5B2865A912CAC9B557F5AACF08B907F4970325F52CD
94A6695CE71C19E854D2160D4157A046300DEF566654AD5C83F63A18BB28A473C00E389B2BBD
0C89BFF39BDBC207A5C47A062E69C62D0F43D9030B1FB4E6E1E345808C2EE2E8A61243203DD7
F6E6D7A0FAD51E85272143E27BAAAACD4CA894785695D34C270EEE9A5BA06CB2BF3EB8C1C705
57D89CC0624B7C6B2F55A68470ED1285FCF3BD21C5E4CFF2AB4EB8EF4168DC015096456E6231
1E8360DEEBE75740CC9BAE5789E59DDA3297E3CDE567743A8C9A9EF36C62D8702FDDDACE6DA2
A4FAED918A89EB6FE9F611E1FE4A2D36C130FA78F7D373020D5D0383AE3CCC8183157DEB9992
9BC37D59C77B80D868352263CB0AD543A33603BE91823F2E87C57CAA8F65D2D72B80B6A19BEF
A505B4A38C5D797F84DBC85676A5B91C2DE7B7A644F72ACBE6867C7F3DE86D60F080F3B85287
5BF0BF9E958CC9CD76B0AA4D8647FB82D86E50D30A8B92AD80DB83EAAB632866757BBFA6DE4D
B7685FA81F8455F91FA0695F3BF47CC90C068C8CF50CDE3629BA4D0554C6D524E0A609A8AAE7
97C4FBDD1FA5529EAB74640D590BFE62A97E8D25EBE9C03EEE03AB9FBC7C839E1B7E9849BCF5
11176DF6FFBD0B19E4FFAF2F019F995BD6E70F6A0A46DD103FBEA95B9A268C6917F6DE62445C
2A60F3162B04C4E25573060971BFE8018C278300512C25F7E68DBC399B875056BA92AE450BD4
1B0C4A0657689593A9D1BA110B869D02A9B8864D5474C653D299879AB1F09CEE055FF5B875B4
E32E6DD2782E5B8F5918D01F03B2FF4192562D39263A5F621DC77E1951A3F7C5F68A17FE7883
98BB0CDDD72452866CE8860EC0D0D354D1C81274EB5F078C3A1EAC81E59768157AD0FB88E425
27AC32180FE6CC1AC34E70EDF2B4824C836486E8E4EBED8A2BD1FE4298B489060BABF6869D1A
CAEC387075BD8E0D032E26C2047ECEB321C9B062F595D1745EF64214C9737A025D15BB016411
B9AB6D92C4B79CD4589B290082D3A24D0A0496C0694B5C2418F93A14CF8A30388DD8A847A6D0
D75D15D8E64A7BAC3E3E76754F1E2CFC36B1D1E026F1709E8881E18EA83132049AB405227B03
5D8534B19812CF8EEB3EF53CBB5B421AC1E40F15FDB7ECFB5B37FDF5EE1CE6B24101CDA6DFA4
9F04E770F9AE5995000CE6CB123F8DABF249A8C2B961B1D7330207B273CBE67D512D310B0E17
21BC29FEDE1E98DA94737AF350FCBDF8B8BA357CD922D328180FC39E92AFD759268E7DB777C9
95F1801DEC0E787D3844C05EB62C70F3359597619A23DB984C41BB92333FF13227D997DC0E48
4124F5D6AEDFB9D984D16E211A9C436F6DF93C0F014E2F97943CC623EBEBAFF551F618413BC0
E3978C67EE03D9C232E1AC4B298BCA7E97FEDD901B70336C243742571D1285D466ECA801D811
680CD743A84D7E7D281FDB343E3D22249411036EBAE6A8A6556BC213A2BA1840400E96204111
1613B471E7F9FC81DD9DEC37AEA9B6E52A88E80CC9444E265F6669A03F8AB790450713D34DF2
576746C7C5024A6B8525C38025680F3CC68292F929E7C73398BB4BA02B577CD2FA184438E201
DFB25DB9E76FD01B2E53EB0C841BCFA60EAC059D55AF1AA26A07B8B0372FCAF61A7C883D6BAF
C79B59DE13A2C2D8424378B835E9354A2D875AEAFAD3D01274FEA6721126BA49A1DA708D2502
A4CD8ED3FEB8BC1EAAB3B5BD5EEE75B21A40F6BC5475EDC20B4B4637868D0FD9AD8733CE6C1C
91D1CD78EFA5444743D1CD7BAB427F8F24093A7591BEEC1F385A8B9DC02D93907753E403BFBF
5A3FCE9355E7172DF168F6704074C65317EF148B5795DB5CBB9C3BF86DAFE9A83A325823DB04
72D0C0D00479FD1C0BD02CDA2B2959DACABB5B3A23F6CDD6A36B91DE15CF3EE6718030F8999A
C4994CB3FEF37838191FC57285B579DDDDE76D4E27983C8BF6F2119F72E0ADCC515FF59ED128
0E6D12B5176FEC1A621E99B0AFB4244E6FA2EF33FE2B0E315BF378B128821104E00849834F8A
C186843FF860C4B333F1197B84EEE7E967032B56B3BCFA4EA7764C937C4F03DEFB93E4DD9C96
DE10B02878228D99A40D87EA64A9AFD14F5D6ED48CCF4DFBB94024CB1C0AA64423963BE9E988
2E707C6276333C0BA3F6EEFBA424A2E10FF88CF76E45AC33D0A641E2656329EDBECCC5D213BB
BA44586F5722A6DAE8245C1E84A06421CD6B659BE273A1055D6E092E5769AE93759B6533BC9C
8EF13E5B920D24125DBB51FFC74A1A340B5AD94F785ECFDB245D443162FC9F417B49881512ED
E1AEBD25176684901482DBB37ACEF30242FFCEABFA06D1492C30AFC075EC2DE8554A66CF5C8A
3E5A0A134EB1F8CF581DB83A92F8ADDFA60E4A814DDA2DAE415A5AB30692F32509FAB18F8724
A013D617911FE426DA5260E8CC5CAEE8187FE6A9F57812C15A8B247B51C8E1412D22AA040A89
4A7210B49B847E0BE3EA398946F0D9BC8C11B751642A93629D39A1D655DC59D5E7E6FA18CF2C
0C89BB126A1E5D18698D616317F246F410A8F1C40820498E0C4C8235914163BD76180B82274E
80D0598848FD6DF469378CBCFA0D3C260A24AA164132B18DC004EA9904C1F740471806F1D06B
FEC1931748BE9355C122F29E50CB39CF027FA12F106C72B2D62A382DF68503A8D14311AD51AB
EE9283A5227AA457D0EBC2DC1B157485FE22B26F9F0B4DF8C8E7E508DCC32C020B6CFC571110
064C501AFAE8B41CB81A6DEA6624EDBD8071037A48D4FB571EA290DEA299154059ECC5215033
0697A70A9667EB22A6E0C973A4357CC944E7B8834C39C7EC0064C8110A6F7F233B378FAB8FCE
7056796F6EF4B0F72F6006610F8B2087F7900C133431595F07198CE709984C03E1ACC00946F1
F614243CC4F4E017A78DC33C7B7811B88BCC693FD3806348F97EF72256615BBFC7741FF3A4E6
18A72938F7D463992FB16517E702282E853CCE87044BD4E62C72A28A2EC48C9F1193C7875C03
2597B9CA428F8E4BDDA12A44CAB7F6E5AF78C0E92308849C5CE537FD9DE29FE21C99CD028B1C
C09BBF5503E448EA3B188A91FB43838BBA59A7A7CC61223A71B3F151BC5A30B2E5198C9CC424
177E5C19D709671692ADC9FC5F82D062D5F57F63F9AFF9226F89B3E14B454E379EFDC1DEEC12
AA599BC76AEEEB6E0DF8AE03E89208079E2D5120D4736BA05BFA19C60C5C28811E4CEE12253F
5D5C4327759DD964D256F84FD0F1F0E612278DD1D4C2E2B50572899EF1094923E4E1C7A65E33
02032177D5750960D7BC24FB0DCCDF2FADE839A18D536B66F95D775EF0710487534DF9F36D46
89A7A2A2404F9F597A9FD0424749582FBADB1AA0CAEB17E0103E7DCF549147EBAD2343CB485F
3EBDAFB72223B34C717DB9611835175403C46F3BC70331A47113BF566BE329CEC0CF54F84E71
DE96E8EF12303BA04F994B0FE1A04988405957E4B631788BBC41EE8ADD5DF85ACAD98CDC7E7F
7FD5CB0B6A9E4B77B1F8F7F86D50E9F632CDA32118A666F95201696A01332E60AAF44363CBFC
E23C20D426E6CD5844510D73BA24B0D0A341202F25D50D1B31DE34E73FF9C5DC5A9E7EA6252A
E425FA98182CC530456F259FD020BB88714C49EDBF41F0861B9A92A1E40F272997FC4999E3E9
499E652AB3A0217048B2FBF9FB4E3D7F304EF8BD3D34EBFF374DC7AE7B94AE711B829097B317
5F867603E75CEA74341E53ACEB9040741C0A170865A804AF6F4B0B5342D7F85A35DAF2C5DE35
F9EF11D761FD7239C8285D7B159C21322D47D70DBE74C3CEF60F0A8B5333CBC9B5C71D843C46
7ACABF2C45C5B2CF1A117317DCA0F51095E2EEE1C56A3CEFDA5640C979D79846AE1BADBF7640
27F5A3109CB4087D97D09719FB1C4450F1B428ABE5844FC1E85CC6B22E451EA40724F82BA78A
19F71E0E5A594600CF40B2785949A56A6AB9E3A08428AEB81368057D5B51CBC805BA244B46F6
72F63A1842B6619D78A428BD953B8E5447A7867D54CF4C6B4097C9F5692F7E547236CBBAA46F
49F2DDDA6BDA71049234FDB1B31CB7A8793C2F26D7460010F4664194208F2E73A157FA8AF181
89A2DDFB9413A77A3ED4A4B1224BF684F900183246439D7BBEF6D67CEC3585D32ECF716728DA
2E53A4DFCA098752CDB70066B51DBD85AEBC018E42EAFDDB40CCDB702F6CEAE21BE6EB5EFFAF
3E7A3BFEAEBEE77159855B622457BF5F01B3146A0FF7F33790BECA7240B5A0031F57D9D8AC1F
80A32569DF420936E2AA5F2AFE90173BA6D34DCB45102CA00A28CB26A419EE365A5EB5E27D67
BF38B7B81F233A680095429772E796AD24D0FBA81ACDD559548474764290EC307E02463085C3
FD0D8F08ECA815C97DDC42E939DCE6FF49BCEDA5C8B8750DAFF47390BB96E998C005F31CBB6A
0AA280EDDEAC7B4C832B4B530BC66ECDA6B85965CD1BF0C7BB426CE7F0E68EE5B1CC180FC68C
09649C84CE5A74CFE4F4BC10DFC8F5A959A3C0C97DC93E054569D2E1B45A9A353081DE9A06E3
1BE6DBE93CE131EDB7318ADCCD8968BECC7EAD5E00B0F0C640691BFDE2D1DE3A7BAAAA33913F
17D8FEAF4973E7E6CD0B648E2E4B7509A42F02BA8B9EA61FA632828B352ADF1B9FA31488D5B3
F1DED0EAA34DA077EFCA470D508CF246AA993A1FA10DAC8C01797D8147205C7CA5A0BFF73EBB
AF5B0626B06EB56AAAFDCFF53BB98F3320B4BABF796404E1724BAB3D7DD1B6C25844675877E0
ED95F61A0A677A828AA2B05F68852E25E2A3C5057DF1A14C073EFEF67326D39119371BE9DFC9
9F1589AC6C5810F1E9AC069CFBFB141B85E30579E31D33BB046C4931FBAD3463A6384712FC6B
4BC29D0F8D7DEBC9DF8A4FEBA2CC53680BF75E2C65B47061CF2B56BA6D390A1CDBF87065F436
BBBE28B50AA16AD75E6DA40B79086E3A11BE3AFACF81880BA0F16A9190F5F4A77CB100B1D783
E7048DF13A219D17D1B5DB8C7ED82B1FFF15DCA29139DA190240B8380BC45B61E8594FF8B483
DB15C3B0906A4C7D6FF39160D953624AC1090D0F282100A571495DEA6C4412286B233D867EC1
47C21AEBC5E10118D95DB3BD9E5C5613B067C49ACCB42620F21CB5AB5F6AEB20618421F868C5
092BEEA9876EF0CCE6C20855760ACCE59DF19120D59EB0017D8C92D9B31BEA8B52A607B5A021
AA675C8AB541EF715F516601B1082A3231B8C07E7C97A6B6812C9A8F3935959F297617DF6808
0C0B28364FE635C804E68153E7E2CF5D34FF602BBE565C46446B7F2071C6DF407536C8E59796
BE1E192DB379BF112B6DF94E7917CF5CC6A905886CCC24E57F1C99A72665F6CFFDAA6743A5E2
C9D46B519DFAB9A4A6C76935A583022BBC0D7869E08DA1DD91D9A776CD39542ED3097EC97CEA
CA9DB06A6143A0B33A4DCFE91340F5A6F908B2DC123EB636CAF6BD09117A51388D1B2760AE8D
70FFF2924CD002AE0995C6F10C7C17AA792DCD270056567AD17CBB88669CE7B81E6FC36A7371
C218EA674493A18F6AE4FBCE2FF08BBFB25CA2DD65AA3FE28CCBDE3B2F36C88DE30CD95B5C1F
A810981E56ABD6697B0DBC2EBDA8783C7EEACDE33F688239D406B4160AD2065BFE629BEC6523
1876C1539C0D227986957A3A0CDE922496996640DAC05A0636C0D29DFAD1DE8988C24A890839
F835951059498AE98927E14D2196F6C289443C4DC3E822BAE65643119150791C62A3A7425D02
29A9B4A7D7AE570A3E8F9CDE5674C3223B636AB84774F4770AFE4CA9ECED4617A1F182AFE936
7DD32D380A1EE13F5E17897F36A1ACFB0F4C54C6254EE611CA6DEE914CA30E3A3A0EBF95C135
CF9877D6E4751BB600593506825E180878532FA7AD50D2478EAB9D4F352975F2ABA5E90D4F83
1495112BB28F8F45C3D86E0BC5300A3E46468572BA4D6DA50AD217371128A884DBBE9277F39B
E7D30E3F2952EB28E9780DB38C8678B5F03263C2D2C73712A902C81BE43006044D5039FB0B5C
2A8E1959963F5A5B8BE2B6EF2DF112A7BCCB5D5BF711B9C4C3A4CC939D319B922ED6D7F9A307
19C48CF048A417F31B392DB55253B0DF1F7FA1EF0E7A0BD2C80112CB212160C82E4E8004937D
A3C4BCA6B944CE45C8E78064EAD90E48AD5C559C84295BE22F394E8F100A85E1438A62607AB2
96BDEF7AA61BCE23AE31577F98B51A40B38E6B55167119349428C0EB9BF6761DAAA00512E64F
E94425825869893414117397028A116AC84FBC8244FF48BCEE233F65F347EE1D31E63E53EFEE
9106E5E630754DBD5DE12EE758BD79F54F3807D5C5836950D522BD2FC19E859B8D2FAE02B4F0
760D7FC1699FA9E6605BAE0AD932ED1EDB58D6DE581BF126F0E2DFADE0CB56D6FFED96C3DC2A
6835382FC97F5964CEC441C28D6E311898953149AB52DDCF980B6EBD80D86C503BA3762CBE65
3CD04BA14791C9E806E3619789C0CF59917120D2DB9B31A682F83F2AE579C8DA0C4FD6A183B5
3A17E581C851DC561EBED01D0B30769CA8F009D6A400F9B78AEABCB48996D5AB280F68C667DA
C1D45D2C8109482567E1C491E372D88F0FF2447B435DDDD5BC5C161A5ABE218B5DE638861621
67D32AE4F94AB84645CEC019989D004B75CC0DA438150F5F43030C8F71E5D685604407EB7344
95AF6F6868053F0A2C041A5F5F751C590B863CC2B6CA66336991A51D7818CB120BFDB2A3B7EF
93E0A7877E4348003B18088E9BC99C3A0EA007E8B331BFB0BAF46B668F11F5F08BF5CE92369F
31DAF63064F4185957C164F9CDE3B5D2F761F8BC0CFA0155025893B6F23B012AAF99395959DB
CE11162BBC15F9E8B99D1FEC44DDB83FE90B3BEA4D9B47409E7186F39C78B15A144703C3E372
FC3F2F50EF7F23F10EC97E4413A1FB38AD3D96AF63EAD6BAC3E3514E9789221EC29C91DFB1C4
FCDFD14FCBAFE5AAE07B8F18D310FA4494A5E9AE7975AB6C89F5AD85A29B640468E9B0802C37
DBF1BE4A6E4619C0501BDEBD8DFED599501F5CD91E1311473F0E74E5E5E48CD13082F8728156
C408AC7F756FD6EB64EA7D7EA2AB95007766B1B5C86C91C0D3126E4564501475810152E4D707
9C095A80EBA1B872E98B3E452C2DBE8D5D10CDE82DC60C7A9490859590E8AC36142E66652B9A
E0C88AB875F33A0CBEA2FAC0EFADC2676F633D32E446BDD173426B6063BA5318418135F09EFD
113536833166981C6FDEB63BA794CFBEA7644D6E7B11CC762B239E033A5A971FE52DFE175E26
A18E26BBC965D2DEC8B9C15470E0335A33BBCD75995B589EF5C07F39F4711BFE601A909BD970
58D980A2CBAD9A67BE65281F4223C180BC94B41CCFBBB50252A4BB147C8F3B83F0F2AC2940A5
CD6ED6BDAB0A72F231AA5190DA620857D25B78CFCEDCA03DB09EC37F8CC53E994D6564CC50E9
BF2649C48B12CBDB6E57EC4BF2A27AE324D0951BD9BADB0A3D1D6D75FE45951EE163BC46719D
7E84BB99D97909357D51A8AF4061B8CE2586E2C0CFE67EB65318536B101C1321162678979F8C
EF80F26E080D07ED450609EC1874809EF032734CB18EA6AB90963A6A2290138C206934A4C28F
AE27BCFE07D8A7580F2FB9730C833B8B61C68C74282D91456898F5E65EE32A3D6D7C7C3FE523
3920682ABA31017946F77E77E0EC99F367386DD98DE87580678CEA7D485F64970B1262663142
F27D344DD2409639421D9794B8EAD1F7D22D73A8A0C3A5F60AF51A00C12CE2CC3C766C57FA1B
D04852F296C080C679526A428E3DCAD49189CD4EE8AB55F7CEE20C4334307C10C58A474FEFE2
719A6203D2B8874FC31CF068356A004B8FF28B67D798BF9E3F1605F8D72E4486A08576D4BB4B
2150F2337E2EBECCD7E481E197B65C5CE812DA34C3271B875C31294AD191FCBD6518BDD957C8
5C3DD88A4435801D4AF80D6A630268BC26CCE5E89C9D117027F964BBB8D0E9564332B9FACC27
AC16AA6121B5BAEFBA598B2B5C7A172F81E07CD58D08A0761381988241F6668DB2D732976083
FF410063E2F563D945C172FEFFCFA13ABD5CA6DD951C8D57AC32C16DE0605DA28FD7CE0248F5
297753A052A55AE572BE78F584758D2DB162558B4D2B3EF76C1A8F3FAACAD21FCBCF092157C6
E5187EE13FD49D3831880F4C80FD4085BE90A6F0331083100971B581A7BE38CEF978EB70EECE
1EE276BED3425C511326ADF34D8DAF4B55B679A2F99BF297F67100261A14A41D76AAFC53757F
6054D5B70BA54201BD118C1826664318816BA77130F6E34074D0AF632466BF3D18B5F2EFD411
7249A6C8F2A74DEC1B9ADBFCEDA0A8703B12ABFF2CB696DE07FE9573AC271087E78EEC4C5245
29A1F8A2863FAED167B37B48917215D3822051D77AD4377CDD7BC70A70B17E7EBEA98A02F261
DC18421BC867DBD09831D7F34F1A65EAF783705C2C525337B4D8DB43982A5A1AC11E30D0DF41
15A05F41827566C7A511E4F5A770968DA93EC342943474C35A0D5AAD31933D4E2A7356B4338A
EC558E9A7850A9B2B1B4DC7CD66A838694B4D56851969D95495090BE29C451A570D72B444038
1B56A2C1BB7D16F04301F092103751E524C8770A9B94E0BBEC15C538362AA636D8CF672B256B
B22A139DFED133BF6C9AAE54C7CD0BD40472B8E0FCFFE53DE7E1EA67A240BD5822B2B35EAD3F
63B90E661329CB7513019D0BE7EB0B4BC1D5DC95379305BC65704EA0AA25256C59FDE2D51264
60CC3BE5C6A4B3AE637BC6F5640CECFEF8A433A266876A062334003DB993A1A1CBB0B3FFB9E6
4E6225610C0643CEED78F933414449C3CC72C823E476AEAF3F8114AF3D3CA3DB89266681CDDB
2C6BB6BDB6DD9384C6DC3BE6C40B5F59C361EF53EE27549EAB8C41234A47E742941286202AF9
0BD93E2892119F4E6FA8EF793608E205F7688F01A1BA584A921E349D897BD50C9384C9330311
DC0C8BC1CB6CEADDA4C8D546B46B3176091AC8E9715FBBE24B1746DFAD205C9B222E8FD5C0EF
C67D478624CDF12E49583D3037E13C8A51D2A7FE5AE4CF6145BF6C0C1D9A8C303F581B2D91BE
37BEDD9D67BE023D377025C449656E798564F5F4BD4D4D5CD332D5FEBCEC1E35BD69C7024648
2955A12A0BA7B2787C4E572942F255D0C07D5B82D966485F570DC90A5BB1CA1B155DA6536008
345BD13B8C4DE84B9459BFFB5D524A2171F834B1B313372E1D17C358E0B6AD7DC73A70E91D30
CA8A2B84AD6A94D816CE65B76FB93C45B5E7617F6706DD4437CEF28F132A3EBB1AE82A6FD264
BCD98A4F7AAE0893DE4E1BE948EBF8ED26982B31FA370C619AC67BF1521BA7B2C637A8B36AA1
E89446902F5E89AEDF0157AEA3CA44444A445D45CBDB79A3C30A55B5A16AC2635E565C358691
1F0E1CE0754C4BE7754D2A15136077A32F6D64AEFEC7C56998C7994BC8C22874477AF5E8D984
11BBF9FE2B5C5DC67326D567A458178095017FDCAB84E90C7B4243229F898D3917C120BDFC85
E406A95D8B3F583BD3DA53C1A2D894718E521ADA0AE9391955297DA1218BE09D93FF8049B82B
9B833F8E94CBAD113732BC658A56141DA6A9E57CDA45AC02598091567CD075E5D2370AAFDE95
9AC7D42910225A0926EDD9972605C1ED974B3AE63FF13DAF6C088AEB8490E2CF9679E8324C7A
6A55A14F485C3285829155EA8491DE6E4220A3DCDF32755DC3A60C28443FE2DD221FC9887268
09BA450C7762671C3E559D8CF84DD858AD511D4C34BDCCA655455353D69642E170F5E384E3CA
7160E9A7CCBDCB3C1BEF0D7583E0A64034E74EFE5C7CF76DD3E82BFD04F5956CD38C1B95FA13
7572827AC07E2FCC6CE9BE139B876A6E80789CB6D0E83FAF79D37B44554F8409CAA4411725A9
B18EF4511870A4E2A4BF936EE4FAA655D63C5B869B78BF32F1DFA1B1FD8CC73D366F01A06F63
F8A8803AF1526A619FA5E80C19C7F1F33886E2FC99F7509059234BA3552B0E7EDD9965E8CDFD
9B888C39AC1E71CE4F9FC9659797609500B6A5CEA8133EEC809ED63F154ABA6A3CB05EB6070A
CD6C97157F0E654C69432227245B72AE2FA4382B163D6F83C9DAAD9A962EDCD26D5F80BBE7CB
BA1A0FB1B9C5AB08CF79F1950CCE9A6D8CE087522BED603E2CEC5EE0E78D116880FFF51DB48B
956BDB5C1EFB2D764588878A07C7F40643F6DDC531786301EA60235E9AC91970A0F975DB1547
CB5C0F111452F414D4A856C22E740BA07B99CD1F5342C148B7F30FAECB99FE8482D19C1FFADF
593BCD4F31C620BCD61531148C677FAFD8357344B3155A0958BA3B7BF827F1FD4EF1B09B63B1
FF747459F6EE03BB8825FBA143FE99C1CF545F3C33FD37788552896DC6DC977AAF3AE8BA9344
199BB9516C81AE75CCC5AABEBD27AB1E220D6E8AB6F3A1746918A6D4E659C547567AAA9E2351
8F01D1B8B576389910F106313CFBB27D26872FA9730C6AC93FC763BCF2C71D7D6709C7830769
31E486EFA44585C697AC381322DF0E49CD218CB8D9ED532F885E3FD8860D9B673A063D4146CA
527C7FBFC652933BB424AC7DE89EAEC71873F3DB3E8B18118D5FAE195A8F2284A4788E20FE54
C6E8E3BB12AECC9BC2FE8F93F305C1E9BA663C31E8D0F5AB258578CF03C84715F84E7271E85C
080A5EA9284813B23923418B39F7E323E01779CD437C882868AA9C769CBE3022AA148AAA2B74
9B0A83BFE8176E5E7F2C29B70CE442BA7CE0AB77F07AC1DB387C5E7C7E385E36746EDF51C853
CC8AF8E85BD0CCE9BD31CF70CEC111BC3A5495FFA55BD8131478E9706A953E75B90CF736C9A0
732FE44CE0E16FCDB7CF056FE10BBF841E9A6B600A24C9A199D159C313BB1F904811BD80D6F5
DA2BF237B68464DC03963AC0EA6AA66E07B8F9B87137B7E972A6081FCFD48C5E1B71071404EA
3D2932C4119DC85E0353A5D799CB17D100C37333E39F85FA75F7AC60954BDB51F0D65B23DE3B
674651472751A2D68681F7358B559201EC3E9B2FE9D4DC3E4AB3F2E840874630682E1831A200
79FBF2D3433DDCA6BD85DF27C83541FBCF5A36C23E67AEB6FD04FD93C177893AA690FDBC9840
9AB4AA58505F38CB04125405866693C283158AAF0A9AB92010384CE173DA89B0585EEA140D07
43450AE9ADBB4B20CBF9A9613FE8268D6069019EB3AB40CD396EDB1C22A8DC3A060691DAF5DC
7E11F3D0CA562AA64228D2459CFDC38F312EDFD2B4EBCA34A63018C90D206B8CAB923ED65B3A
6E5B697036DF587D6E8AA4E617C73EFF5066661347C2F0B5D54CF0B4A663DEBD6E89D6C80B40
3DD6C022FAA0647B623EDEF055FAA48D420CDC6507AB3540EF480ABEE5103E3882084C3BB958
2ECA6D9DE7DEBF781B6C5A37A5C5D1C3497DD1E59339868CCA92B8BD48FF7E9AA4D5CBD6BC56
8C4C12A3DDBB443E3403211B6DB8BC5D3622C9CA30748095984ED6C3E50268EC2973F70C7B2A
7647987696D5AF56997106F2B2A779D00506D98818459747B4D786C6B2892206F4C8EDC481F3
511D41B258CC58078E734C54AE1CDF265FB7766D3CB56AA0C1200519ED135FFD05232FBC96E8
B4510A70EA2C9728915A05206FBC436F7949C9485129F590696607B8FFE469D3E65386EA64FC
344018D603C82856871AB3167D6624FD929E3AEE174F3811D84CC2AB1DD79A065BFA0D98B7EC
F4341C2309F7422AB925902E838B12EFD89E19FE5D95B6F993DE36EA2F46A120170D2A4B5459
107AA8548B5FFCC5BD9BCB907173BA8D117D0DEDFA40FCE0620E3FF0B1EF5A8194CA877DAA79
BB33E3288A1ABA4F089E775815222973C5CA392720766696E6E9F5CEE98A05015D2E1C513A5A
07D93B891D23254AD589915F83B3A52490434E6319ED25E37E2ED93DB893C6915146F5608348
6CABE0126B18DE2926E978CA26ACD4955BD6A74F48F85BAACE677EEC526051BF30DC233077EF
F217B97A6C98BE8D0B1A2B059DD55F8EED9AB512004AAEB8A864345FA76E12ABB7EE70E30223
8B5EBBE3B6ECD33E98EF32DEA4A532BD9794EEB23C6F4E499CE0D72FE5FD98879407AE21C134
2800D36754FA2ECB52BF0E0F98AF588E490FF1CF57B1067B5B58694310C31DA1F38866930659
F27C8B7D0BD35352E6717446E128C23B0D7E4F40E00DB0716D97464F7A52CEEA989977D29934
892AA9C091AA8EA66E24A184ADEF9F0B4B703D7A3FBE3D07CEF899139BB3013A779024631BFD
4007F4DF330EE68A6FBE517C8465A10B30ED48D2A846157BE3F66EEABF52429089AFC1A0D5C5
CB4FACC2ACDE70B3F39464533259FC29D5C492329F289D273E3EEFC15DB09F4C426422AEB3EC
E6D7507655FD7137B71EBFCE06FE735C3A6E6984DA65DEAC7C125C32BF8CE2D00168F78D0DD2
D24A965B4818F524865F5C9499CAD2E1954AC4C9670A54C8CF382BDC1729175AA091E3682FFE
5BF121CAD285FC7B0FAEC6B0D862E702302D1245751D14B235066A0F435CEF9823DC8EF9FA74
083915EF20AC5778B43670AEEA34F1DFA6531271AFB83E63700FC6451DA498699EF179048C84
C9F34A49AB18C88BF61F0697D94E04BFDCF80180F894F9860D01566EC0CBD2B5224D25041230
B9A4F3916D68AF6201090365084E9BB33C32529F1F701CB3CFF3017E64A7E4C02BD909A353B5
03F67641AFC8F767B154063D8F180382B893F3E9E6072653DCB53DFD468AFCEC42856F7E58C6
54CDAECEE338EA4B93F083428C5B4EA93E347C196590A082ABA7C34BF15EB551B16F7B5FCFC5
7DED573ECCCAE1F50AAEC19AC7506461568DF57D4156764F63A2726E3196383B43D9CB85D150
1E4940C123DD6DC60BA164AE047FA49123984254B181999B72F120D288DC9997A9D45A92B8AA
D626E4552042A17D589073C11E02907FFE309AA078F544C6D0C6201DDE89FA756D8DDCAC5ED4
68A942073CDBBF4DEFE4D80019238D4D0934B1752852218C7A1FB370ED7611245AA7D30439B5
931B62D1BDBFC2F5E3D43343B724D0858175C2711D97BD49E7FDF83941566CB4025C991B80A1
7BCCF4E8D53E0841F53ABE2325B780D74D0C2E686E9D22CF5C5EEA5460A2677B1131E2F06EAC
3BA9EE9E875A4D1592F89546E28CD976A5B57C3AA842181C4056C0BF73A2CFF38DE6653C47E0
B941D7BE0D5A83C3557B754EEF02E3B49D66C2AC8D9C188E5644D4885785E98526D9FED905B6
1DCA7FC7339B92096CFE90D831DEC7D59F83A70854C74B22A39EA7F223715B30B9E4469923F6
B947FD7937EFB2BC2D3D933B3501142FCF3BFABAA04F04665E56DA8A397DD951D405903582A6
1813D4F5E20FBCDB4F5CA91A76D85812B04DBAD9D1A7D3703D1CBB6B4806EFF4980EF7BCC935
5874DAE2DC333059E427ACCCDB285789F3ACEEA22D751F6C6B93A9D247181C7587C6B6FEAB00
1F6DDDABA0BA7592540DB46F2DC35B2B1E0EC01FBC43C987301878F6C1FDE897D8058346CD75
766C9DD2BD783A6FEE67E6145C0CF32554D659577865282CD5D1D24FDCB4F59DC2F64B6B53BB
B57C66AE89F1CE3800E012796E6A4CCC498278570920BF142997DFEB1ECFEA1885BCE4B9C5A4
374B0B0A8AF40E72B27C276BB23901A57E218FAC4E0DEDA5B1D199A531D97905207D4D5567AA
B070C38CF1C51D0BEC00B3AE4DB83D4D28ECCBF1620AD81484F684B9301171A74FD191B393FE
5AECB1009A0E60C718DE184609A833C89C7C1C037A8EE70390FE71C893C8169FD78C37FC732E
8D932BE4903152CFDDB646F344B97B52A3BE9E47786D42C76F8D54AD03DCAC23BBECD33B94B6
B9F1C0DE8D55DE268F1C8593C5B8BCE56437AE6E74E198C455EDE877870C39144A2E0DD24A2F
18A05DD7553DDAD9388B164B00619C3B0CD01574D3672C8D46E2BF51DC7CF42A3A7FF9C1611A
65AC3E1BA62C5DC726C5CD66EA76E64C4F0BB39336601AC0C4F65339392B290AFDA4F00F0801
DF09A19A83ABE38FDF0DAC9DE6FB4872C962EA4E5C98B44C5F6AE426F1A7542C31FAA4618CA4
F39947FA81E2EABF5EFEB176B7D333ED6F71E22D7C4CE2455940B7C3AA3A1BA85AAF1E5FAD0F
67CDA9AFA9D774D115F84DE2A98E6C85AB4F9E8295767FECD9BDD781F108F8F32D25B41D1ACC
75AAFA35FC01E64E364FD7E541FF044814281F3C64304F58494A039EFA4382F54F04EBFF666C
5217379B34194CEE42EBD3885B74950E25C26F491494CD923EAE995002CD172655A210FC2F82
D2907CE23C1B6AE2615496A0D0FE4CFF39B8666AFDDA1114BD5E9CADD33FAF4C773BBE686558
52303642BA755FF3E5AFA4B393F5F346107774DFC253B91585655E420EDA4900A0540CD4480F
F2F92EE54ABE5BDC728C6C364215FA6EEB4E5A714806B264DF292A1AADE8E1E1689C09522977
F387105813F7EE887274E1F3188C801D2A376FE8C434B2B604D220E607217E972D1B02999291
63D8BE484051FDE89A73AF9D0436D8CB66DFA3B9E25C89C6DA4466760FAB4A143C82F94BD0F8
9DC59551A2F57A5A6402C2D74D5DFF6B8C153E8B79C766CCBF89FFB3D161592E16EA1E9D3491
DAD62F05F27AFDD394E3CD27F965A41C35E5EA9BFDB88F23BB9911A8B9FA489B31228FF8C057
1528E7D96242961C446C8D24FCAAE327B370315E5448C5899FBA9206BC2104022039266C58E2
8352C9D304B74954FFA1E19A348161706FBEDE2F57D38F46592161A4258958F11BE38F9D1338
D251AB64C8099716FA1B97E2945E26CC6DCD06340E3941AF652AFF6B0C5758601F59611D7CFB
B804F4F21053C6CED27D7559AEB5B1692CB4DFF67037A871068A1C71B6CF6F372ADB39EF521A
751728C7B0CE0435AF48D6A973653AA8E25F12AC52B9CCD59AC2F4935CF4EFD1BC7F2BF3C062
9F36176FB7D6B5611F8257A0A3C5D43BE6B23BEF360E975C5BE72D5F80F105E1D96D089560A4
995ADC11DC8463197B77648A09E9F315B049801F40DA8693A06C92AEBAD42CED91C20ED00D4D
23DA04112E28C5A6DEDE6C68618BF359FA060E1B2E3F54E95FF7303CC5C42D455955F5C8BA99
745393EA5CAC5BAE1849E5573A03516A6E339B828EBA521727213FF193D5510EB4974774225A
07695BAC479424391D08663A47816FEB0DB2EDAD68C5D7F20FF19A8D4163BD61F9CE7243A4FA
CD400B96297B14DC3FFA6265B883A478738024E360112DC7B5C2E406D9A5EE0491CDC1D02270
451445CBCDDBBA82BBD37E6AF48D3A79B11BA8276983DAFDEEE5584189F62EDD9C2450F034F2
5BF454452F21377E10778326A04EA2366038FB158603DFAFD9988740A5A5E14307566E86D527
8EC67A4AF86CE38943133F31CE3E39624D9C89F526ED7CEC931D57769C8B0C7D47EF3E42FD70
72BF54CF1A9ADAB9F03C77FED3C7B65DAC47D72AF70D19ADAE8EF8F7470E5D99C7BE98317C04
C3DFF220D8718BE44D4B2CE6544980DD8023D6BC6CD75909EB349BC426D8128F31323010DD43
9E8332A54BCE159B03AF1691B1DDBC2583D2A7A617C7F38D7B39631A5691A05922EB21E8F6BF
7C8EEB1833AEB9DB2B80503EB309015EA0D65689B4C9549F4D3FFE5D0E75E8F96F0D55F20F5F
FD440B60FEB4FAB3FDAECCDF16C25041D1B66F031ABCD15B08FC2273571958E47F2271A0A231
488A689107B8081FA85070BBC5D118EA0BBF60028F9B08052E3D8D95C275DDE17FF46526C791
BA213844528FA7494E436842A42CCBD09A6FF37CBEED3B07C992604A0700453413CC97AC42FC
D81169FCD185F2707A4DCEB3AB8F258DC29892A082B97E71616627FA1AB7A1F24A93DB38D72B
F3F2B9AC701183D296BCC26D953CC9C5B0C52811921AB6CECB189361FC868A8FDF5C563E4B95
D882660291CC3C0BB6DE71BB173E35B9223A325CD9F642CDB80D3B65BE74C95844E72A24082F
4F05B03BC05C00B51B7467B2540BA10394A6199C08DCD33F54B568D2684D1DF43564374BAC27
068C47D6865CA7025F806F9C53B060AACF530B35FEFC05C67E56CC855F763BFB520E07D3E7AF
F225296ACE8D96FB6EC5C91D99A6E31C18B6F9AE4C52A0FDBC94491642B02162961A8037C700
B74B247CCBF01AACAA66D3EB9F09F3F66C6E29DC509A104A683F894E6A0C1A833D3ABE2EA9EA
B831D83FCDDF5123324F51C50954E172C862C9945E9173A06CED6FE338CABB0B9B742E3ECD2A
D3A0102B2AB3B213C31C2F10A3A9C48E181F765787DE863337C2908BD3031EA1CAC0E7D285A1
6E83E35B473C66B40A11968023EB5D7028E81F2407106FF7297A8127DCB877DDDAC02C5EC29F
0EEECB00A337B98ED3257869C2BF73D8E039CD713CD1559873E67FA078186F7B59A1B53785E5
9B554E35AE76AC2239DF088DF859C8E4242BAB5E6E2EEFC891372FB15CF8A2187A3887B4A5B4
4A4AC8DAC1DE6C2C1CFF931F7841D82C5374D54360B58DF7BD6796AC0C6BBF20A706115AC75D
ABFBF1EB66E2A8BBFDD082734B822E5CFE361806D24AC7595E22259E8A06C0DEEE0A06C33D92
0C1C661D29111860E3382062F26698EAE0FCAB0B2D7A363E58564CAA80D4D45132F63D81F19C
44F3476B666F28C399C30FC849307FD8B4B468A4CA4079F20D31C11115E4E3D0F604D1055136
9751DF0CDB66F902E7FC8E1662B9C9C67CD74621F7660B2D41ED9407751CF529BE48FB641423
C4A92FDA00FB53FCA0002957D46F3029943105CE4FFDD9BFAF918CB79262785600C184F783B7
CA9786B967E1E580645B41621B7C3253DCD007965C23994D21D9DCFB06D23F450CCAF1360B1A
0B8D487DD6CBC1A3ED881D162778488614482F80E10DF800E110E584C5E2B7D5AD46F1FDA897
5FA6803BEB676E7829E2E3BCD293C3D77887B7C630F00A4E678B6463B82453427C9BD7ED9C35
6F0D9D73F3C3E2560D862AEAFE91430083E80B8F169762F116398D941CBF811AC77FCEA373FD
9AD3101F7DA8A5A93D617553A0F50946A8B2FD5F7282D8DBB760C21BE26474C13028F7E6249D
E5B7CA8BD97433694E2F7C8DCB2306B6852C4F8258DA2DFEF3E8D8829BF9D74AA74A26144379
1D68F9B1331085D30573FBD0D1B55FB2580D67D8ADCB6668AAB03E6E970AD540F63F93C231D4
3A88B25DD23488E8BBB72A703EBFDE30E607AB95B70BBB6314AD7E2A855CDFDB6B0B6BF8431F
F0AB90A25B3B7FC283E0AF75125E2DF55AC91CDE45954D1A8F1372B527719171CE420B4B4526
9C52A67B4B638872EC18EFDEE262C2C8DF8BDD031B00EF942E322E246209AA908032713B4B8E
36FD523EB0F5DC04398B69D87A3690E7F7DD47FD8B74B3F27B65804E8177FC997C0BD08057C3
CE825B034888E95D231B4DEF08F9A77FD13E26A0A4FEBB4D9DD8D12838FD174DF173017A69BF
24BF7E91175AAD5DFFBB14A337397C60CB54C6E981BB1A8FAA797B2039FB89CC4F3465B03809
090CFBA943D15AC47B2878EA92355E843FF3AE49754FEB5447FCFC8B58B1EC530B6482127A6C
6CD994E146C25A9A9C0E677A4CFEC21F1BE2BA7F198C983BDDAD9E6068FAA065C84529433ED3
70DB409B64A9788CD2ED29CAA8E6641711FEE94BD9B5BA6D2A8E73B10C6DE72A8E8F3BFEAB83
44FE6622FADD5D01457E31E8FACD74CB548317D15EFBEC53CDAB722DB40C57BFA357FEAA9075
EB60DFA05661638BCA2A0A8BB498
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if

%%EndFont
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
/UniqueID 5020904 def
currentdict end
currentfile eexec

E98D09D760A3C22CF119F9DC699A22C35B5B35ED6AA23593C76D54CABB5E942BF7D6DD84F166
4B89699C74B472DE9F8E6DF925F6C4F204E9F1C639B4DBA988ED2AC419FF2B2BDE605B8EE326
4EDD66412D4F21C64AC522BDFC7C5502F9C3F3E5592B3B2093D33C9BFAEDD2D49E89AABAA832
E23F062E91A25032519D1868816E44B4E0747795003D7930299D6E1E2A5BFE0D595DC97E1409
89CE81D8D7F852FF9CDC7A1B1B598C69131DEE005B415805A16D8A123E6E6592E5A3B79F68C9
6D8210CD36CF35744C3D374279236DEAAE637757F315A4017BCDAA87B015F5C6B4CB91D4EE47
F0386E712E21985E3126D93A4B34217DD5550EB0B671529618855BD1BEFA276E041984A6CFD7
5F9AF3BDF392A7F8CFA3E29C081002E741997BFB13CE7AEEB8990C2FA67F0CC195BCE6DB51CE
A8C5153679E26BC87762E0FFF5515C654007AC4C90ED6F04F907F7EA22C3C780E52AA2C68357
9C304BCB44865499A75A7E8683433235CF3C12B02B6376D06E16D248259BD783A4918F5ED78B
17BEBD14F220092814B4AFF6B73653E0637C3E5409D02BC684ACE7AA4F12235E2D15513AB0E4
A20F4E30BA7226EC15C508CF10D9C81B66F4D7A90B2E341F6B0D77C8A232F3A2C99A66534C6A
EF2D130F403FBE0ACB674FED2062AC989BB6B8819CC8461F50E608EA96F4CFD22778BA9D12AD
84C0DC78F70094BAEFE58CD185CF9698FB68E7834904E64CBC2256F8DD1024BD80D547174DDA
A1477C68ACA8F27F7A02C514672136A008E19064D5546B2DDE061CEF1FC6E8960A4D8364CBF2
5E4393363628FD1592BFC5C5FF8E40CEEE601006977B39D80B452CEDE57C5A73F96FA5E1E044
88659F70A972CD7F99A37BC7019EFD90AAFAC0375BC6C9162797641C9848A70E8B009DB4303D
248980FD3E917A46F700FB7D48660A291B842C0C9B12D1B9FF790E175E7AA6A2910D1FBDB378
BEF3808B87D3C8EBC458DEC72CA5763589135A15BA60B0AAF5CE7AD34ACEA44C5BB4AE5EDB8C
A0DC050BE1579D74AA7C0252BB836BF6FB0FDFE3F4E1BBE9E9BE6D5EE2102CD25CBD43CBFDFB
9FA2D13BD195121CD703510CB2D275C17B4FF9051E7867FB0106A16A1DC677A89C20B09DEE4E
99530D89A0EE8E07A4771D04A07A547F14646B90536C759F1D26F044F790024AAA5257000422
08A1A1CCAE4847E24173D2014F0BAB1B3D68036495A58D20BCE23BCA3B930FA73466B848BC4F
FF499F2438B169F9E6BC9C1858BA09D614C679676620C4D2D4CF6E18D63CF46DACBBA65DFF07
C966B61B011883F6E5A4B53C9ABC3D4252EA422919ACDAAF2CF94A6DFE87D711E29A39C572D0
B9CB60F5A58D8467322EB65A2F8BC66BD83A33C2716533C6C38A1C3D766B48121BD284A592E4
59C39C778B31F949B07EF1BD466DC49DB36DF165EADD0831CA0DEABE21398FDAEF3DD27B780C
78559EC68DFA698EB700F7FC9C10950F934DADBB67EF97CDDD4D906248FEAA2268E365B0C0E5
55CAA49C4FA90229FDDAB166058080D42F629BDE82A5A237FC6C5511859F3DAFABA5076969F9
9A80CAA40FE2E30B6AE41238D71653B267ADD9D3450E6502A0EDFF080DF11BE3B275986BB831
6D26AFEB983E715757C594FC5EECBE80F4F0307A3691941BD85EB23F645B188E0293273AC148
EDB62E86E4E06BCFF708B6DCD5C47F7D75551848F00C95C68426592D07637DC90E8A98A37039
FF938277AE848FD40F8A58803D8748AE411F5DFFE22D324B203D3BC8741C9455B48094D29266
C7CB49FD9FFD260F563F198352FE14CD3DE00E9BAF28224E0B588CC6FE268840400B868583FC
5062E4723FC51BB3472FC48A1E95C3EE1CC817A1B84974E4E154A612C95C776157B2644C24C2
A9C3855CECEB5F2A7FDBA108784F7C51A80BC7332532432002B58740DCC4BA984CC2763C2320
0A911AE147CC5A94CEEC7A6C9C67C95A518A4EA344A660CB05DEDC4924F4833B360BF67B9896
38A37897AA761E7E79596ECAC374A4F9548004642D040A8C1C2D9D926A714E5AE96EEC38A4D7
4C78F6555F88A95A19E48C5DB0ADF747DE44560DCB7D63AD476BEE7B15885EBA619EBFF899A1
462F868661C356C6A9887806A06C0BB879D45CE54C92D61BDC6BE3FD98C5EF085FFFB120D36B
0DF99F2615332481E98146A7F3AA81126A7F500621F5AD8CF4505C45A38D5B38CBC85DAB92A3
B1A8766F50B68CD08DD8CAEC5DDC62831631003B0E6ADCCC42B1694C39FE0FBAAC60ED88BBA4
D0F1FBB0C7F6B6894504D08F43CC580213BEB5E283660B83C02CD75160F3527039530A3C9B16
0D225C15AE84A640F4EE508D19B02F8F063D3F62D1D4C5274434DE2C2D4E2836AB7B80DC8038
421108C077CF0989B13D83CB07C66A6DFDC1A8BC506115F336F20FF71591391CA12D39F19413
EBA19C9CD6DDB10D9D786C5F97A2E585125011477EDD99D86DC88F11FD5FA1D5CF7F3CAE8240
7719F13E7DDF766330B6584CCF4564D0043A15E287037992F66D2E75E43898FCEB7195F60709
0B2786E5848D7D0C7F8472FA3AE72249CCB26C14E63BCE8A9363D2FA7BF30E87D529AB638599
64277A9AFD2339BD5006B93DAEB9149A3BBF9037A15DB62CB722FE2A5CDBBB4354027F79AD30
883772AC6B11A9AECF1094249BAD804390E0F2D829671502B3837F355EEE0FC6860726E1893F
59221410C1732CC679BADFAF6D1B30C9499E9D354128ED7EE8F7FF6D8AE39E6A7FFD6F47BBCA
8D8E8C9AB3714C3ABB8088656D3ECACBB7E570E746ADFBB96FC84415A7710DBB2776FBB4183B
9DE8CA1B9AE5449DBCF4D2B47B97AF804E69B1ADA04C0BB923A90DA0B8BB3F6165335C2EDF24
42FDFAE5ED8CC48F1DBE46014A352D4B3FCFB2C97C06DE28767888D23B2A05D4269338FC7C98
6C84F135A1086B85406CC4B1B1E5EE5315C3163A5E1A69BFE25286D9A9543B7A811EF948CF74
A723DBD1AA2E2F1D141DDA6046174312F4D39B6D5FC5E1BB12D0811EEBAE2B1FB3AE2963EE86
DB9F5EF893B74C1983F22FF76F91A4815FFEB76EEAAFDE90584346DB968B535656E3972788F6
FE0088DD02ACC80A5A4BE54AD45356FB5AFB05F10C889883A007B1BACAEEBAB832EF2F024460
1A184877683F285F019946616A35617AA1D9350B12E3843B5FC1B30F31ACFAD75513AA563704
800D638B4E1A525858554A46A2373AB54DCB90B74992B34FFB6273EF4F017D78DB18B8802DB6
1A6D1E4F91ACD9CA3A9E359C641425A583A918D339C1DF491744974862CF101DD32E6B0EE708
02C43F5F52310A5599658F955BF73F3836E0EB1F466C9B3D939F6F3A2AFAD15C24E79ECBF333
306D4D80EFC41B863696FE1F507DA6416CE7D589F8E701F1F8C1873FA2ABF1AD34324CF7A944
3F3587BDD4CD96EEEAA8FA3927E631B1F34AD444C5FA6E23A2EB8934E3DECB02C6E0A19B83B0
FD74F9554B6FAA2BB679A83CC5BB1BFF5FD445EEE3B5CED62176FC2054F5817029FFC4CF0CBB
277EC1D81975029926639D38E8116E8B3901F84647319C3FB81E6D49D4F4D92F7DA23BCFB4FB
5A5279043E68FFB9DEDB071771A545B59C27FDC2F833C7D60205472F428C8527D209830461A4
EAD1913C7954B5C60BA350C7CE5C1B43EB9623DB36E2EA0CE4A74D5519B552A6C9AFF627F677
A8669206047613EFC7DA22861704B134511BD8B13FFAAEC1A49F3DDA0460043E97949B69EE74
4EB298B9B96A3E00AF9D2AF2726AB16E27C2DE950F759DF2E87B5DA17382C03BFD8D943F6D78
8F536AD804E7DA10AB47318C3769D48F573775102C1614AFB9A8133A9CC9AAB2233008C9D567
381F194D5602761EF93BBEC6442616A2DEC84AAFBD92007F72F70F211E09F6F4CF8031A9A4EB
2BDC0D5B9243ECB73945E82974D0BD03064027995C89EB3E44B78C50316CE162579138377EFE
39F1CCD659BAA9DC651B4F9A2345BCA1C72231F0C4E85875298CFB8AD0DB6335FC4A6B271AC3
D3582654C27549C0383C4C0E07D2173AB72DF9B4401371AA5443B1E4D45977780716848C8902
497B6C5F459C200CC7ED31415F3A8407A32D9E95971CA9B103F0FF7D24A1602776ACC1D9788B
79F8FB897F4F0C3C0FA01943BD60BF079E2AB714A4E94DECFBE3E8B57D73088DC071E4C35872
7F21F5E546CF55536EA2B9464F475D03765046AE4CCC91ED7CAEB2F35A2C983031EBD1E31997
3C7886E55D3BA5976E4D90C5AD5C4754BF0B028ABD6FDFB38B6888FDE3C3AD472C9B7EFD9D40
9F6C91B8503A858A7CE125D39695628A20493BCC9A4C551F80BD38790A0D1FCF115A27FABAF0
F00D1AC5DC2599A504DE4CC0F29F57380F9A0ADC5CD31AA6BDEC64CCAEDC176DC308F8372BC3
3EB0CB6517FE54F2898D4D820146B76046E203561018F0CE719EC478ED0C87705C1928CBC8CB
39E1E041B29F39BDB423FDA4539F1CC4D51744A45D9859D28629DEC75D2A0E8B214A3BE3E417
1D31A98F000C855CD364AB21FA62CD54826526A9ABBB491C413B5CC4ECEEC281194A84A9ECEF
95BD839C1426B20BB6CC7A5F984B754ECB15B99E4297887C580335647C46F81F71E37E6A0C5A
FE016321718F2E988B2C4973711E6474520ACFEA1F4CEA825A4DDBB568F49D45AC9E496428A0
4ACFCA936D8B204E9BDADCB1527E708D92E3DC78A53161CB12D6AE304F696E55B08B672A1198
9EC3B90763BC3449ABC93A7523009680BDA28408A3482E8F040B22F37E8FEBD41A3272AA72F4
7BC434BAEA4C4D14EBFC40327D8B2E3A8EFF5C780C63129B05912C2E21B215C418E45E85FE8E
0DCDB41F8F9F578737051C7289A53F6E854308CC2074859EB49313B8E8D7AA6DA0401C545607
1B3E4603D51DBFAFB291D87EFB1E877EFFF20D231234E9CC535506F960A32337B1055FCDFBD8
134E7A8F263936745BA79FCB77621175DA8134DB980F9119FAC6A39573E6CE68968DEC483D4D
CDDD17C88EE1DBC53DC48832660BAA5FEDBE6432754F23EB771E290D9E1774A095AF7C18448F
C639E3219F2D79029C1D33CC9540531C0D3CA099DEB71A9FFDA153ED7238F6820E18147787BB
C20195F16620E6FF655E75EE884A824855D271FD0376FE59D79E24EF13D6591F6D81FE975557
8C3478DD5F8729F3A82D48CA829AEDDECEC3DB0CDB39307FBDBDFA629F7E543917F7B1A55673
487EF94069DD05F3F4ACA876567ECEC3D81FDD57DC25A032B0509A629613A3A76654DD7AD692
73B839F83DA3C93DD3ADB200C6BD1E1B4E2646A5C90BAAB889E9408A55320C5CC684E472DF54
5D211B529F4D377D4DB74734FAD1504F32DC290FD5222B77B51B94D9B4A70693785890D0F24C
199DB2B51245863A324D188C8E1A48AAC3805FDFCEC5A8BCD429C70421BF9B5F3A7E7ECF58CF
3B487FE55BB657183CBF73F2FBCA24CA8B688C066438C6DA2C8C8AD0D51E6F3324E9681D0AD2
3DC7096692F02ACE519EDBB8AC2129DF1360676180C29927E22E33CCE651CE24557DA31A46FD
5F2B911645415C21C8C2ADBE3B027EB9156705D5C3664C59F2E515A89F7145D62DD8B420643F
2D88951504778CC6CAD1422185F25E2AE9885B21E0F4FE26E00811311143A6BBBE372C54EE7A
C4FB789C7531FF5F70DFDF664BA6DB13755321D30D4D064C477067BE33EEEFFCF946C6DADBC1
A69720CADB59B77CB7A8592B80A64735BAC65189BA0BD36695AD9912A0DA55686D8F59BEB531
A076037755496CCD16DED2E26F785DFA7E96887EF81719E7F0C61916C291206608A7910D6AF9
85471D22FD178993C5D8258FC6EF1098DF955825A4CDA2190A7C4A0EBB56E9B7B4E5B768EA4B
1FCE978658F229A859CC371593BBF2BEE6AD71A814C56CC522144DB6BC0E579511E0A4384749
A7D88E0512D60A455AEEB30CDD6E61FA08B857FFE5F1C7C37669CD8740019C03727DE0AB5617
60E687C3BF89CFB1F73808231102E217DCC1C6CB5D310CBAD5873329B24A2646495F9C632C06
BF8E25C03D370D6CBB8659B72602C4C4A91BC788FC914CEAFC91BECC56716C206E77F5CFB010
80A6D82FEC930729FA331F9586277166E8DEA11862E2123095E25D758F7EE3808C7E56218618
1F8C2A30D55042CAB563BF88ACD26EC19B7940B186C2A136817FC5C7552AF5415B7F30B1CABB
6E09E9A78487CBC560B325777D521DA140C493E72C0716C67901CF1AB4DDF4392DD8BDB704D0
32C4E96971E635457BA0950DCBD5A945447EFBA1F662D12434557D23EE9790A3654D0896776A
3CD714BE786CA46D3416B1474DEAB4096C1B91B6657E2E462DE047739A0C92EF6EC7BE777948
E447A8CE3E8D4EF3F9374A7752712312B87322DC2D7DEDB583B2094D7548BD0A4FEB3DCDF835
D49A1D6E337E35506DBF6F429B6B943A2C712842B953602628FA17EA42C40D8B3ED3DE2EFAD9
3BBB2F29BD26344A1561DBAEA98A0FE64FAD2F51D2218F801834E25FD7E5081A85A41D8306D6
E00479F73D6FB6E9E02B20C8E7FD9FABA222AD0FD1EE2D747E519052413EF1FEA4CECF54CA0D
B91F83E9025B8488013DCCAF1C3E18AF25762F911A5503FD2E8621A2054516464C6FBD4149C6
5667ECAB561760E687C3BF8758908D513EB967002B94D9F4CA39B8DEC4C548CAF7CF9BAD0761
6B6CB0DD2B7F1B859F13CF627ADBC300B739BB2F7D7B9649D481DC9122B7CB561DB1E8A9FF28
3413A413A9FFE8B45C25FE36B2867E0B88169AAA520FCB087D0BAB1B52C837EB404E264A1100
7BCFDA083065BC013CC1FBFAD835349208B6B481D549E8C1B378A989B7CE5EA7E47873BEADA4
91DE7DF6382D15F87750F86C74BA4A72BC8916FE4F5F94724C1B42144BDE881A65E0AC01235E
81006402F1927B7DE426E7C2E7EEE6D14EBFB9C16C8BDD5E9763A4AF799EB1A566049D588F80
74FFDB71236885656562517E2C792595A52C9B3FBABB9017E6E9D2B009B08E81DF6B37608043
B7A223047743FDF112525D90CCCFD8A87EC7D1CB41004ED96601B1902F23373679AC8E7B0367
29DAB83E8C884FBEE53C56AE4AAAAAA3F0005492CC3F5F2B48388AEA3470E77666F303543416
652B456B036BD611EDB6E4CF288284997523A914C69C88AE840736301FE85675CA7A06772B8F
4F335A8CA50DE8AA86A46EB9094D45437707B48DE067F8B4CC3C291B91BAB8164345771137E2
0626A74307692094DE000681912B19122C992B73248DBEFBE0E0F5ECC07F012BB9E29351C90E
ABCDB65A20AA801686D3EA488A389D0F351D3C74A03E111EE7D242DE7ECDD22E277BA6CE0A57
3A81848B52317D76FBEBA106DDA0D1DFF6B9AFFA3E9950914CB04B733636B7DCE17380F8AF2F
E52320BF094A2C04326B44C4F0BBC16496F4D4C6B53673E3F38C351E7B18BF083D44AF5490BE
6A51C3FD71CCFE20B1874AF3270FCC67C130C2A20FC44A28EC8B8C25EA80ADA78E78A654DB7A
0E0E2FC67EBA0774B32009C0F795385A56B21FA57B55BCA10AA8D7DF149E8E3ECE84BE002653
C904C769A67E818428CC1585E33427B225B87690A759E2AD1981013B1F93D49B47DBB0BAAD79
B1AA9088EF87B51605B08C84B3A4671A4AF57D8080FB78BCD800EEF2627BAF10BE50AE23CDD6
BC657FBF6B53C3C81CD9E761CCBB696861EF18644E80E57D49E95C03B9851529F56FB527A353
B71E82D1A53CCF9E0FB99B4C0C0FE29E6DD2C9CF8C46DB237AB98AFA086745D82323FDC64042
8C733806F6E50CD5E02F03937BB0E4AD653E069FA2F084BC7ABB8A19A43D89ACD8EDEAA3945D
C3DE3005ADE59DF6C91A08DF9EE216963F931C6DDABBC27C3BFC71598FCCE668886402AD3B1F
E6FB76F11979C7744E541695B73D0F7516749205DC27A2ECDF8979C2C77291A4A54129DF2A34
CA9CFBDBA9CFE2DE67FEBE4CB0517CCE15D262D3268BFFEAB8C826D811728CB1482D560E75D1
ACAE4243E8E6EBA7A586CC480DFCFFCC6CCF45CF63D6BC5BEB0029F1F4ECD2C05998BDAB17A5
9E7B46CAC82C60376236C2121EF0D31B4065C41C4281C67D69D0E0C6D80D89E0EAE7BB26824C
CDBDE6AC1753E7D9855E01803A2EBA63297300CD28E5BDB29A9AA4D7A1D974B4EF6763B5C624
18D8BDE36F4599BC8DA58602CACDED847F6B8AED9940A81A2B56E071C1FD80C22F021F0DEF4E
F5FB3161510D1051E48505891086618044448C5C8287BED213E1A2F2D57DC0DC976EC165A8E4
D357E690B8A5D878A7BD6CAB5EA62A2EB3D16635220FB98495B26419CFB6AE39EECA1537B5A3
B72823DE1F7C66FF784DC3FADDD523FE710FF61D769D202C0409BDC05FCF0F8DC47EBB5D3F92
FED23B1D61F0832A4659B60CE2F24E352661944DE103B92A3E1DF0C1C992AE77657B87305A90
141467A71207AD663014792145DCB55E913D3138EC2F79967BEDBFAEBC88D0138E6FAFC8F092
C53B80C96DF517B4EA9B2BE082C984FCD8F51A8CDCFC44AF189A05D42DE9C6B614926BEBCDAE
2EE6EA1FBF971CCAE487154E4C21BA3B2FD9DD0EB938131AFA1D8AFA684C252AA2E7CD05C0FA
0F4B3803511252844A195552A53082D3F4B0B5455462FE52BDFFC1D8CF2AB856A2312E4353B1
22C8E1F517A22E38C789438BA50702A9C9EFA8CBC4D0234C3244974998688026C71E69B536FD
FA4FFA35BE1081A7C1E3D8A064249BD96F5A4D0B757B603BD0A3222C3DD8BA8985EDBD0F01B0
777C316529B5C14F4CFB7614C859099BB3E6F306EC12F62083AF31CD2DC6AF65E421861F92EC
34243EC8482DE8BDBDF5C9977D820E70CB60053576FE315FF8625ADC0F6891A9BA8069A46B73
781319D7515464988F025A5A38A9F93E4A4A2A061F5D409ECE66484824C6CCDFA25165223FB0
33BEF8E5827BB68EA6E35C50AE3CB1BCDD4120E32A838877D7D99C18BF9637B1ABD2316941E3
D3D7A1E4F906341326179CAD9B799D6FF28FFE98242DA25B55D058D051934EB7A1B68385B1C4
BFDFE8088285F965562689AB423702DC55424B15A76DC4A4FCCC29386254DE26606144B05FF3
0D9C29EBBBF32BE5F670F6114838B333EF11AFC184C3BC4D70A853844934D843FAC065402B66
07EFA11EE01DED0E5D46187563A77BD2A30F712DB33BE4197677AE7224B0CA01880FB98D8E40
05699B0B3D7D502D719CF3070AF36F3BBF4A936F08587415AE89BCDA7C122B7B46E8206C04B7
C52A3ACDC8FA0CFF16147A859B82A4D869576D443325E4CA57AC65498839CFD7B3AAF7290B33
C530F14C44E6641F38DCE60CCA697DDD287A4B8EBFF3689DA85D09D61CA0DE671B20BFFB3C79
F9489738472A8F1A94A91A8B4D59E0B9A81E4164F827F35924CAC7F85AA2E103FCED89FFA130
34B8CFF86F54CC6566F2A87F902F2836154DE2DAD3F162DE6F2C587A5F5B97749F8B879A422D
BFFA2B7CF52B8C787F6BD1436B8124A80BBF26C1B91A4983E27AE87A1879F88A56252EC19B08
45D2E8BA2A1A2778DF1824EB4CF0DD9598A9036B84C8BDAF45505B52EBBFEE5C8F074CB7052C
82C17E1FCA3AFD65DA452D7B6440AB68BE345036C0A8EF5BDFBA0486AB7CB4ED988F593D5356
E29AE14DA21F3593B0C11EBA605ADD4DFE740F0F5536FD7411C565837DCB8FCCF1CA42C8EDB7
655264E5A5CBFFFDAAD2DCE9D9A1B72D46B04F44DA6CCE2A72A1EAEBB00092DDD505C9DBE2E4
2506AB1AC18AE62691152B022C06D8BC584CE8300A83812BEDDEAA3E177C51B14566DB8445BA
DA400ABA40ADFF979C8CBBA45F832E3485A4C21B389F41BD0E096490E1E74FE7D7C93284D612
DECC0B1676794BFE08DF489647FAFF364D271031BB48225E110640A81C8FB4EF4E0EA9138D53
9757677D93ADE145CE6083C565DCC9E07F228AD47080B2E02E75E521547F18705C84B315A82C
4A88B76623F07A3502DA3AA2B11F35BBE7ECDDDA6E7F30E61E70FDA645065792FB5F3A48DF5E
0C7BC7A091FC92603962D53EC8903176FAEE9F0A0B4AE9968C4F91A10BD557D0A45D1DFDC69F
A7591445E93555250A462F16C74045BB87F744D96549B1A9AB489605919EFB604BDC3D79244A
6831368E653964E65E2D9EC7B86193998C9AF646E19CE3A9EC4C943F57445743E729B27B32CF
C272BD7E898BA3A235E795A2D32193DCAEAF8F4C653D2E8142C573B915779D7A5D61F95B95D8
B351E4D7E02762A656C0E1E62DC9DAC4EB6AA2253606503FA1E704FFCE32DFFF62DAD560D11F
A0439AE64C86B9C2FBCB5F15D022A8472C281DAE2EF98A632DA2E3BC27F9C72CEE3FE7849692
6CCB1905B2A93B3D7C52F6702D65C7A590D6C817424AAB877751E1BFE1DCD5BA27645318DF42
486D1D7CC72CFCCBC726BF3995869AB166C961BF468F25A8286265F85C46B6D70EB017FBDEB9
417CBD106FB1A591DF8D64988FAAD85BA7AF6E375B2AAF8A4BBFBEEEBAB8F63F2B0335B34C75
864AA8071BBFD19C1A39B19F562DB56F43C1A3A778C266E7E119A2C25516C08AC9A31029F8E4
5D5A20EAD3CD2D859B55B923B16F999ACBE22B15DC77BBD70995DF003B77EC73258333ED5E72
5365F007E68CB353B18B5C3D2F952DBF771FF894D02F5787B76C1EE108DE2C796658293725D3
6AE55877AEC7686E7239AE982BCEA06467FF199C73FC8F97CCFBF0024BB96087F236B049CC83
6C975808963BD296D80421AD8D5EB0911AD65A5E184D7383D4B4899B02154C58E6471FC04A20
4153B94A2FE6C39234DF5BD6232B0B734BD7A55CCC2AEDDEF7FBA2546AB2D71BE9DE6303D056
CDC1FA9EBF602B3E2E137B1DB6FF17B222945546D0472A01FE93EA14C89246063286E21903A3
8B0B390F41D5D9CCEBBD7DF39D2F61FC97E29FA698B4855DCBF342A53B3E5C0EB0A042E469D7
78CD58CEDD5B6DE6379F4ECB76258590F5F3284F9A18F657F49D025882CE01A6BD0963E90EFA
3BD3FB5A530833A191BD45318B6BC70445F92A42F13233C8753E7D0C16F80E2ABB8B7103EA90
12AD3D9EF3C4869933BB3D373AEDC78AC0CE9967D9E702265F84BC68B3D23B0E1F411C7E68E6
CDF6F1605BF2978777EF21F47BA87D55C524317DEBAB2C9E9BD65067023FE1ABDC1120BF5486
6A4C7FD3D4D3A68B7822D3DDDB2ED58214B161282982C96003F3CCEBFA41A13EF3E4546CA840
69D668E90DB9985F1D7F03B117D567B03118C2C88A955A6054DC1053028404CA1D054D596A8D
E85DDEA64355C85D9087809540C40220BD0CBEDB0CEA3AF80E182633300AC7ED9690B2D70E2A
3CA5E277B1DC568BAAE26CE788BFAEFF0A584F6BCC0D819BB27FF66EDB08674679A39EBFE227
7B9169D3F36C62969A67CB0E7D99247AA85BBCE4C8DDF4223250962679C494D424D764755B2D
2DD66EB241D926B76C5772D6085E8E51430ABB78156D5809A68D46FA81AD28A89FB909880B99
D9B52BDB8CDFFAE0154E8689E8CBCC04FBAD712D67B2BE2373C8507B79B21B30359A6669F9E9
DD385505F1A589B2418558C2C229B743198E811B28FB7CC78320F5C24E2B365E530E41B75679
E203C35164DCC9E07F228AD470EF8AA5859025B62560F813C0B25F72B8F4325D4738695EED42
E02CE9A27E8BBE7289E4F09BCF30B0DE40CE29FBBAB8D65AD92FD6620D00411E5F3545294C63
97000B07382B048AB9488731B8CB47B74739D914E569F04C54D59077B8827AF265C8DB721897
1819C58624F40F945E0744A1ED592992CAEA1F7B3854FE184DA34F277019C052B8B3CEAF5CEA
7C45FF50205E93A9EDFE82EE33F136DABB124F8CBF10A57458A93307C5BB001FF37B29237EC6
B1B341865568766168C6572C55C7EAB03E236982543BA9F60CEA2854E531DACD25AAAD8279BB
3402E17D51557B1F65F8DFDEB84B251B3A522785F73B4EEC2651C5240CA115B18039D2C39569
23C92DDBF22CD78572856369EE81AE29B26E97D5CA3D3D0004057BF9DC328EA1AF8011F5F08B
830BC949367E64A051E7270BECC657743A6D860D5479A701BBE4C809A8B7F9FE042B95362C5B
7976B1AA9DF4B4CDA18E1CF7C47E71B8E84244CACBCE9AC1FF69F8EF9429592DC01BD037F6E7
FCB6EEDDDBD1A75E44EA088C1D292B1AC8942FF089EB927DDADE2F5AF3DA22057E16C7309217
D5BC45FCD00576568262B2289BA7E129ED87FA1A3196C04F7B5ABF82B72D7E0736F704E817D2
4DE4910584444449DB76A321EDE57F956C0B10B178193CA5FB1D8574F35E29D4EAF9A45E5454
864994913354C7646FF1D758DA802A5E912186A923CBE9C689540F833A375C058D61354AC5F7
4CE793E8BAB9B506A5A9702BE425F86224D004E35AB8060B2C0A8B7B549211C25DB36D46EF1D
D0CE263D6AE5A184F464D0087D6E6F1277ED9F5E7F93A9B74AEF3F5D38202A50A8912DEA75CD
1AECB6BFA4C87079CE9A1E30845B51C25D0B664A616A36508EABE37DA4D64ABB59B85453242D
006F357B174F86306C4E5E8C2B1B80E1CBF510AC7767B2769EA3B3C20CA9ACDEDDA95BAA3307
B895687A3F0DEA8BD1B18240A90905A02112FE3CF306F8B95D8D682FB1348B54213236F978D3
708B7480FDEE3E46DD584FAAB1BDB6908E45AFE310A49F73C4507353B219FB116492D7B96699
F48B106D5420E100997F59CA49C2F6D06661ECB6C626F236B819EEF2A71BA937022A92CFBB31
D943292E2331CF385CB2E80266A0C5520328D93DFA5837C96E7E2BA310AFFA57355AB2D51DB2
4BBF351810A19ACF31AB7B1CD5E55A477C185DE38001216224572D3F6C27F9CA8273ACFFF2F3
08B70A82F3812CB709AC3E5B9BC2D55A732ABCC68BD8D75F8D3368411980DFB3A94E17AD6AE1
DB659335F6220E677C58C8C9CBD3D9C394FFDA8BA0B00241452459FA7B6F028ADE9C9D04454A
09FA1EE605430366E332F5D5FF7DEFD519999C7B4475A9CC0BC82BD75150CFA80694CA83506A
145AC8F77FEA9D2F42FD6FC88A09F8DAA7883DC7B3FFDFEB71B17AB6126CBA131CC5490D7EAB
8C630E06A470C288AF655A14A8A089A61F98AEE330C390EAA19673DA8C65AD1756DFF44D36B5
E6175F110B284ED371585B7D99FEBEBAFEE61404238B957722B4670A6D7609D2E61C46AC7EB7
C9BFB447BD9B716041905F6D6CF321C248B9CBE11F3AEC45A34216BF0E7C637C817015EC00B6
1C5420F0117FCCEC5DCCFA8ED1C4E0AA02706BB2C2C7D05DEB703A240040C9E7EF930876402E
54C9F2A372242E09F0FD77885E467009DE558722ADF54BFDCC936D635D749649B582C063ED6E
9C8AFF9F6A7816D6090F1ACD293C7B6C5F5FF81843BDFE5F15B24B28F8BD3FC198A131023228
62E11C9DCE7F505135E758AF27B646838CBF32D839CE07A606B7D0DC0B9A5E725F920DA5B1B1
9BFEBA52AA630226BA308D349E0BA331369E24F60FF1EFAF25FC841FCC3C583E62BBF5D902F7
B090085D9F011420EF0A952E8EC1DCC51742AB3FB84F48F915C1E2801D383DAFC303C476F358
8C5528194DA58D971F57A8070CA8F4562F321D00DB9AD202B77AF30536E0C5F90AA30F074678
8FE54478B7B42F2BC39B6A39B21070244E6A4D3B38558C62567CFE37532082FC15666C17E869
A5B16BE4643ABEB87ED298ED4891DAB22E3261A6A2D9E0809E87F107EA5399185BE1A7FCE628
26659C7A87D236CA765F82E51171DB30F3D85AFF514E541EA02FBBAA82C5904BD21709F0C7DC
2CC2A8F97D648D7AD4887C570BB263D075AB92254CB45E84C8D74CCECEE3956B21D2E1E6BE69
09BA17189D28310B5CB39299463981280D46714DEF379C1942CDC2C950E5093F77354D2D28D2
8CCBB72A0CEDB0F3AABE28655F8F25C89E65079BDA875E4B5A6095C3F1362CDA3EDA6028D0DC
EE8973A81C676612AE2D9205013F6458AE3DE5CD93484EDFE36214CB261FD61F1EE5E539AD68
25DC619C70F252D11D6BC0DEABBE36A076B02FB93E2FE8DB3E91CB8527D3F9F24F9B609A0C47
07744BCD65B37C157DD0D95D8EFFBA95254D988F3B8659DD5CE8C6C2681906BD573C7A4789E0
59715DB1F83A4281145CA0AB674A36280EB63BA220EA372F90F93F667D86C4B078FF06B78BDA
74919C866D9AA46E89996BF4EB3E0ABD5A1F3CC59A9830AAD9FD9489D4C5489E6453DFD02992
5E145D88CA762ECACEF5BA4115D92FE70332080F171A0E22D89FBAD65B6245B0BA123534CE2F
F795E529306E0677F081043B7AB08557AD489A5A397ECECB79E025C3D54743A37112929E2C7D
0258E056FCD1B73A838783C007678809147B7EB37F7B04DEF0A7E6730FC438108EBDE88312AC
A149725CE351D7D0E6A83EBCC8518A24089E153C89F0E44094230ACCBFF0142EBECF5F77F601
8CCF43B967CB1888C141103066128C040941B620D9C97C0AF8FBEB8BA8A8D7E042463A331DD0
1285DF6A0534A31B09C716BF45A72418746A7316AF388EC5D83F1CD49845082305EF94E17E6C
51CBBA713DE3333BAA770ADBEB8B9179D9855C5F110C492E71DDAD0F1691C41E33A1F66F931F
EB6BBBA66A1ED6B318B2DA994003A73941B1D04AF31A5F5DA462695AC4F8605B0859928AE5F2
90578C4D0B88323556BC8CF18761CD6D8F5E2295995143C62437FB4619CF9FD0DDB3C19A067B
9A054948328218074632F6BB063932C9A7385C9C4A2F432E753899395D6A1FDB03823AD3FB4D
DD0D9D06E0928F7A9AFDAB46D2BA3D7B7809FC251378DEC6CA05988598015191F69008AAC0EF
3D782CBB5A9AAD6964019E887D4BA687C142D0C6E351F9925FB963493C5713530D2AFAB1E0BD
CC0452B5F4800390299F4F92F49961FBA558106FAFE20625FAE389A1B0B2C2AEF6A73C5516A1
18A6D6B7F7797D6C33E1BFBF870F5018E520D0C556943069CA4C0E186C54ECEE8CB19AF08D36
65B519CDB7E23737817F3A92D9545CBE3C2B011854601A93ECCA1A86C324D4262C819C184962
11FDDCE4CAFDE4667AA6EC77FD3EEFDC15E6DA7639452A6404A287DCFDF1B364CB423A072EEA
A2685E12A4837DD1418DE8A3F0504DC6092E53F9278358144635421CE91A0E65A413F8BE5F5B
53A705AE57A2E668F38D657A4D89C1138A4A16922698BDAEDDFB9AD52B22BDF25CFB56201219
70A31F97247574900565EE60F40DD390A121BD9B63BD59843FE088F8C4C154F2163108068E42
523F7D982C82358ED571BA0C66069DF8BFDC99696DBE739683515580E5761EEB00B1AA79C5F3
F381B00557DF7A1BD42213757E16CE47C3FCC6D0C09D2EE1C578A9167396A9D07672F5D18583
0FF0E3AE12C1C3CC46195C0962BAB12D2476A6C63418425A63CD66E59C1D19C56D2EEF8E7D69
45B5DD972910B9A4703838AC49007E9EAFAFCD3C827862866D63F7231C5EE450C5162A43C82B
CE915F94F351DEAF53F52867D55FE0BD1FADD0B0AFCEBECA316EB57E69034F70493410067F27
DD3A192A076B6315147DBFE2AA347FA39EEC1E3E2F1438FF2C98CF1E6EE89DAF4F6F06ECA4B3
20BDA45BFC75BA8636843CE0C707C3050B2E7914A383F4E7574AA1542D7B23D36CCB68429728
E30056CDDA9A764B2BEBAACF3B43107183304022512DB622DD21BB1AED97D9775B765DEB4434
2924811D68FE8A3C8418B30213773603FB456E6ED6A77067867A5AAAF1F3B9E7563F9F03188A
A841E86EEFE81434491063BD942E88A9C0ED99335A65DDB64D0EF2CB1A7EA8D3476C81A0DEEC
A7F22FBD5A879F025EDCF3A89016DCCD6EB5C2C18E190A956F3C44875E708F1E93A629B5041A
AD5583CB07A5F9E8F4FB53974AEE3C38303B41DA8A38AA8D758712A29054E5BBB8D6AE531025
EBDA558450F80AD2DC6F5B7D7CCCBD566CD68727714EBCDA235E7BCD4C8C509C8E95D248BC86
13408DE7C519F0410465D510BDE86DB4EC9480861AEB2E95E26467CCF181F457D45F4B90A0EB
9523D9371F938480FAB365DDDD435A937DEFC5B6DD3E9441259B887FE67219CFCDAD06744BAE
758B478E229B1FB48D449D50E9622419648F35C2BC431D487C5E569DD145C75D2DDE195E9A82
0DBEBB45ED454DF06CD96A261E9088998E5DADBE8C8D84C9385186EAB456B30BEF82253C1B06
388F57170D4BACA603E6922EF30EEDB860CE1EBF2A6A201424FD8A214311131E4595648FB0C6
0E00BCABB308F58CEA45FED02E21FB229C2226468128F4C0CFEC2C5474292A14B277D4058521
D154B0E29996ED129111348B218FF7785E72CBEC3EB26C9B3551A466E388C7C193C88A044CF3
3FB6ECACD4E84BEA61A9F0724A72B8BE108979663DDF2A211CE350D63A08EF0B9670D1D273EB
6C5E74C8B12C071FD54A9890567CDCAC4D023CCDA7EA41D03A58C392C7D7A399BDAFDB971770
B96E62C2FC5A08BA9D128987999786486C28F1BEAA874D0B185FA6FD73C38576FE35C10582B0
1D530210EBD8E77BD4B7FAEDD90AE401976B09090574DF9C0F631FE127BBB939B858F31233F1
C08391814DE697051A9DADE4B64ED316D8E1AF739AE155E8E35CBDDA945E38B85CB726B21B9C
A65F06E43FAA040F20131393B107EFC2EEF1E22AE538B9A44B6009F314570BD06F63F36C352A
A945B6F268F8EFCCE665D2FDFA3B0ACF6B0A36F3866071BB0A1B66EFA73F187BAD9648D447C9
C4FB88BE1F2C07AA0A48FA9399D66F20741063D105A7D3EA4A623579EAF01433CB954500379F
2B1F0F82AE512E95AFDD68F99D29A659756A22088422DBCBAA1D878BE8F2B7D12C48188FDCE9
3447C576BA66E3CDF18761B00D12702696995A42AA41B447E6BFF46082C5FDBB7753B5583F08
9317738CFBF54988D6A6AA6804BF600FC000C8F8CFFE56A9619C21CC885172A3FBD5C43BD8BF
57C1935EFA8983CABBB06F48159CF469698539D39A2A00B04FBAFBEA60E8F44542FCA9A857B1
D36D6C3CB17F2B2A09D080CDAC287BB3EEE507DEE6F40A6D72AF988291B1E4D6A969F2B6CDAB
86CC4D31BBC3C5C605E3BFA0B97D085FE68D0516A0F7AB55C59B7ACF73EE5C495B8EECD3FF0B
DF91675E4F802ADEB778118CDDDAFC767BF3C6B8D796042C0C5FF1C455BF672BA367434F03B2
00644E51512AC3E13D3476EC5A03F948BA9A91AE31A5C2EB6BBE1AD828DC7695CB2FF10D9153
7ECE2647EFE6E6F277E803573D8971D7A97C79928F4BE32669363AD28DCEB89BE0353924A74C
0D7C712C1367086FDE0AE6BDD6856A5C424993E03DD36BEEC0512058DDA60AABD155D76CC950
DE2AC25DC1B4BA17B7FEF6C8C832E01AA330B13E566F44104B1550CAF33D6D3CBABBF6F19539
2E38B0620A9533B9DA6276313F0ED9043A123B0EE5869125ED967E281FD21984D255DAABAD72
0D54D630181C9622C70E56CCB5BB8672AF44915687D23697EC63D48D7C5B130C3A38B8774CBB
92B873035460D5FA93446770C3DD743129EB47EF0571098ACFAE284F4A9A72BC602FFBE0E0CC
6AAD716A4C6FDD5664DB9668990D34536852463068C51BC612FCCA90D78E299DDDD8504E5649
166D0972D7D03CAD4593D34FA2FFC5FA60FF52F2DC5DD190E84BE777BE26A205F96FD21B10A4
935ED92E290D8162AAE56A4D2AD6CB325D9C43BF195741597160F9EB7BBF87BFAD4E199F13DD
47936B65D9423811E67F1961DCC1403EA94C9B96CC8D244FB5AC451D4FB6AF69D8C0A1338F9F
ECA29CF78C650FE0661BE04CF131126B2C8C2824E85B62C1CA66A2F698416B574F1C922EBF8D
04DB079229254812D359052A65EAF871375CAD3567C4BD1857C4784117AA1B05D392DFF3ABCF
CC6CC8CDEE8FA8AB2F6EABE8259B018E082AA64F7F8F8CD072511873C6BAAE3569AAE931EFFA
B6C103F9CADB725A969DE0E3230E458520128B9C07DA520FEEEB35879C38D887CA82AC039F77
FEA1130E6D6EF48418FCCFC9BEC4FEFDF43B8EC8695152651665376DBB0DBF9831B37F121D1A
A5D92AD17B63E54344F80D583838855E58A15DC8A9E691ED515B471968BD82F4EEC31871BE25
C8C19CCD9110DA066F16583E31ED164953E7588A0B9164365A4381201F67BFB30BB1B693B0A4
C9991A7D95A33805E0F1C8FC2813E79C08908A0030F9E6471527B5C08B99CEFFEDCA26040ACB
4B4D4304090CEB3936794E54F2354242B731F3B29979ED65F8084D960D85DF4C0993EA113F36
F2F304B9A4F2111619F52CAE0FD71353186806465E3E43ED3DE0846481881C077895361D47EB
DC7FE2DF4B1C349A5D19C2D6F22D5C03F8C15D3B3BE3898092B223CD1D047B5143DA355A241E
6A95AA4017DCA923FD27D920A89017413FE28F730C827C26DEACF1A53EB3253D93C87B3A1192
F9BBC6CD79CAB292A5C5E44F8236F55938C362B5FE4AE21A162B853DB8A5C59DEC72ECB203F7
F225FCDF0332B6557E5AE02657D0DE135B13B91BEB8772DFC542E47109E77807C855863B787B
F9553EE67D371E85606F123027DF3BFDD597478F8A105AFC9E477820C118B92221FF8C5511AF
E2C70235EB032FB6FDB6B594CE9F1AD1AA8A4D687BCB1BAAE64A7378B4F4C0E9094E7C430AE5
D1AF95791778B932E71A090F76F398BB26EC6C9640C9AC8A3AC2A77162A64A30F40B2709CEF4
3E539EF36D9A5BC6A3C0F65588354109BA77B7AB661ACE4AFA719B82B33C443AB58CD0327480
1C1F4E083632F158B7E06CD2285CE9088F075F4C75D7B9426F419A971DC110AB7EBCBDB52264
C7E9F0FD964FB35706CBBC5733A5FE5B9872DFA929FEC3C6838AC1204F340066E4EB1AD8241B
F0C336B9218AAB32A9F611A415A8A84C800C5FA00D74C6CCCB655DDA22BF421C98205483BD15
72100A517275D475EB7D3268FE0F2096E3D9F8FB6038EE0E22F84D8023C5F1F44ED89CDC515B
AEE7350F70F08E8900C9C4F7A9D7FEAFD6F42EC5A41482F52E4572D0CEA68FE753BF0E48FFB6
730BF62949EF245C94FBFAFFC9ABD3B721F923DDEBCAA0394B1CD80747A2D17C01A2AC0B0F74
CC758634523D544157CB3AE6DFD035271DEED3ECB805A8966DFC2C7812E6852B938713CABD01
A17DB0C12B6BA72180B35696D2F27B3789CA8F93718565B3B856C9E415D2E09184C721C8C0A6
92F180612FDFD7384FD949E33C29C4C37BED66D33166356E3E80AFA379F36AB4EA937EDD0AFC
3E6C90F5C92C686F122DF3B5FD6169B9C1B73AA3C254C0EBBABEF406A31E9A587BA564FE5780
710F5E2AB38DA749B4361A42E3DB03AE3038B34EC856983BC7AD8769C3E314D31FE740640309
BD5B891CFEF8DAA80F72A6BC44A2A865481778614D372B0437CB06F2003A0D2FDD5766616505
3868BAB972F37702C08A00E042F7DD3F2CB39BF500278821B02A4C0E29FF5FD9870CFFDF612D
345CFEC6E32E2CDB29D8DF55E996E5E56D379C657EE723B9B4249264099731F4A535C0ED4336
6B07EBADCAC45967A15E1DCE43B63D8EFD9E7EBE2004C70B30DDDFBA1590DA47ADFE6D37D41D
BEEC75234E4ABD82F2071661CA5050C126032FCAEE499E5356777A2EAEEDA22D743A63D2A6D8
18152E9FFE7C76DB751FAC6528AD90E833F39724C5EE10D2298DC723FB01C543A7A0E1FC99C7
15E9D46626D4CDAFEFB3D1D6B70EA30BE6F46458531031D1D0BE693A50D6D9E83A6C40D91AA3
D68A607CF3CC62C4CB085A2882A8DC8FFEC722CC997D5D62A38CF6D8502759919CEF2D2DC369
0C0190D2CDDDBB157FD03EBF007277E9D57277A8DCD2F261D5B45B6A48EE3065E41334C96845
21D32134BE51B7D9246C1C9236E5A3DA97EFE56E04497B4A30A914B664ACEEB849AD9D8732A0
93863C724BEF3CEC4ED58C876F257708A8D43911FAC80608482C2CCD945C0BFEE09A51FF1356
D5CC4243F1EDD2EADF99F86EB4AD822ADBC25F04067FC7B458B9C187F3C6FA0E0CB97D7FA008
F74BE02E55B9A8F102798E0CFAF28D673FFF0003E1940FFD6D4E1C2A3AEB4DF1D5A86F6A3DC0
8CE29898593AAA0DF3261F823372FFABF3964897A4CF8732C5A14D3797093BCAE6F1040D9DED
BFEEE235F122A2CFA348509849EECC61B4FFA8AFB5BC44CFD289D13CDA71FF3D7A64B5D6F7E3
E2018988E03A0DC5A416B2AADF17750E53E61A74BE0C89D72A21E023CF37793FBA70B5B24759
A802F25C8295282A70161AA2739B8A28AD357DB7710EA7D40C6F0C6FDCADBA6A021B10DD6627
7EC480F7CAA82FB7C5206065A604BEF0EFF30EFE7369F7C7A7E296A6DE9EC5B01B6B7F0B2927
F46CE627721F1045EE4844ABFB6DC45419909575A2B92A033283641FBFE9436FCE6579998FFA
9370D66280D630249E9BDE6F118DC4406159F721C2F6A5DDC631018F30B1577E861373A1884F
2CB7530466FD76F594BB43C2DE823059A5169889D0DD08D5907595579DB1E5E842183E890646
6DB5B27B5B4D1FB855661D1F606574233DEB4340630BE5DA3C4591B203FEC93C2A55B89BF166
7C064A67A7C42AA3C78F468E0ECC3DA178A1AFD41F3846DDF4634D8DA561F1C389CD51E7B2BC
2D6C0C48B7871D96F932C9238D452A6C391225392C88D3D4319413C5C9A6FF283919A7074AC1
F62CFC778BE51D9A5A4657DEDFBC436657F0D044E8DD5A78C236BD8BF98E4F64AF63C2D34420
B78CDB8646D204370A30CD7AB167F8253A4B660A9B1F46DE808C35D6BDF083503159C6DF2D0B
AC725F3AA5E9FC7B9B7615804F4CCEBBD778FC9D408297302124C102414FC65B1D0EDE6F8E1A
DCBE5AD89BDFA6C11DD37B20ED0CFFCFBFE00195AB3F531E7DBCC773CDAA6F44BDDA376149D1
F97D5345BEC3276D541017FBF36FBCDEECE88DDD6BC5C4733B48C6614E9E9CE9366E469CA569
15620CBF2F43DC9547E75C1731F12DC95625DA64058E4EA6F91F0F7560C11A86BB61B216ECA4
229F8358FD63E7EC85F63789F4E6BA949CAB8F8F0F21398368984863A21C2EE29659E6E76AF2
E09AF6EC3F194659627AB5DD40464691B4DADD8E3D4CFBB6D71332CB7A1D666EB8538060090E
C0D1451B9A90829F82913407D711822CC66E34748915856FE50D44EAF1FA57F87548D2B9CB3E
8C1909E821719A1958EDB9CC2584DE4A32472A0263910C91E6DF15400F3554F04357FFB550E4
4B31B2274DCB58E68B89F2C78DBA924D19A3CDB6F1357558D65739A29DDAD51970FDDF77CEE3
33591F65D52636D2273807570CEFCB2BF79266F4BE6AB9B9140F5DC9AE8D7D78C590BD3B098C
CE53DF66106A275A65D449DA0E7A1675C226F452A51D51506BEC6AA90B0B66FD414BFCDBEE1C
1AA85760CA24F15D739E3D691F57F420E643FDCE40A8AB9780091D0187CA5605281D82C5602A
95829C91C4314E38ECC0DF12A9600C3D1519189C57D8E1C25FC745CD391971BED481B3C9CD4E
FD854C8082754CB11990C5C187E14D5E799ACFDD5629067B6C415019894218E473F937BC5CD1
FD4E828D323882FB907705E1F5F363E4F2EF2175CDA6869DF95942422B5853C0AC605C2AA9DF
86BF4F740FB1353AB59CA4C7A23382616DD1C7D997898C2ECF1CEAE06E82DD297901AB6E61CB
FEADF93E17CB4749401CEE43A39C5BD79F8D4191493A35C9D646DF2CB4CBCFC3033849788168
F98638F1533660FEC5F37BF19B3D195004B36422EEC2281E4DA5F756047BE7F6DC5EA26ED9D5
2272628F12F3E7434CB7F33E3C64DBFA1AC7AA8BE071C359C221D0FF882A06668CE6875BB352
A5C611A52AE12A4696AC47C66C96E3392617DD3AC8D9E7393393383BE8ACC0E34C84FCC819B5
19A689A83EAA4D8EBB26E20B2F0E3CB403C8CD60B6AC4C5D3EF596BBBC91ADB798E49A115D64
8C8F84A7E7B06813C25F483E6923656E924AB199A28B797F6BD46C39FA372E5AA2C8F58631FC
E6F28DE01A505028C26B4DD3324E6F103AF57ED0F5B6AE3E1C754EEBC54A4E5F3A087C9FAAC7
46A84E945EC224039ABAF9C6B71E3DB0C06FB40495189B2839579CC1D94AD59B640EEF83F14F
9C604DB3BD365D53D688F129E38D429B8E92089F064B584870F7FD66CC91CA75E0807BDCBA38
F72E7CEE33CF2810647622ABFB014A9A1FD4E3A425488A81EBC46FD10DC531F7161CFDD91B97
819232702010A371CEB74D102A5BC5A65D0894C560014BF12AAD96247A394D752FCE588829C0
64D197A635C92C7F97E3EF652872F11C6D35082E4CF4074CE8E4DE1E51EE88D9CFA6EEEAE363
3FD2B98E8314FD02740D8FE795579DFEF93B492FEEF569FEB5B38CCBB72E10A4673FE14A3989
C9B84D8E370480F54FDA92EDF7D7D212CDE40BDA7901157AF5C085FA91139A2C9D4D0204F6AA
2767231A8AC80C098B5FAF69A995F9D3760E649B0ADA67326E936ED6D26A5B00D0774F0BDB3F
978A697886B57D58719A438D7F12EF7B845C85CF6649A40DC275980F7D55DA3819397C7E169B
77DA862B1E2EF21A0D551F94ED290A548D228CD4200D69E1A10F5918AB0B25B5C43DB78BDCBB
AFFA3E9950914CB0B51806FDDA7E624C69C0DF76BFE44B57FDFEE6D18CB617D721973222B59F
1B82346BE7375694DCE49E61350AFBB947175013CA4FF08A25B6B242E36D6FC9D1452E9E3C5C
4120A3F60F72E9A39BA0C5691EAA48172195EE49E4E758873190C080BA5702FECD6D50B7DE73
BDB977E398A48E5761D90A00D012F3B30FC256750A06ED9CCEAA32904E7AC5350F59C997057B
92C9D44D831570A98DCF072EC9B4B46FE4BDD1BECB4F0858E0D9B640D6D15CF2F02FEE5BBA7A
5F9DD6F1FF96A72D88E71B4E68F583706FF44982E0735B4C9E51592246D38A735BF80B09C0EC
5F43DC92B39B05B148C05A32E21DECBBD167FD52E1FB09AC61181F66331EFDA9FAA276E144AC
4F6E45760DF12D6945AFB5191A51723300EA98735AED887532CC3C6F0B61C4AEACDA02C19311
BB9CF48408B02E896B8A562CAF1AC7B4AD3C3DD43C201EAE95ACF3B2804ACC066D422EA006D0
5BBA4D9A93DD35A76F1F2970CF2FFC8A91EBA9FE8EBB28E54E3BBC1CA21FED042C0858B6DA24
B907E3C6B78C2CF2B3AFA44889DE12B1A5084697C6B2521083AA4998AB1441EA5FDEE3BD7203
19D583954B7BDCD1D4B4B82C9A24B5FD5EC56A78306F8140DDDA2EBFD907E31F6A6223E41FD5
4D2AB3DC87A2CC2203D649D99A73524B5FBBBAB176E86C3FA5F7EBD0A7DEDA59331C7F7254C5
E0BC03DD049B4EC682A3D570489E416A6406375658C13751DD118379270F39F2C0DC0B5E71A6
29F11C1CB5F07C57DAE50B6993A495A7404125A173F613A44A36B5936F565A2C0AFCB9C61599
E03104E3798CE304C809A99FE17001D54C4FACF96435C293035A4BCFAF915D649AC83FB83011
55A05B7A29120ACE7DF046C649A12BB7AE1A557E181C8E2912231FD12A80D1C673DEABF66CFF
F3E60009F80492803A4D3422A774B4D9AE64407FC34A3C5EBC0DA2789DA876C2FCC3ABD525BA
DBC94D3090E9BCB299D9F3E800ABA1592C5A6DAE8E59D8E85301B74D6F791A6A542BDE41897C
0FC0AE9727F555FA666A1A6561C3053ECC41CD2C6D72EE34119F159E9CEAE995336505B0BB23
55927ADE331739687D1CA9FB1C131BF1EEF4A7230AA1E78B7532F820DB4C70DA8418BC73BCD8
16401C60975E61B7F890BFE8B070066C29B221492A093FF58867310048F04C0BEAB20D1B49CE
7B4014439C8A9FF6BA35CF1E1D4013BDACB599ABD6DC63B3D125C01080176B227B46A648A151
4ABCC4A6CBD408AB8A26DD2E0921954C7B7FF2B9585CF8613E31AF65455BBFFC7AE33AEA835C
6B43CAD96A54C42E086CBD3653035649BD0CC04D09FB6D15301D35599652E8C571709538E3B2
E1EA0F7083A62338DFA6738D7D8DFE3D9171BD2E4DA3A2B336ACC1634154FEB8612B4511B02A
9095627532F6A3C8CB8B63D2812E11E83EC1F3EE7C01C0F28B47641A43BFECC2C39188CD4B34
EA3AE9220A4531AB3A9CE8C36492E93AFF27BBDA861F0707A6B4219C69E33EC3587009F27AD5
B2ACE376982B1D3219A9176C167A534D0E466F1FB5EFC98B46E61BDD0340A49C41B7AEC3069E
9CF9C9165A2265C5F28219D8B0BC1172CC49DC1F247C8EBC4BD8342D85E5DAD08B25DF0FADFE
D326541CBD0AA5DFDDC2A555E1E98491F08B007F9801C9573DC624C8049F10F9CB306D857ED1
0AF0AEE3B35C6D243BEB2961BE7FD5006B8FDCA0DF3C5CD7270920AB111E975F39660A16136A
C58EE598D144ED51CC04023E39063E60D905E13C8A98824F05E55B7882D6A3B724D971AC6727
2F925377CA51A142DCE660AB7E1F3B2B141745A1FD84698219FD99A69DC2FC4F321AF260EAFF
5F4CE30B3E354A8F91DF442309937C82F251A507963D1F788F62FC24EBCB41BE71AC6D66BA09
7143D147CCD3EF7DDA46265BE94963DD1EDA9C43DF41474E57F282A1DE20496FE2B9374B0F02
E0503DAFD5A3C66EF4F47CEED6C32CB790767DB7D4DF7B0E3F59EBB579188EBA888D6A498651
98CD5CE628329E25E2C027945A2C2C1C96FD5CD8CA02AE363A07DD87F414B1DD7F16DAEF78F4
4F65DBA6DD21D2D261F204E656F659C6948CDC049B27BA9BCB97B8C8DEC3B8C66621754AC517
7A11C4B0669FC94274E3F8176E3274A9B9AD8BDD769878FF5E6EF592D523076B78EE2EAC1034
2812CD3123A0AEE6F3302699EB4228A10A62E3BEF8A942B8A4B8C076E2CE4654285D2273449F
E7D2BAD341990E24AE8DEB51FD4EF643BE9EC07D6784055DC5ED65434CDC8FA9C0B8746BAF86
3EA492F09D856CDCEF84CC47E2C58E7D8D1DF5BC96E9010CD6C36AC22C37C4C25FFFF5905CF6
02E97CA87BBAC814B7718C344CBB1F5799CB5F419221494B4DA2E3E3FA4916BC841B586B4010
2DB1B62C755EE2EC0AE264F769EC9742D48A8C8480D9137FE5FF06F7336808A6308AAA9CA309
232A5CC76F37431197174C8AE0AB3479ECC416F4541127C33B108C195968F04559B0AD764A7F
BD919D80D7A0C57DD9C82E485D29D9EA702348AD472341C6319C50A06BFFA5D6494703DB39C3
06459AFA396D366F05CAAEA1A9E516F113E8AB79C3E5F3CD8A5CEA833FB46E38B23DB75F4FCC
8E377E0298C5930DAE4A96A19EF175214EB392AAD221D6A820E50D65A696B1371F4ADE78CAB9
3956DE299FE165DAAC89C456F3D84958D14D13716AE5C841EA06B76EBC61CDD4CBDFD7332C95
46532D84E2F0437900510B63DB2A5947FF52B9E7FAD9E0F940E39CD3D4DB0FB6374CA3F700F1
457DE57741E5F4B852F34E48622B6D535E71807B45A8F1F8A76A367BB2EA832CACA62FA2FEBD
A8D8BE62C5BAD76EA978DB6D5D085A511EEA6E8D25B38E3F66E33D90A0A076F0BC74C4B042AB
A82A14067AE14634006CF8754EB3C62727B47DD0F0A8768515E4F8F33400EA68A9A9F4CA66F8
3946DBAF3AE56FE575010246A74E3834CE962060393154D74DA8EEEB93BCDF20AD1E95F47DD2
71A5EF0576C7DDD2EBBADE6C54EA936D8B31E69F1A51A79A73D6AE24C15111AEE860E7EDB936
2E53B2A3876642828EAA55C7EA8E9F656E43DBE02536E476BA7B97CFAA96AF75B087B57DE35B
C1CBFB04CE17F02844D5A06F34DE233562F26EA5854F2DA4B35ABD279A56B35B19DC32EB9C7B
4EDA9F3E4CC0773606A5ACD4B8F329F55F7CC32229014BE7D5E753FA835A2EB7F7CC7CC9BFA3
DC2D8A9BD3217FD41E301C039ABB3054422A6E387E925B872024B83B80E6E32C99C5380B22CC
27939212DBD2C96B8D4E2E04E5B64ED316D8E1AF73AB79645B62F15D391EF24504B17730F801
C36F2C0769CE5E87061133F92017EDDA1C23F750263A92C8C2888AE93794434C63512E0B2574
D9ADE9EAF6008D4BAE6D1EE3A827758B220FDB4914F21548D17AC5E874C971237C7F00F1F3C3
2E5B6E01A01335488AC3BB4810DCD0614191427FBF06AC70E3263E4265141A1469050E2FE51D
2A960996421B854312D064A57C3ED3984CF967ED27A9049121F7412F2A917B97A9202A0505B7
E937898A2EDC9A95F93605BCE7B5800B580B827AB2618F74F1C463CB7B2A0741AEF43ACEBFBC
C80B52F894806C9D06A2A0EA8BABECDF11FC1FFEE05A63335DE1E157ABC8512466C2CBB9F723
66C04CAF0B35AD8A7CF8F5E44FFDDDB96262C7EFCB360964DF89426A4DEB87EE98EE0C4D8231
A0F0AF9A6F9111DA7C2B54A3D39EC87BAE4DE6204AAE11FDC482B54EA52395DE7806B4A24963
841798A9A4797CC6747A2785EB2B5BF77E37143B2E5822F128411553558F6025F2D7EB0DD868
4E12154C58061E18C9A86609C75C2A21B81EBE674D0AAAFF51D480CD547B163A21A7EDE467B2
FF028A87D64B8BD099B927981F2FA76FDC734E53B309653ED6263CD1782E58610BE79BEAB7CB
BB7EDB8AAB8DE98D7342AAFF40795A4E42484259138D3C3606AEF64A53DC66455E46253E7F12
B810AC37EC63DE295D06125E82FA5FF521747E7496C5686A1AAA0790E65AEE056E428573541E
3F7D4B7DC3718367C58A537837D783CE36280C8AB3D2CEC3D9209548CF52CF304589CC3906C8
3AC07445479F808453BC1C8154D0C7094F450EFF201DB7593E2EFAAA3AC8D9C654129FAD3CA2
F9C492C8A76E71EA463EB12E4D3C0F337436DB58F8B49423CC9EFAE716558B90A53FDB3C2063
FDC4EC954E99DE2476A064899A2D6A16EF402585F3167F9328477784F5D78BBA428D2220DC37
5BF0C567BEAE7BF7D27CDDC9CA734D5FF5764606600CFA03915CF7A937BEB1482EAB2DA65F91
374A2B72776E9D233C23FD273BFB574D4D19E54108FE4D671FC51AEC63E43DFB3BDAA338A3E0
C19377B11A556CA86ED0E181461DC968C7E38CC9A5551CFBF08E1019DDC3893495D0C7363713
1F7E7CCBF59BE7CD5A64F607A18CD1D63E5C360E0B4EC28D1ABC9207EC24D6559947750453B9
672BDE83F0232AAB73D96D032BD35A6B1DC37D38DDE2B1BD884DDA95093D064B0E691C8A0613
BF42462F524DCBA9AADF99B03B78B8B9E83E37443DC92C9571743128D1A7DD9D75B9A7C67383
CAE368A2CEC27D9DCD3504E23758204C079A8944ABB055038976602C78D4F6EEA23A55B7A7C1
AF4ABB1849D31E79662DA726914ABB987D234E50D33F1B77557BC87261EE9840A814DFC5C4C5
E0E5895A4A142E8C21DEFB15F99FBDA4ADB6956795809618A84A313834E9E349D33A593EE7DA
7462288EDA60840C549C6AF69AD2FE75413917D535C1877A829079B4C0573E0D7417B543BF0A
5724AFD998527F069467DCFBEF01626CB8B459EE7B2D9A43954FDCEBA49FA0DBEDBCEC5599C6
913703FE4EB3D67A0825009E1DEF3A5ADEA6151F1B40D8DF8258F4327B77A31F11079C0B8E92
6CAF334608370EE8A08BFAAE137769ECAA18216F78B681A0DF741BB2805E3308F3E16BB1D2FF
56D18694A64B31029D4A6D36469729FBEC5B0BBEB70090E7F70AD2E7947E4F61E7EC67CFD4BC
E9B69A17595672317D878C1D0B2C9E1DBA278901E33E16D59F60B06DB842DE616A92C01BC781
65538702CDF4990721BCDCCEABED42772B332AABCE0824FE01376BA6642AFF89E7A2350818FA
1D5E61E11E587322769FEDE442D6F818EE44738290A8FCDC2CBB5B4DF30FDBF3B6B398BA13D4
ED8AC53465D27E4081CE5F85423AE571C41BD2EA078A7D54B6B670F3F5EFDA7CA04768D09CC0
D6246D1548CF376F47F3EA9C8EC42816814FA16147589A2D3DAD7D4DACB8895E025CD60B2B02
FD686281128D75DC16A87B4E08CAE59E83A9B4561AB090B4A7D0E2B531D5FBE628D1991DE771
7A578942C2267899726E65C612119862349651184EA01A551803D0368020F07B01CFBBC126C1
42E2738E70C1F788F7F21B0E8B1B4AAA6ACF5C9F0A37C28AEAD2FB5EFC19BCCD9A29747AC908
00D7567343FF3FD311915E940A71398DB46356200BACD8C99E78A8DB51E6407256A013D78CB6
D103CD10CAB4EECF7DEC00FD78230381A7231D9094FFB193151E3FAAC1F111A239BCBBBC09C7
8140183C3FEBD0454C4C246131706415219ADC9366EED44A4045E1536C5A62CF469B625DC446
46639EE98B1F5BB641957B0E6724BDF90C827920B1F6806172393FC01703A336E865DFE19111
4AF9EC2A3CA0D004E39F0D88C533F59C11876501DD3B87205D0F03079987DC01FA7D7B52E755
1906BDC1CE9032D7BF1C5243F84DC4D1A6F29699AA497CF9F409DFF33F625082B4A788D1F552
84AB3F9ACDFBC66C61529C52C8545D8B3392DFE506E4BEEA71F4580835D1901FDE3270CEA074
736901177CD019C925A87980BF23670A876BFFB94473391B5F599BF6F14DB203C0694E0310DF
2D64F17F68F801454F7990C573D743796711C0A172908E1483DDD79413D2BBB6905704CFF037
D08149B3472A2A5A756F06735BC87A595367CB91BA9E97D0F275210048D79411A19E0C5CC85C
2949B48B0E6F09AC2336807A5A2337A72984D24E5D68FC0DF2E809ED7CCD17DF062327B1ECC4
7368A63A6E0E3CE898FBF8958AFCB0433E8A395E0FF76885F9DF4A588939FB40362450BE6629
3E5D8D4D218D0C0D1011E1F569A4C00EE81F199E5955F5AFF80C1DA8388FD407F03E4D208736
E93F2B651A3FD725919E2B603A03E91700CF66BE4BBD46E8081A5C5F1470FA1379E09802BF4B
E4A57BDB39F02F68C813CF1D3D69FB798542D354085C3BB1365E184607DC1A60C1D342C94322
EE8F96FCCF9285576F4F47CE11A1786A2C9E817B90EB43DF586638B5C49F5641E9FEF2423242
7D5B0F423DCB97D77611CDE844B60E89463EE2135C2D34CFAF1DA80BC1A6CBF46E5B8ADF7C51
2EE3E90094A92D564DADBF07A83323ACF2050BB1994F391504A10D67B4B32DB4ABD8CEF70AB9
D1BC94916D5EF2A997E3755FCE257E850AF0901AD8FD89B7DB3815D16552C2333BC4A1A73261
955F3C842CDF9F8DE9C8BF4BAB2FE4F2B6EB650BB88C0392FFFD9D33A77BE1BBA11EDB6BCE33
6AFD614A986F539D4AB9097917A598ACDC341ECBDB2FAD7448EED3BFB44BF03F18D4570D5DBB
9899FB3DF18B375C802583DCEA90AC383E4487835BDB7DAA9370CED3FDE2A702BA67439763F8
1BD0F49A22811915C4009F95875F34622BB1DBC254419E1E36C636BC321A3C1F765DDE7429DE
A1500B7257F490B53C1A65BF55D958D02C06E6DF8BE72E9DE0747BB813857F8884F538184312
B7A0C449BB950E2C7790FF4B18B679014F030337F0ADC5EADD12F7688B02909CD10131B7F04B
888B6B40916F416DF9253B4308EDEFD9B02F1AEC8EA020B229125EE05F2103A84F118960075D
F1B41BDA01D777861CC7FEB450285540E80AFCCAF8E0BDFDDAB31EC44E5D25C383A26BE62E1D
4129E163D98D2C969185A1E21FDA40F61DD59CDEBF56A1A5601CE728189AFA62CCF3EFB28E94
A4566A1FF654A9C7C34B7C34D7C631D66BAA48EBE51A46FCC96310D319D3EA1BB69B14D005AF
738FB1E207BE3FF9B56D3E0807E8C7BC4E4E297230823848FAABE55016634E57512859B84C47
60D9E09D2099F8627118EF4DC5F124FDF741CDBF372CC640CFA91CF7BF068F2D7E7F16D57C31
64763BB0D99DF51470339F02B8933F27F0F64FF682AC8EDEC3F3B0435104536053ACC5C0FF62
061F8C9EEB713DBCB5B5DF04D94F99F314501DFE6C4314460839F894CC5CBF876E4EDF6935B3
B2E2BB571025F15123D58A0B2B4D5D3C26A128E3AE5B67CCDD884C507A5A37FD6FD8F6759F9D
927AFD8A82B0AA78498CE099F8E70BB1B088BD8FE90BEC704F8E84E8E156E960BE3C6CBCA1BF
33F6A1BBC1AD45CCE5CFDFAA5D56EC35F420B591C657C63B5851A995B267BF56093462A88A18
1106D3C5D122B6844E8702B80C7F9B97CB8583A1753C2686877F554131C9BE24E74955905113
234EF83DDCF29C246FF7004416B7F85E9A91B605CFAE369170285C613633589F724A2BB82A80
5F3ED5B310A19056CAF97F62D620F03069F609132600863D64C726C983B337FF09478F8FF639
898E0B3DCAF84D0C6FE29BDAABFCB1B63564769BECF6D5DD92A288034C052DB463952D25E153
9CDB26646B8C5CAF445C1990D386C85704F761DDEED3117C2AA3702D42C3ADCF9BC2AFB14B20
C5201B34EA549F7B858B55AD4D6085EDB31E652EE6291CF2FEEB3204D5E3A66E31799264BC9C
565F056E0E2F26B23764021A33FA81347C3AE791AE8D35AEC41DCD8924593635E28DAA5A037A
C4846B00CE5878E34EECFEEC89A549AA4D03B3C0034C54646001226425FB1B73BB21EB832A2A
E25FD4F9F1A36725F318F52E16E5B781319D8FAF6D57B0509CA55C40FAF8C59852523803B987
21E5EF32608501F2D9A64F92B8A0CD2F12F885B6351CB782DBC599EED616D456ED101006981C
7B0AFA4C83B967AEC96C93F8A5E4ED3E6BBD9061A3C10231C2D1E567917F62656A5EA3457857
7CCED18CD5EE1FA0B3F7DD15B29DC1E41471C1713961D3C9B664A904B88AA087660296240CFB
ED1577B0CDE9A4EE6B7A7373AFA82C3E06B2DD6FFFEFFF926C65325D289740F1996E3A214247
CC284A545AC6C3D38F628333AC0FFD19AD52D2348CA838B36442D69B296B80E600BAE632E3F0
58DB43E4110771944CACA99066DDCC7DB8CB31BF1BAC473086EA0FEB680E49DDEB960D0AEE05
4DB2ADC7BAC86CAAAAC08F8C90862DE1F87105C123F7573AFE6933ADF38F301AF50FD21FB5DC
72272968E5CB0E7CBAD45CD8449BD7AD1A9CB5EE80A94C41AD389E6798D553A741A629F37315
DB92E2499B47395F36429227E274D97A34853D2CCF16D37CADA20BD11E7EFC181CA0042E22BF
041CD548A50E597C02208914D573AF85482DF6D9C164BB48E55DABFDB38BD5451EF305E1CAD3
22AFA81444886B4A3F947CB151419AB9023026C3BDEF10546F9ABE56700E4AC467E856FF1FA1
68210D585C577BED273ACB076B430AE24B39E73B6DAB1A049DFDA192F6C634610151B414AC48
1E8390576FBD0E3F1BE2B2AF9ADF730A1861D46CE03A29897617ACF655FF494C7837FB85B1B9
346D74C756A1ABCECD476631501211EBAC6589C81549411BF365575BEC7F209E670FEF01C008
0ABD2B852C4BCFA42B0C4AB90FDF99E3DE19562313E8AAD697BE25BCA2BA9E860D9C9702108E
80DD0701A488663FAF8B2150D768381FACF398873CD9B46CD93C9BEA2D576CABDD91BF0E3CF8
06369BD4C3E9DFE0617087EB033D2064806110A056B151C15F895B6C9AC6183F17DAC941F106
0E6D1276A0CED4D17E844BC6A25873C4FF83F1B5A55BD3EBF6E5659AFA0823700B6131B99B9A
92AF31E6804E0E5D88524A546564670FA27A6BD3C0FDB650BC77E1D687D2E9B11D77A56D0441
40A0E38C9AB469F6A9597D2FD97185C8626BEC1183F16411C11A1936DDB94F0EB86EA0342C48
D9738FD5D1DCFB9B2451DB44BC63C5E50C1D5F67F05D5F68690F505F1FD09A2605B325B840C8
FE97E1CAF542868F65BBECBEC7171D689A0F8FAD457C605FA5B14429996701648EA16F0F59CB
28BCD1A2C077D3C5C7267BEFE1F46337FD234BC82B83190A6B57CBF74175AEF0D390AD9C30A7
9F3287F9FF6713113F43A5B60D9F21EBEC2E3D79BBC94AD05B576213349DE238DF9351FD48F6
69157AA453C1062C8F49A26DCFAAA05CF71A6981ABB9399402C33278FD224A0FA76F3E091C50
8695CC7AFC0DF6949A43641E2C91ACCE0C2C66FCB538173ED1C3B517D07C316DD8CE38A4EEE4
8129D57A1B98A9110F3C64105E86697F0551EE3C9F6E6D4ECC20F0EAFE9AD88A249091AF17F9
80FACF37D64D8E97026ABC4D232338EFFCC8F6273FF7ECE93E13ED1170357BBEADFBD0F8E4D3
E2CCFACC203AF7B54BA5BFB9DB3054A39FD681913DD8D904FA4433B62569BC083563FD199D8E
29F3EA16D90AD87AF6E44B4B1805D2DDC25427D756F38D2ABF79CDCF331F376126C0B92746E8
267FA78B57965D0B237DE456E84B8F32144ED85DF5EB0B659C23A542D53F238E32C01ECA5DFD
DB0542EF45FE642D8DFC118DC68879AA48A1D4C5B764583A99D6A1FFDB0E7DF569E7CB1D23F1
F1E793E561882DE734DA7797B12D057F57276B6DF859D1E922D7F26A381C95E504E78BCAAD54
6EC64CEA96892BEF87F11E04B32523766ED6C0FB179C8875B820149CF827B588EEDACB4BBAEF
E3603189D63BA54FB032CFA42E5234CDD1DA0D7CC26AD093E50973C1D83C1A9473DDF625EF78
5E859DAECED59610B2C1EA9180BAA54C8F0D178CA3EC39635ED89DCCC541E1C7F71E9DC343CB
FEA28BA0A5E06E3E78E3ACA3D3B9731D7562F3241B356CE9B1A4FA9F4F6A0297DED27575BBD7
0DD353A99BD42ACC6B9E0FE266FB1A45940C95F7BB5E441059A4602BDD2EBE32A336407DB06E
8503EC3AF98092314866320064BE36414EF2FC6EFEFDAD1F379795DE5C6EA183A9B6D00FAF63
2C28C213EAC75A50B61A100013AA6143BCD66F81DBDE1964CB16EB0D50CAAF7CF539954CE73E
1B55B630D9B6F122CE9782A15DB006187BF204C79220F447748B3FE14A4C5E6F9379655EB143
7BF286E47D8C8998CA41A518B5F8D065CF5DF7846EDCEE85E22E960E84539CA244BEB3DEF647
D479A4D40D84C8ADBEA431A4BB546BC0FE0BFB53CA74615BE07C2C87AD67160CA19AB4A06C0E
03BAC9BBF062849A62E03982B01CE729EC85487D2F222CDF85968FCB4F1F87F6B1263FA9A04F
22A06500FA8552DA332EF7991810A5B29AE78D1C4B53607B0C5409E2CCADA731372AD7F36EF0
936CDB272C8CC8F6E29919935F5FFF57D92E78FA8EB2D04D4370F9ED43C0CFEEE1B88645A6F5
6AC4F8FADDB340E3A03B3E50B990574EEB5508E7884C3C27B4058E263E6C989EC6A348949487
BE4F4A88E8585900EF4094C0DB6D274CC055AA946478B78973E0648C75FA0B4674094614CFD8
05AFBCFBB3CC180651AD15AD49063B4F1D6F50B153FD4861B2C742F5CEC4EE7B1754CDDF05D3
FB3054DFF46F20CBB5AF2C5D1E10EE907DF6787F641CB77BC8E82EB3FE665DDCC48EC82BD01B
DE5ABD201EA93363AA2DF2444D1F18AE3BE65412A3AF64A21E67B8D146DFB1617CF9CAC83FEF
796157123FEBE6D71CCFE09656B4C87ABBE23115017818FA065F2A6B4599F14CEF2290E71B9B
E51CB9EBD0C2F05EFC4881AC13292E6A4AF76ED14CB4EA6FDCF0733F4C259EF52D72BC11C9A3
E4C290DF2710983F6AFFACAF0057EF56A549081B2F74CA07DF9A04D8855B1CAAEB1595B1094C
63C92D18482B1AB323DD292366636C6ADB9C08C9CB20A299EDF1CF269A61AEC452DB3DD4A057
AEBC071914B28CE4771D483917757C53BED287EADAB5A8B324AEE981EEF88C18C18A98E8D986
48B0907A62508B1E19EAFA4C67C929DEB2CC19EEEF3DEC3F7B916FC16B306DB539911F76A6E8
7871DFA491842F783E28758583FE247592022E56159DD76EA06EAAADB965BE839D7F92636DF2
9838CF32FD3AFC54595DCB2A6D04A71158F46ECCDADBCEF2DB8BA70C94A8D0FE9F7EABE0262A
F495899E0EEF986940A8414E5EE3382BBED1454D0B6802B1C7DBF268EBD1821082C5D8C7670C
31BA9C1D972521569844012BAB169EBB75F505ED2653D7B2B9F5258D4E4E32BEB9D5B75792E0
91CECD8AC11197328342DB17AF3ECAA2FF79B90F93F6B5D2A9EA181B3C7B01BCE28F68F6A6E9
22644E4A8C8539F6C0BD7DAE91D59BC9A96D934B2A5B6DFB7BD0C59108ECD22110A3AE00A24B
9316693830C0C7FAFEAE4F0EC087B9788064F03BF8C63B558C11BB184D902FD543186BA0BC1F
DFD63C372667717A5BDED4066FBC329132A2E115E530523D6876408DFCC7E67C946590F6C12B
E526784FED8E6B550616173A5F68BA2618965B1A3E06EC99FF60888F059D4E5FEA718B80B993
E3E7EBD78923557FD4B801259A0004F174B80B14066F2433BCE0792CA73EF45C7135C30C2C55
A3AF9C3A1CDA8C73955F7EE1D621B5C475A0B6A6159CB7961DF712D1ED1835DF21894B9D505A
57B3DAFFF6CC091D6BC733D7470260451C20D3C6A5384A406037098FD4A016B43104C50A3340
291080C8EF12C22F408EC97816C380E20D179DEABE32BE087046366175178ED2E26EAAC402CB
436C545FA134D0BFF0114D18AD1D6C5481C4346F2B1D34156E40E52ED730E9BB819A69DDB3BC
DFECEBA921689CDDEA1FC1DDD0CD3C66C21426637245CFA04E7978ECEBF71BD335F4A8B3FA0B
F945ECE94D3F072640FB34696891BC9159FECDCCFA537282A6F21E3A213CC7CF501B05BAE3E0
66E14290FFCCA3F55CCEF2F48D7C0C938DAE18344907D039EDDCF8FD4AA85A494CC26E2E41F4
440A351F5A327C7A64D38D9A439A84B1BCB7ED9B8684E2581589C0B20CF7008EFC5C53901A0B
9E9BB15052C6BAEE571AD778EB0588B1D73863DA33150B59E2D8F55D73A699B48717AB49510D
2B0F724C65A02731D1F53802837050AFC26DD0B3437ABF213660AD63A6F21CDAEE9CB7C31790
5C11655C16C071C5BA9E08B465A362649F217F0A646CA4CA243E7CDD625311E7919109F3425F
7AD41FAD5D9145F653982091B82C16E0DE8AB50088F69173544D9E098EA1C497AC4670C57526
AA83ED4A606866CF2BAD0C97D9BFB430CFCB1FE31296B760C254F4D56214F1B9D335DBE843DE
75C68C105922CB4763F19A05D88A677206B4D94DDDB0F482E7E9CDC8F1FAC05BC6DE3D5D06CF
8727008F43E32C4574038A9E20857ED0AA3939952F27F00344AD3677B36A9C91CD42FEDDEAAA
335D8666F3D74806FA4ED35CC39ACE26A12D8918CCCC09DCA06D5E882B25C089E3549AE92983
BB1CA2086849070F948491E0F4383F779695C9A96944C1459382E542A701ED9E432A8568F7F3
B88FB5B5F09B9EA2C6F43E3A80259E2689F9BC5F5AA62354B9B7794C4021E655E98CB7B893C3
0D9FFA7FA640AD4DDEA01065A4C51FD2842990C2B0D7CC268ED9989D79735382284EABD0BE51
F0B55F9F3ECE26838ED6ED4E56D66430A034F39487BA90D02AAF928E22AAF6F3D42D4FAD50A5
62F573844DD221C8B0EC1599108B1044DEAE3CF5920EC93DF837C8502177EEE7B97B116D94FB
26931414475E9EE4972E95BFA4B475F5CD99B213BBDD6AF8F0D9E81081B3A699A5C22C88A709
1D6E51CCEF5D14319E11E126A07FF01167206DE290E1706E5F3168F3F2256AD74B5F5A8AF976
2B898CFC0B122845351F1E852B8CD9C5949D6C7986954BF1D3D008A3CA9067DCAE5A2512FB9A
769C396166049F9DFCB4F46F1ACE9C2B8568CB3713FF7CD8676E821AD67248F819D81E873490
3A7658D2E52999CC3573B78ACD974F24F71E3555D34AC5195AADE9A95D9E981DAFD503506D77
732D3E17FD28A49F29059882380B66B7EFC3565C58DC6CDF73AD2725389A7AE3832D3C32B9D1
A79B904DE39A0ED496C1E5E2ABBF6E86DB6C161DADEBDEDD05629045B83A868896E731167E71
F4CFEB525C6CC0DAD76969B1EF9E2DA6A7882EE4997B91C474DFE1A4E7EFC6B3CB3C4E52ED15
7475896748DEB398D91C5CE72884F4E26CCDC1257098E16FDAEA1B9CC1F377F2A760BC7F789E
E475E76A6F00A02E3AE1A352E91FBAB529EA92CC6B0672F56A8FBC9205F429595578FA30B5BA
735226CF3AD7809D9860163DF91E05D8A42B8D0AEA71152FDFDFDF57D54E9F77D4F9AF77CBC0
DBF05785185AD7D017138F1E33527AF10C57142D75406E437F1BD1D23B5E973FF5DA6F1D32F9
69F1F363E3EE866A17F350B8EF85203E4D6B0F5BFEE454FFC541EC0F2E2B869ECECDD1867AE3
49AEAFE6351DDE9EA8172DBE5FC93D48D67F1071A2E5D6D0C62F0A400B0AE53D7A6B66C830F3
58754C1B54F022F6FF41DB958658C94F167CF40966B167DB22894F93D55EC7FE55C13F1EDA5C
6A7619A3BBA3D4E6EDC8961E9DD7B90CA7F816493829A9EF5B253D1A9B5D741A9FD0C1C78EF0
29D3487DF78C29FDC54924BD8CE3ACB8273F629127DADA5845FC201B4DA5272BB139834C9488
B261AAF18D9BEB7596064701587E9D34BAB6D90E6CA89BE84D018EF084F5D4C1FDE64BE6CEE0
DB3BBB59F65A871A47B3AA6AB8A30470D1B932E26638506C90AC37982F7566D04B90C9CC2098
D1605DCCAC76A75523184F818A5A593DB48974E28C4917F2568E27A8484B032E686607857A6B
DF2E1EFC036BED083DE8FBFEE305944496AEFD090DF1BFC9BCC796896C6EFBA68515097C6E20
F62BD144D59AA23A265DDBE395B0641843BC670A6831AD33EB765AE09C9CFF7BBBB79CEB912B
D9B7424044C0DAE8369F2E4E535075C86E43F8E0A0514862FD3595384C35E8F044EAFFCE54AE
162EA6A459836A924E4BC9D72C4E24BFE843CC212C697D91FA63D6202CFD298EB95079438729
E75E81932B516DF90DDB9C1AFD7B65516D23F6D7FDEF243F3977B6546F376475CCD0D5F854D8
3D65B8E3050A6D087FCE654269B34CBA9695768416F86D93E4394E692B8EDAB13CF573941E95
6003D1A1A0795636270760A3E3213F1D9BB7F09BAB813C97DB8DAB81C4D1687C5F0ABCCA8BA6
5F5D44D717E98B7F88C561904C165543B7FE4C969F17CFE9CD5D2CD34C314CB6DEB1931FD577
83B5D209F892AEA0660E195C73664EE4818838E64E33A6CB376B3161AB9D446CF0D54CA7FE4F
4E78E2FAC0DD135E56D425D74C307EBCDDBB265BCCE5FAD5A2D4CA97F5CA2CE9E559CEFFB4F7
CD55125BE438E8B515AB02723594FA3347490136CB4FDD5BC2BDED7079B6BDCF7CF54B9DBAF2
CF2A3B999FCB815956E579CD7103AB26319D3082B3ED699E8048F0BBBEE127F8C704F214A0A2
B1B15A104158290969281B890182046E34F6445A9284BE62FE4CF439C8B96396E6A48BE68F02
BFE5587D1077D7946E9163E68610A1E6A91C371660359845F16492F4013BC4589FD576A32500
B001992A99BED798596B9FEAC5C6D04F1B233527BD39C561EB79B545545BAF1656DE017546B2
C6C59BF501B750BC870B80D7756ADA6ED0982F4F27A1DAFA2BB73F639440279F5A5E69BD10F3
748855C6E31B6896B31479D7FE922205B50C43A5820E1024ABFAC79BF22096860C1BEE306F9B
CFE562C7AD7B7DC8218D7572F6E7EB0F43167B2F0555CB4AB6C79B620FC9F014B71079F8F06A
DE3655E8ECA1F67CAF27862853FBB7D0DCF92AAE3AB5A6E50FDE64083AA70D348B788227F69E
1C3BD80BFCA9754D4F8A0F1AF7E5719E62FC360B308DF9BC0C91460C8A6DB72F7BCB8944145D
CFC42C3C0180194B039BA5B79892C533A29F69B481658DBF64684782E4D6D8F3376EB2F4C5B0
14D366CF1C0BFF24BE0DC3065D579C631989C794B5646AA26D9E675695A098E0DF75384D0806
E78BE8726C2DA71551B71F926B4393A044A4F6E40695C690FA147F7F0242A18F1ABA5F8F905F
AEE6EB60F3E7943BDF8EAD8CCBAB99AAB3238E894F962E233686CBBB936E8669EAA2213D1C2E
375A0537454B8B8EF5B01F405B1790199F0BB940E4529F65EA0C1F6F4F3F37AFBD6F418E3066
14A3D03DD4D877127F220A338F1A733F94558A0FBD2EDA91A9E243BA327ECDCB563937FF3056
5A9C32FD884FDD7D264E9492544783AECC6D9F2FD05731B9E30C2523FD58287B64D07B5D2ED6
329EB65ED0EC566F41D7F494A0F1EE7F9821E19BC0AEA3FB1A878A16608AF779E4C8C49F2746
94872477DE79D8C139B5D1D0322B08C6F8CE1B9235706028F8EAF3526E80A2B021C7E88CB7F8
114AA03CF8B7A0A2A6F575F6B37F68C3DF432D217AA086F7B97C4FF9DCBF9879065D0BFE8A8B
A23AE621CA77C85A1DB400B01951857E8E41EC6504D41973F487D4C165F1CAD3E9364D2D3A55
9E08A9E7A8DD9A1F85F9A57BF029421897095CF361D1D8F4085D618555E02D4317F3257A8802
B1CC17D4ACBCF38CC4A173A9AD864FDCB34A20D450F02164AC84A6C854A13B9F13F30FE76C36
4ADD8F581F8669C0597E0F9411E9C8F0B8E2F1E520E0F0F50C28FC883A550D5DA461F8E53B4B
A492A7C8547D14659788D346EEE2F83DF0A6A24AAFAA024C265B018E584A4CA5B0B05E9E0841
135D046E2841E44DC9873D051C66FBBA29675B80CE1A85C0D554E6018E7D867363E4E16FF2D2
8374CFAD56286F55EFF0565E88DC664BFE9CDBFA56C3F1BF3C9C5964C263CC424083C2BA9B15
6B42D57727D38B9EE253F394799EB0B6131C9B33B64D03335E47F840AC8E010DF12EE5527868
A7C2EFDE5C0045103F679283368A8E087D65343C1FF813DEEE96CAF63C642A6D809762988B7F
B0D562873CE9A895CE09176169C9609A0ED03D26286F7903964C68670049C49239F66EFD8348
286BD80921CBC265D3989FBE9A33E198CE32C67C7D4953533936DBE80447B96DD4806B82D7A7
230ECA49BE999553F466BD6C614C825C09CB102D90FE5C1F44A95AAA1AAC3D58D35C78E56413
AD9AE2A14088F53936CCD0AA1A8246E9623F5A4C4F9BB889B638E83091B9AF073D79ECA99B9E
7AEBDAC87D5E257F6F8BECC0218B8CDC4390888177EB238BD7FD03FC4088D29E93CAB213783B
10C51796A81FE35C1378CB2AAC0A35626F2D51E3DDB9B667020DA8C06C7F04D82BA5229E9F8D
23BDEBE66C32C0031D85E2D389F1D6911B9980753D53B57A7EB72DD294F358F143B7CE2C21FA
326544CD578549E98B8EC1593680BC7614CC2B24FB20F747EC99431D5C18853B62933E9FBAEA
57B98EAF000BD67C58CE5D1EA6030199A43E86C40160D24F6A30D45A26FFB30906A9A80E2FA2
3F0ECE4CB63E3B1AA994CF6989335BAF6CBDE381BEBD59B2EB6A5645A2E57E888B0EA25F1C8E
9244BD025300CA6A5F061A92C0ADC7D600B4E9DDCF977E8349216D7ED3CF88291F5AD1717866
0B24BD15524B8C07324D3948C86D75EA73016051BAB5069553772C14A1C9B23CD4344CDFFB8D
CE1EAA78A914642CE92F0599D84766EB920F1E59E6493137432982610C84D1266CC16B0C8999
2FDE8AF2F8704C42D68E19133FA9C52909E9916A37FFEE3370986F43C9BB29DBF59DAB200796
F761B2B96799E498BE1B868F6DD4DD2EF3A294FEC707DA55CE59DCAE5DA784ADFF55FDDE7E23
D1FDC41F735302467E7432C0324589BDCA1D9E542128462077EA545A09EC2D2CC554D00D778F
A29CC27E8B76BE4B74764A1DB73D829F39F0530EE032753B798D3D6C57E5E890E4792A4C7D43
4F84FA29D39A220C6891366BF614127F4070D340212B5F15FFA1149C013FB8CE17C26968CC2B
334A24C8FF24C039B361981B159B4CC8EA4A3A7A749BF19AE3303D373F556C4DF6BA6DAE50AD
EE28A7C5FA164AB93922F87589C418018DE954BC271A436AE7A3D8F880205018F84CA0E3471D
3AD7C81B19611542E3447D0C01A3F0B7FA898E2A350AA83A742EAA6DE233CA76D98E5DEA2A45
9A6DB1EAD8D20C9398468B50FDA35D25EB7C10AEFCCE293AFB8BE2DA3FEBC5F6FA8E00B394C4
A78D69FE430B4F77F6E12DAB21A191239DE0D2663543599E6BDB3394D58BD0601D88794F76A1
3E9CEA57CFFCCE19C4144299D7512A7B7C524320935A2749F3E99AA5ED2BABF6B1CFD983367F
6232D6E7E869EFF12B7D83FB2A063F206846D05E0FBFF9C08946B743FF90DB52140563DD9264
33DCACC3F89AA9AB1F8C02D075D15C8EE1C7C937ED823785717F50FDF72519CB9087C586EFFF
08EBB1614B1738D2931596586DA4C50CB78D6D0AC81F7E09D40B5ADF5F35C3E1DA7615B8E4E8
E5D71A6C865C0C36C835C61B04948E964260FF7862337BB4A27507330D1EE9C645C55F487297
842FA29E8B6E526AD0BD01C8472120C29E4CAE19AB0543516933BF150915E240FBB97283DD1C
58BC51E25FDEDE6046F537D552ECF17AD28BF4840A60FC3AEE18C58DEEFB2C01FCF627A37B62
963347C55561A99D091A221E50816B3A7A0FBABDDCE016A2762576FF8A282A582281AE066958
1A8D9DD34B2543083B82A86CB1B2C7C6B728D63ADC82E72CAB878771C1D3884757BAF66B8007
30A6C31C3B1091C119579973C5BE07B44FC10F432AC7B3DA94FFD121E0F2D694CDDBD1806729
103BE8CABCCE3610FFCF9A11773D6369A809943495232239A41B8AA62B02F0EAD43486B03150
0491F30E22FE022C6FA05EF2C9B12E14D708770FBE139B8D833A91AA486C5149C6FEB164479A
6E3CF95B8EA0DDCC170537F4A6CDAA6B7994FF8B02DC9230EAE11A873FB83CB5155926A235FF
815B2E65CCA3AC1DC42ACDD2DA7E5D9EDE4393AE01E2CA7E70A2264E7273B19F90C135656FEE
F5841E7BB2B96D8AC44EC9ED5C3C116CE0008CC1E4996C8DE2BCA3773F721A059EC9FB77C653
AEB664FD9F046DC0FA212109C84B3B96A7F4CF592C1B423C3C47990E46F701DA0D5C1AC08AD3
1E967C66DA9DCF4060DB7F42F3392E8BD574BB806BBBCF8D5215948A21AE0B0F848CBBBC8219
E7CB1FF081157A1A2BAC97037753B55B9D22F52A73CF08DB9D76A6D5AC89D5F886D469969689
808C43694DF7F301446FE76DAB8D82C2F1CCD16C95B1CBEFC74D1F61D788DA67A36F2B9CAF85
4F6451F4510190E17B8E93C925882E1ACC320BE35FEDFB7DF4D60EA6BB57A6AEC21DF02D3CB8
4EB682423F19D4E75CB6D14F6B7FE085957FF284A0160B54B4896FF72318CBF7066BE5FEF5EE
FE592D3DF6C35E659AD0BD23127B6655813CD9B192E6A175054554DCCC17E06DD399993AE715
48FC7703AD5E1B48224A5BDEE9982C8BB9062DB0BCD23725539802A33CC0EF8857232D47C508
CFEBEB79F7364B9C72A72EB34E641C8A30C3EEB48883DEA2E86BBB34287229A38B2195182773
58F6F1369A01E81FD310B6B32728366885CE0E4EE300A81DCB4B6EE61E755EC4DE2511288BC7
8A1A871F207BD050A88C0BE636CDDE883E1C65C10CA1056FCA6B024B333B5FB8D52B696FCF87
A2314F0E08725405CD5775C44CC38DE93961400E81FD58B625F74881E8EADC3331F9169C11DC
2B5601FF0F910AF540CA50FBC944A09D573BB077085030D11DF2ACD5C1AE26D43533A0E1A0CB
254FAFBCA0141D7401A82D061496D532373545E9114C34130343A3CE7EA3FC3BE00273FE2EEB
E02C3582A907FAEE623740C60066F120A19501B50ABCE1248BF2DE59CC296BD8D69AE3528AFE
BB0EF6AC70476AF6698A0EBDA881A87C5A286E7DB1A4E3C4822E54627C51837AAB6597ECCC6F
28477C6673E5CF363DA2801D53038F01FB10B7E5B883E4F7581F4ACE47308A38A6AA253A1DAE
E569E80300871777B84CF33ABAE7C48D9192B35293C006E4C1C85D7DE37EF8074198F69BA4C4
69AF48E5DD5E53EFAE47C03E9855A1C217543B10EE5E4751FC9DB00B236B1571FC00A0F712CB
21216227C29168423398E4838F7501691C0425A75BAFA3D91D32D0F6B7BB9851BDD33D817761
61F6EBC362F23F078C374D841603EEE95EFD0D2057070EAE2C42DD73FD78E9BE697D2B09BBA8
37D023B8BB94F6BF8B89EEC8914B82223EF74DE949D5E3E05259A790FF23EE7475CE269618C7
271BB6665897A40641D1E0DB93BD6A2D87ECDD4CE2FA17E50F2BFF7B14621181FB2B863BD5DB
3A9B393AAC1A7ED69599B1D6361CD44711E8A2BAF10E769CC1D87F7ED3BC54D3422F3BC9AE9A
569A91BC499982B2CED2D684E7CC791763E4C874FB6F236E0C5F214C4544B125BA5543304D4F
F7B3FA2FBC3002C4E830FCD9AB56E4F3C7B86172C6FF2E7B9EA18C63B982BA8C116FE3911509
571033F59828D93826135D88D8AB7374E485E982712CE5DC8863350A7D9DF467D206BB28D5FA
CFF28D07A8A760F17CFB624C4890BBF7713BC48A590BF0441A6EE528FB05827CC29C0067F546
F1E2FE21E1D9808F0283897AAEF7BAEBAE81CEA9F5C758F00010860D4B3B6D10C4443F982DD4
57633497DACBD5B2A340AF256097CD0244FB36DD8CDFA3AC8686444B80DF7686469BF6B7BDAC
7616AA5EA70736E0B3C29DBE7626E9C178FA9DEFA253D25D952F089C062D236C234E5C574EF1
9B202A8AB4A5408C59AD677C48D6C8B411D720D465F14FA6AF25BB2CC285099F5E04BBCFCEFF
01B47FA33E4B381C313F8070A04E2D57E2C10E93C3B20AED7B6C00B8652394943256926BE520
871A1BC8E02831A00FA1906778AB6A0DF77B0E73180A28985C43316119D1E4BD658E9E6D1485
7EB1833DD2973B3E7D444F22EC89328080545BB70EAFDD4AE29C4F140C15DE910C220C988D3E
79E9131D09E1142E3D68963088D2B9CA05D6DC2A1922D8173516D88041728DBA5FA4D314ADF8
FC1A80E1B880443DAC8BACD565CFAA2DC1CA4E418044653B71043401F07ED21093C7CA2136C7
51F263FC796618FD8E65C94FE07B3B4F4D89C60477022D3D72FDD88B9E2BA9B5CADB4AE5B584
C3114BBEB2D0024533E5E5B37D81D7C005E85218CFE4951630F3D0A081394B36926B9394BA5B
793745324E514E2F69E8799437FB06948DA30F74D98B89AD9361F11D80A03C292EB75E3393A7
B91958FB0FF1FC327A8A58E20E03A8CD30A0690683CEA5CEF168CAEF1B751DD2E40405A518A0
6B576CC3E2C0F8164EC31A627EA7F1EDE02AB5A4D5F9078D0E4C9870AE9A90E6520E496DA60E
8B47F8F3732DDFE80B8FE37CFFDB983E406A9974F9D6665DF51600B12654CCECE1DBA54ED08A
BDFBEC2D8223E07560739D0D69BA289CEFC536897A421E6807121CEF8288B08CB6E2540AA9AB
42F1BFEED8818007D0DEF589C611801AF7870CA5859ABB505E06D459597CD2BB4EFCA685619B
ABF32A44BE6C9CEA1A1E5905DF12294E398C6B5837989FACB5B4342187AB66190C8A20FF12C7
56BFA2BF40603808248512B5E323BB96FD229DC5A5A2478C46F1D5ABF8AD76B3EAB49C6A630E
8D4A28EB62E3A0BE2923622BBDC3DEDD3BBE06422D1C075D84EDA2D6EFA41BAE1CCF9644C68F
85234C9AE0068E2EE5C7E7BE7A86A3C4CD6BD2DFAE8E52AD43525F16591786B4A9A5C9DFC89D
86DEB5D3E1BFF3122A9A9D9534C7BFFE16ADE9929B5658FFBE10EBF66F7A3D675AF55AAB186E
BE8911242342FBBA8F2784C780BCDBB2FADBE81B1B5CD92FF427E966EF13FC8AD166DBEF1F12
8D3F370781238F98CCA3424EF907EEAA42A29AF535BD50428922957AE1834DB4B00BE5F7B843
8B8DE9C65CB9FB0D893F79F39B16FBE7C6770BF64C69886C0202B9CDA7128C5B437F1B804C9F
CCE7C0C8AEB6C01DD793E8373D021E7EB810F8E90F58FF0105B424E247E17CB3A97F02660019
9D77FDEC948F015CE8E3F79359331463F1C9CA56F5C712204750F685B0DC0E413C7AA3BE4CC5
EF8D0D2FFC827D9BB3F43C5A7AD5FAB92CC5ED7360CD5DE5A8340318F9074692C5CA8F680408
0575A369768B9925F28C20174628B3319FDD1B0B15E64E99C0E2E4CA1DE15FB9F8F346C0C1A7
B1F47EE27ECE6CD9DB590B82D0179BB53FC882928A1183CB4CE6C9CA8917BF0FC2F568D07B19
7E34374B9E6A6D1EEA556A6781FE01FFBCB72298B315B27B33DF918034F68BE233B7F86D3F09
1A16C736AF476611546E48CE2C9768B4D1D8D038E583675632367F2FB750D7292BC0A8A2DB8A
280895B210026524CC72D98306545326BD45A708B13750BE16764D34EF8E172D8F27DCEDA2C2
F7FEB7CF9B50332ECEC58537BDD91BA70E841159D9274761B172C88E90075D29052CC2B9F39A
939CB0FAEFB13425AC0870F0301F9E2AD7DE528E348C12EC7B87024BB6B520B3555D79B2CA8D
E435BE52E62E8D85ECC8010FBCEA6C07D6EB48AA047321FD752ABEBC9CBA15C659D2F7FD5479
42D1FD7C01099BEFE9127D1198919D965789D3FF680667A0B027611CB7844EA467C145BAF2D4
C3DF8A9DEF531D7B82E3103AF9FA6FA1D20588F9871DDB5B411D71A7896EC660696F5FE75CDF
CC352597CA7FC7BF5FE938A576C7B3C7486E7A1E8810DDDF15F7DF8EB8178210C451C8DA6BD3
750F4F16838F5D713C6C0742F973919865887D4EF8AA7A7BFF6359FA8B6B435817D5B9AD01D4
7FB807ED92F7B53671521B130684C5E4598CE5B2819DFC9112FA7AD656511EB5D37BD493D22B
9D54C87492D3E9831ECB8C5C86A680DD31136CB06AD056B401A066C78AF73768D4C8DD1F0C00
D81CA62DAD220EEC4CDFB5409A135A5DF332D0048BAC9C5603EB729587F6F5FD5F5E0DBB77A3
4BDF96863DB546F9372B4919D7C762DD7F902C54889882C7504051A3E60C8415539EDE342C56
F0968B550039C0B7C3CEB97FD64CD0D245ADDA3FA0925F0185D582030F14130D4CDB8B805F53
2D29D19A9EA12064CF5D8D0A80B6452B889665258B1F0DEE9158B28C1B4017C1ABDF7D3512D8
E5513502BC4C32E3FB7B852EBE216439CDB4EFC30ADA70E32847B3CE5B6F1BC2B90809963AB1
B87DA13759B46AEBFBCE7D1C9E6DB7BEAD3C1FD43A0A36D70EE12EA881FBAFF7EBC10A130158
C65D01888024E8921CCE114095E51CF568EB9B5AAF17B17F5FA640A0C5A475DC10091C21FEA9
6006D6E3446842EF4ADDF88BBB0A55F5593D1424A27B88690B26EA51468FA1F73A6D0819BA12
AB6F3D3E27D752B33D203D3190EE92A37DABDB444CE938BDDE783F6203F032D3C18E84DEFA5E
2414472028CD5AD2A47248BAAA2A6DDB8123DFEA8C2934D5F746F72C2B19F7D2C5D1C906D0F3
A85F2ADFF816D6561944B8A83F414E43D2F9ACB300AD75A156A687428C458B53A2240C096EA1
24FDA51D58BDA541051C9DD4ABB43B31A7A2BD924A4095CACF697F6112CE82E67CF096A37F3A
9FFAD96290105FF2DDD012005294F6FDF59D9BCFEF8485AFE9279D56E00B31EF122AC115B0E9
98738D8E3998855BCAA50B921B655A28A0E15B7672373F994C54D4ECD1F946A8D7B6762187AD
110637D48C635E3433329882C89C75B3D90E3F357944B30B03EE8488EF2D66FEFEEB60D2A400
987254A683C13F81CD59ECF031A45C6E5EB8EF51A246589F67B5FCEF202970D584451A52F609
0BFA42CEBFCCC0BBB0280D22A2E538FC8C0F4347D39A04FAB9E03AED9491111FA39934152D5A
ADE2729173113978BF478F0DB97C453FF54CAA73F79B42332C48482EF493CA61D0BFB51C3EFC
9CD572D66F581EEF6CC4CA013E62CEA28B6EDAA41F10BC7E95385810F5E8E5B0B22B1974064D
85941E257C874D50B3C4863C0B7BBB916526A7CB9A82E710512850384F2B0F471EFC83A428BB
022B49E512CEB3846C4BDC15DB1A0EE0774B790CB6222E10FA7CB72E1720F803B326F8B604C9
5F7A6ACF028432A90489A9D0B49375D0AC9412843B82C90A94668115161888779C310A7FB017
A5CAA28A6EE990085937C5C482493B1BD3BF23D487713EC4526A68D03C1188A12D26F7D156F8
51C1C2A3D6242EA976633D8DB87CA7E6FF581AE9B9EDF5E698347490E5E287E9F23E0E6947DC
87A9F70BEBA1DFAAA1D698F962A632D14F353ECDE63EC25A4E45E59CB71E62181A4D6C3CEC07
B1FD6E37E9513431E0A1D6B633CF2A7F8AB1278ACD87C575A818A52DD4F58ABBA16C5F1DEBE1
9C1C517C645BBFE5B6C1C3D421577D3776C0B75A36B97C1E24C62400648181956A86510200D8
1D5356B46A38B44B780BC54F32BE1E55E284C71F2C7C55D28D0D66253043D76E8FB12038ACA0
93D1395E2E65DFA665EAD75509D46D93D03C5F0A8DBDEF20F2742D73B035D7DB7B58E298586C
1F13DB816F53011E4D59D129839679250F3F65D3645691774A1CC8E8FEAE0466809E34C62966
6F06A0CC997157C5C87F85E36193CDDA42F17D1AECE29C42C3D19ED063C41E4805CD4E440C8A
1350DD4919338EBD56DD693F16EEAFB812C83EAA9800AD55A6939389E7F2ACA8DA3625271BF0
B537E517CEC3AE1766F29E7D1AD7FE23AF7CE0B126BF34C14CFE62F8EC0D9CCD4AC86878C9D4
A1C6CD5D9119B3AEB5336398CE04893E61E8D4D9A3439320582721837745D222DD7FB5C5BC6F
1F0198BFD5DE6E10DA63BA8B744F84C54B2CF54B3EB1976C63B3B40C66EBB88F927E19842007
E94870BA474F64899D402E67CD5FFD34254577E1D5CB50DC2C049A2D2A5B10577283CFA90832
EB0661EC3B371FE7CECF27D57AB42DE57311076C52815F42A4CC56D9B46C7DF8C1EB1484E028
0439723CD9CDA4809F3CEF1F6A6F063579EB8F12FC324E8A3906733A92966C99007F4597ADE1
E741B02CACEFAEFB7474D8A45057A46DABB2E6663FF03B0380AFEC7F345F90541DDC7D89B826
6D1D527656F266F02F3B6703A3062F653D4371C06DA8F85D6E6141DEB6C4087B4E653FA72B2E
7C5BFAED69497EDB92536D9EC9F3BF0F349208E7739CB1ACA708A32A5AC7A99BA03FCB08AA60
592BC8B23D170BB3A74CCEC7011E64C99D1118E53C834935AD27153D17FF8C1F434E3FF24D03
18B84918326199AACD62724B1057D91C6628AD4263A858A46F0A1E842E78A3167E139143FB0E
DACC64348402076A800363BAED29BE5F0AF6FE140A6AE50E487E23FEE8B5EA9FA916B18F890C
CACA45C9686FD4AF5E668C5D102734CED7C58B0B790666153E3B54FCD9AB2B1C2B1123293EA2
DF4D753D7D87BE812C756A9EEBFDD9A52C2EC0596B04D4993DCB8777711E6D09A3F7D1A6E767
977A8E58E4BBC1ACB0344C75F7191B8B689BF195CED6D4DF1B894408F53B3641DE108A760374
A375D04A2ACB47B78AD52656C89E851FFDDE61449CE7ACA8E80A516C9594B7C1C0EB7D676BB0
81F5F021681C01402F8A521F56E8C00FDFDE0C61BD1942209CB9AA750E67ABA1F36DCBC29503
6BB899205BDB733618F0317DB8FE1F81AB41FEAB018B19DB35BFB69288F19F4B09B1A2FE2D73
B2928EC9C1C530DCEDCB2880DF1F032ECECB75ECCB49F081129DEDB9A655EEA3E98A5FA2B437
558818FBF05E9A848A3AFD4472901DB17BDDC4C0B3391E129E5130E3990A17E48C8AD5E1AEA5
BB24E4AF974054775EAE52D859E4BB06985E3BED044755D011312F9F1446E4A991785F4E9F2B
C714384C98FEE7084058F9D5DA4D79A0A5FDCF099887ADA2020D92495BCCEF6AC7370F69A9D4
2BAFDA9028BD002B71C6D0E14A141A5273536F63AF71329D877C25C4E9547E12A136C5A05D52
44D146AED305A58C412F193D9A5403A0DBE9154141461FBD5616ABA81C186A2DED307EE16640
7BC33A758D0B1007DA8EC3A0A6B17FA375AD799743499A61A41F9D9890E2E6E59A8BB7B372E6
1301431FFC11D280F1D5735A5949447A73D7238C6FBEB042843471EA76B4A25C1674E16D1DDC
D6F292934DCC74BB0300EECAB1FB92FB7491CC6488B99775C88D8FE615497C76387786BA73BF
2D626D2100D5788E8D30E54B9B9F963FA968E6933C6FB4C99F763D60A3CB94F9B1C4014A08C2
8BE9E7AD0F27A345D2AEB390E3715CD68DDAE50695FD089F8E46E72CB886E346F1C295EAC1A5
D42B1A0EBBD207862AC8D979591975B9E08DE4D78F8BAA16B244337E748995A74E9DD966C86E
83D916A1B38084ED8063911690CCE71C3C9C5D1293947929FE340BF1FCF06D03AA772F77BE38
7BCCCF0922A6F9AF3119DE3D32EC7DD98AC689F11F50FD5275411777C84F31E52ABE56CA22E3
F9E29DD56CF452E4189065E7298133304C431962E2404384CB70707F4FC3EEC63539F8E31543
4F2A217BADB7DD759A9227A66D8AA959647921D2F44D78DF5DDDCDFCBD8FBCCBFA907F25BA4F
3FF84644EBC11F5E4FDBED3003517FC60E59CE66F68236126B4AEC8FF539C6AD2C669223B85D
5E37F03532158B30E33CBDB0258CDC1607AC68C41DE9760C253E9AD40B28B267417C53B0C3E2
7BB32C7540935DB1C364746B55F9ACF7CA6B9EC35AC3248D42A8CF51A1D8F93319698B92FF71
7E1117F0E072605092DB4700ABAB7EF489BFC35EC68AD63D95FA16B6A2F0183E5C3B5B1BDDBA
31E60482267A5BF2DE244452FD08D7D9029C0F429E76D5C4D6C852F8ED771D8AC6BF267FF098
6C66B93FD61C810B091CA85058AD63A98E864FC24A25AAFF389346BE38644278F4BBDB0B4E21
215F51AD0B1C4008D8F15B60EB2FC107883E24E4511F9EEFBA9CD16DAE7E45784403B7C69C60
C7494DC023AA5627B1728E8195CB1BDE34F8FD21A0910464665DCAA57C827667719ED07C2340
EE0FBE21F5981380CB82D77140F7025492A7DE0800CD0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark


%%EndFont
TeXDict begin 40258437 52099154 1000 600 600 (ermAufgabe1_LÖSUNG.dvi)
@start /Fa 133[42 3[42 46 23 42 28 1[46 46 46 69 18 1[18
18 46 46 1[46 46 42 46 46 16[55 4[55 4[51 25[23 44[{
 TeXBase1Encoding ReEncodeFont }24 83.022 /NimbusSanL-Regu
rf /Fb 137[42 46 25 42 29 2[46 46 1[21 2[21 46 46 1[42
1[42 46 42 97[{ TeXBase1Encoding ReEncodeFont }15 74.7193
/NimbusSanL-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 2244 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 2244 a 0 2244 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 2244
a 0 2244 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 2244 a 0 TeXcolorgray 0 2244 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 2244 a
0 2244 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 2244 a 0 2244 2288 2245 v 2288 2244 a
currentpoint grestore moveto
 2288
2244 a 0 2244 a
tx@Dict begin { 0.0 184.94283 } PutCoor PutBegin  end
 0 2244 a 23 1904 a
tx@Dict begin  tx@NodeDict begin {46.0 41.0 90.55919 45.27959 2.5 }
false /N@tabAutor 16 {InitRnode } /NodeScale {} def NewNode end  end
 23 1904 a 23 1530
752 9 v 23 1630 9 100 v 0.95 TeXcolorgray 31 1630 736
100 v 0 TeXcolorgray 306 1600 a Fb(autor)p 767 1630 9
100 v 23 1638 752 9 v 23 1738 9 100 v 0.9 0.9 1 TeXcolorrgb
31 1738 211 100 v 0 TeXcolorgray 81 1708 a Fa(PK)p 242
1738 9 100 v 0.9 0.9 1 TeXcolorrgb 250 1738 517 100 v
0 TeXcolorgray 109 w(autor)p 494 1708 25 4 v 30 w(id)p
767 1738 9 100 v 23 1837 V 0.9 1 0.9 TeXcolorrgb 31 1837
211 100 v 0 TeXcolorgray 242 1837 9 100 v 0.9 1 0.9 TeXcolorrgb
250 1837 517 100 v 0 TeXcolorgray 300 1807 a(name)p 767
1837 9 100 v 23 1937 V 0.9 1 0.9 TeXcolorrgb 31 1937
211 100 v 0 TeXcolorgray 242 1937 9 100 v 0.9 1 0.9 TeXcolorrgb
250 1937 517 100 v 0 TeXcolorgray 300 1907 a(v)n(or)r(name)p
767 1937 9 100 v 23 2037 V 0.9 1 0.9 TeXcolorrgb 31 2037
211 100 v 0 TeXcolorgray 242 2037 9 100 v 0.9 1 0.9 TeXcolorrgb
250 2037 517 100 v 0 TeXcolorgray 300 2007 a(geb)n(ur)s(tsjahr)p
767 2037 9 100 v 23 2136 V 0.9 1 0.9 TeXcolorrgb 31 2136
211 100 v 0 TeXcolorgray 242 2136 9 100 v 0.9 1 0.9 TeXcolorrgb
250 2136 517 100 v 0 TeXcolorgray 300 2106 a(todesjahr)p
767 2136 9 100 v 23 2236 V 0.9 1 0.9 TeXcolorrgb 31 2236
211 100 v 0 TeXcolorgray 242 2236 9 100 v 0.9 1 0.9 TeXcolorrgb
250 2236 517 100 v 0 TeXcolorgray 300 2206 a(land)p 767
2236 9 100 v 23 2244 752 9 v 0 2244 a
tx@Dict begin  PutEnd  end
 0 2244 a 0 2244
a
tx@Dict begin { 142.26372 207.70511 } PutCoor PutBegin  end
 0 2244 a 23 2103 a
tx@Dict begin  tx@NodeDict begin {22.0 17.0 152.30852 76.15425 2.5
} false /N@tabIstAutorVon 16 {InitRnode } /NodeScale {} def NewNode
end  end
 23 2103 a 23 1929 1265 9 v 23 2028
9 100 v 0.95 TeXcolorgray 31 2028 1248 100 v 0 TeXcolorgray
426 1998 a Fb(ist)p 518 1998 23 4 v 26 w(autor)p 732
1998 V 26 w(v)n(on)p 1279 2028 9 100 v 23 2037 1265 9
v 23 2136 9 100 v 0.9 0.9 1 TeXcolorrgb 31 2136 363 100
v 0 TeXcolorgray 81 2106 a Fa(PK,)24 b(FK)p 394 2136
9 100 v 0.9 0.9 1 TeXcolorrgb 402 2136 877 100 v 0 TeXcolorgray
108 w(ist)p 540 2106 25 4 v 30 w(autor)p 759 2106 V 30
w(v)n(on)p 921 2106 V 30 w(autor)p 1140 2106 V 30 w(id)p
1279 2136 9 100 v 23 2236 V 0.9 0.9 1 TeXcolorrgb 31
2236 363 100 v 0 TeXcolorgray 81 2206 a(PK,)g(FK)p 394
2236 9 100 v 0.9 0.9 1 TeXcolorrgb 402 2236 877 100 v
0 TeXcolorgray 108 w(ist)p 540 2206 25 4 v 30 w(autor)p
759 2206 V 30 w(v)n(on)p 921 2206 V 30 w(isbn)p 1279
2236 9 100 v 23 2244 1265 9 v 0 2244 a
tx@Dict begin  PutEnd  end
 0 2244 a 0 2244
a
tx@Dict begin { 361.34975 190.63329 } PutCoor PutBegin  end
 0 2244 a 23 1904 a
tx@Dict begin  tx@NodeDict begin {46.0 41.0 116.37914 58.18956 2.5
} false /N@tabBuch 16 {InitRnode } /NodeScale {} def NewNode end  end
 23 1904 a 23 1530 967 9 v 23 1630
9 100 v 0.95 TeXcolorgray 31 1630 950 100 v 0 TeXcolorgray
418 1600 a Fb(b)o(uc)o(h)p 981 1630 9 100 v 23 1638 967
9 v 23 1738 9 100 v 0.9 0.9 1 TeXcolorrgb 31 1738 211
100 v 0 TeXcolorgray 81 1708 a Fa(PK)p 242 1738 9 100
v 0.9 0.9 1 TeXcolorrgb 250 1738 731 100 v 0 TeXcolorgray
109 w(isbn)p 981 1738 9 100 v 23 1837 V 0.9 1 0.9 TeXcolorrgb
31 1837 211 100 v 0 TeXcolorgray 242 1837 9 100 v 0.9 1 0.9
TeXcolorrgb 250 1837 731 100 v 0 TeXcolorgray 300 1807
a(titel)p 981 1837 9 100 v 23 1937 V 0.9 1 0.9 TeXcolorrgb
31 1937 211 100 v 0 TeXcolorgray 242 1937 9 100 v 0.9 1 0.9
TeXcolorrgb 250 1937 731 100 v 0 TeXcolorgray 300 1907
a(unter)s(titel)p 981 1937 9 100 v 23 2037 V 0.9 1 0.9
TeXcolorrgb 31 2037 211 100 v 0 TeXcolorgray 242 2037
9 100 v 0.9 1 0.9 TeXcolorrgb 250 2037 731 100 v 0 TeXcolorgray
300 2007 a(spr)o(ache)p 981 2037 9 100 v 23 2136 V 0.9 1 0.9
TeXcolorrgb 31 2136 211 100 v 0 TeXcolorgray 242 2136
9 100 v 0.9 1 0.9 TeXcolorrgb 250 2136 731 100 v 0 TeXcolorgray
300 2106 a(erschein)o(ungsjahr)p 981 2136 9 100 v 23
2236 V 0 0 0.1 0 TeXcolorcmyk 31 2236 211 100 v 0 TeXcolorgray
81 2206 a(FK)p 242 2236 9 100 v 0 0 0.1 0 TeXcolorcmyk
250 2236 731 100 v 0 TeXcolorgray 113 w(b)n(uch)p 483
2206 25 4 v 30 w(v)n(er)q(lag)p 738 2206 V 30 w(id)p
981 2236 9 100 v 23 2244 967 9 v 0 2244 a
tx@Dict begin  PutEnd  end
 0 2244 a 0
2244 a
tx@Dict begin { 369.88567 85.35823 } PutCoor PutBegin  end
 0 2244 a 23 2003 a
tx@Dict begin  tx@NodeDict begin {34.0 29.0 98.6992 49.3496 2.5 } false
/N@tabVerlag 16 {InitRnode } /NodeScale {} def NewNode end  end
 23 2003 a 23 1729 820 9 v 23
1829 9 100 v 0.95 TeXcolorgray 31 1829 803 100 v 0 TeXcolorgray
323 1799 a Fb(verla)o(g)p 834 1829 9 100 v 23 1837 820
9 v 23 1937 9 100 v 0.9 0.9 1 TeXcolorrgb 31 1937 211
100 v 0 TeXcolorgray 81 1907 a Fa(PK)p 242 1937 9 100
v 0.9 0.9 1 TeXcolorrgb 250 1937 585 100 v 0 TeXcolorgray
109 w(v)n(er)q(lag)p 530 1907 25 4 v 30 w(id)p 834 1937
9 100 v 23 2037 V 0.9 1 0.9 TeXcolorrgb 31 2037 211 100
v 0 TeXcolorgray 242 2037 9 100 v 0.9 1 0.9 TeXcolorrgb
250 2037 585 100 v 0 TeXcolorgray 300 2007 a(name)p 834
2037 9 100 v 23 2136 V 0.9 1 0.9 TeXcolorrgb 31 2136
211 100 v 0 TeXcolorgray 242 2136 9 100 v 0.9 1 0.9 TeXcolorrgb
250 2136 585 100 v 0 TeXcolorgray 300 2106 a(or)s(t)p
834 2136 9 100 v 23 2236 V 0.9 1 0.9 TeXcolorrgb 31 2236
211 100 v 0 TeXcolorgray 242 2236 9 100 v 0.9 1 0.9 TeXcolorrgb
250 2236 585 100 v 0 TeXcolorgray 300 2206 a(spezialgebiet)p
834 2236 9 100 v 23 2244 820 9 v 0 2244 a
tx@Dict begin  PutEnd  end
 0 2244 a 0
2244 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 -0.5 0 0 /N@tabAutor /N@tabIstAutorVon
InitNC {  tx@Dict begin  /Lineto /lineto load def 0  setlinejoin false
pop end /AngleA 0. def /AngleB 180. def /ArmA 10.0 def /ArmB 0.0 def
/ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end  gsave 0.8 SLW 0
 setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore  grestore end
 0 2244 a 23 2244 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 23 2244 a 23 2244 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 23 2244
a 23 2244 a
tx@Dict begin  tx@NodeDict begin /t 0. def LPut end PutBegin  end
 23 2244 a 23 2244 a
tx@Dict begin 90.  RotBegin  end
 23 2244 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 5.69046
-8.5359 -5.69046 -8.5359    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 5.69046
-5.69046 -5.69046 -5.69046    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
23 2244 a
tx@Dict begin RotEnd  end
 23 2244 a 23 2244 a
tx@Dict begin PutEnd  end
 23 2244 a 46 2244 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 46
2244 a 46 2244 a
tx@Dict begin  gsave STV CP T /ps@rot -90. def grestore  end
 46 2244 a 46 2244 a
tx@Dict begin  tx@NodeDict begin /t 1. def LPut end PutBegin  end
 46 2244 a 46 2244
a
tx@Dict begin -90.  RotBegin  end
 46 2244 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 5.69046
-8.5359 -5.69046 -8.5359    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0
-8.5359 -2.84544 0.0    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0
-8.5359 2.84544 0.0    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
46 2244 a
tx@Dict begin RotEnd  end
 46 2244 a 46 2244 a
tx@Dict begin PutEnd  end
 46 2244 a 46 2244 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 -0.5 0 0 /N@tabIstAutorVon
/N@tabBuch InitNC {  tx@Dict begin  /Lineto /lineto load def 0  setlinejoin
false pop end /AngleA 0. def /AngleB 180. def /ArmA 10.0 def /ArmB
0.0 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end  gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 46
2244 a 69 2244 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 69 2244 a 69 2244 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 69 2244 a 69 2244
a
tx@Dict begin  tx@NodeDict begin /t 0. def LPut end PutBegin  end
 69 2244 a 69 2244 a
tx@Dict begin 90.  RotBegin  end
 69 2244 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 5.69046
-8.5359 -5.69046 -8.5359    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0
-8.5359 -2.84544 0.0    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0
-8.5359 2.84544 0.0    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 69 2244 a
tx@Dict begin RotEnd  end
 69 2244 a 69 2244
a
tx@Dict begin PutEnd  end
 69 2244 a 92 2244 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 92 2244 a 92 2244 a
tx@Dict begin  gsave STV CP T /ps@rot -90. def grestore  end
 92 2244 a 92
2244 a
tx@Dict begin  tx@NodeDict begin /t 1. def LPut end PutBegin  end
 92 2244 a 92 2244 a
tx@Dict begin -90.  RotBegin  end
 92 2244 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 5.69046
-8.5359 -5.69046 -8.5359    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 5.69046
-5.69046 -5.69046 -5.69046    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 92
2244 a
tx@Dict begin RotEnd  end
 92 2244 a 92 2244 a
tx@Dict begin PutEnd  end
 92 2244 a 92 2244 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  /NCLW
CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@tabBuch /N@tabVerlag
InitNC {  tx@Dict begin  /Lineto /lineto load def 0  setlinejoin false
pop end /AngleA -90. def /AngleB 90. def /ArmA 10.0 def /ArmB 0.0 def
/ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end  gsave 0.8 SLW 0
 setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore  grestore end
 92 2244
a 115 2244 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 115 2244 a 115 2244 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 115 2244 a 115 2244
a
tx@Dict begin  tx@NodeDict begin /t 0. def LPut end PutBegin  end
 115 2244 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 5.69046
-8.5359 -5.69046 -8.5359    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0
-8.5359 -2.84544 0.0    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0
-8.5359 2.84544 0.0    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
115 2244 a
tx@Dict begin PutEnd  end
 115 2244 a 138 2244 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 138 2244 a 138 2244
a
tx@Dict begin  gsave STV CP T /ps@rot 180. def grestore  end
 138 2244 a 138 2244 a
tx@Dict begin  tx@NodeDict begin /t 1. def LPut end PutBegin  end
 138 2244 a 138 2244 a
tx@Dict begin 180.  RotBegin  end
 138 2244
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 5.69046
-8.5359 -5.69046 -8.5359    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 5.69046
-5.69046 -5.69046 -5.69046    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 138 2244 a
tx@Dict begin RotEnd  end
 138 2244 a 138 2244
a
tx@Dict begin PutEnd  end
 138 2244 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
